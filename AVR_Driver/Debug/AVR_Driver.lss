
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000d6  008000d6  000008fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ed  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b01  00000000  00000000  00002be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fff  00000000  00000000  000036e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  000046e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c8  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c61  00000000  00000000  000052d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__vector_1>
   8:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3d       	cpi	r26, 0xDA	; 218
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  8a:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_WriteCmd>:
		Number=Number*-1;
		LCD_WriteData('-');
	}
	LCD_WriteData(Number%100/10+'0');
	LCD_WriteData(Number%10/1+'0');
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	84 fb       	bst	r24, 4
  98:	66 27       	eor	r22, r22
  9a:	60 f9       	bld	r22, 0
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  a2:	c5 fb       	bst	r28, 5
  a4:	66 27       	eor	r22, r22
  a6:	60 f9       	bld	r22, 0
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  ae:	c6 fb       	bst	r28, 6
  b0:	66 27       	eor	r22, r22
  b2:	60 f9       	bld	r22, 0
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  ba:	6c 2f       	mov	r22, r28
  bc:	66 1f       	adc	r22, r22
  be:	66 27       	eor	r22, r22
  c0:	66 1f       	adc	r22, r22
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	89 e0       	ldi	r24, 0x09	; 9
  d4:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WriteCmd+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WriteCmd+0x58>
  ea:	00 00       	nop
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  f4:	6c 2f       	mov	r22, r28
  f6:	61 70       	andi	r22, 0x01	; 1
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
  fe:	c1 fb       	bst	r28, 1
 100:	66 27       	eor	r22, r22
 102:	60 f9       	bld	r22, 0
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 10a:	c2 fb       	bst	r28, 2
 10c:	66 27       	eor	r22, r22
 10e:	60 f9       	bld	r22, 0
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 116:	c3 fb       	bst	r28, 3
 118:	66 27       	eor	r22, r22
 11a:	60 f9       	bld	r22, 0
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 13a:	8f ec       	ldi	r24, 0xCF	; 207
 13c:	97 e0       	ldi	r25, 0x07	; 7
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_WriteCmd+0xac>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_WriteCmd+0xb2>
 144:	00 00       	nop
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	97 e2       	ldi	r25, 0x27	; 39
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_WriteCmd+0xc0>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_WriteCmd+0xc6>
 158:	00 00       	nop
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <LCD_Init>:
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Init+0x4>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Init+0xa>
 168:	00 00       	nop
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 170:	8f ec       	ldi	r24, 0xCF	; 207
 172:	97 e0       	ldi	r25, 0x07	; 7
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Init+0x16>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Init+0x1c>
 17a:	00 00       	nop
 17c:	88 e2       	ldi	r24, 0x28	; 40
 17e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	97 e0       	ldi	r25, 0x07	; 7
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x28>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Init+0x2e>
 18c:	00 00       	nop
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 194:	8f ec       	ldi	r24, 0xCF	; 207
 196:	97 e0       	ldi	r25, 0x07	; 7
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x3a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x40>
 19e:	00 00       	nop
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Init+0x4c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Init+0x52>
 1b0:	00 00       	nop
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1b8:	8f ec       	ldi	r24, 0xCF	; 207
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x5e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0x64>
 1c2:	00 00       	nop
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1ca:	08 95       	ret

000001cc <LCD_WriteData>:
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	84 fb       	bst	r24, 4
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 1dc:	c5 fb       	bst	r28, 5
 1de:	66 27       	eor	r22, r22
 1e0:	60 f9       	bld	r22, 0
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 1e8:	c6 fb       	bst	r28, 6
 1ea:	66 27       	eor	r22, r22
 1ec:	60 f9       	bld	r22, 0
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 1f4:	6c 2f       	mov	r22, r28
 1f6:	66 1f       	adc	r22, r22
 1f8:	66 27       	eor	r22, r22
 1fa:	66 1f       	adc	r22, r22
 1fc:	87 e0       	ldi	r24, 0x07	; 7
 1fe:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_WriteData+0x52>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_WriteData+0x58>
 224:	00 00       	nop
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 22e:	6c 2f       	mov	r22, r28
 230:	61 70       	andi	r22, 0x01	; 1
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 238:	c1 fb       	bst	r28, 1
 23a:	66 27       	eor	r22, r22
 23c:	60 f9       	bld	r22, 0
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 244:	c2 fb       	bst	r28, 2
 246:	66 27       	eor	r22, r22
 248:	60 f9       	bld	r22, 0
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 250:	c3 fb       	bst	r28, 3
 252:	66 27       	eor	r22, r22
 254:	60 f9       	bld	r22, 0
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	89 e0       	ldi	r24, 0x09	; 9
 268:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 274:	8f ec       	ldi	r24, 0xCF	; 207
 276:	97 e0       	ldi	r25, 0x07	; 7
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_WriteData+0xac>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_WriteData+0xb2>
 27e:	00 00       	nop
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	0e 94 21 03 	call	0x642	; 0x642 <DIO_Writepin>
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LCD_Clear>:
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 292:	8f ec       	ldi	r24, 0xCF	; 207
 294:	97 e0       	ldi	r25, 0x07	; 7
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Clear+0xa>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Clear+0x10>
 29c:	00 00       	nop
 29e:	08 95       	ret

000002a0 <LCD_GOTO>:
 2a0:	88 23       	and	r24, r24
 2a2:	29 f0       	breq	.+10     	; 0x2ae <LCD_GOTO+0xe>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	31 f0       	breq	.+12     	; 0x2b4 <LCD_GOTO+0x14>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <LCD_GOTO+0x18>
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <LCD_GOTO+0x18>
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	60 31       	cpi	r22, 0x10	; 16
 2ba:	10 f4       	brcc	.+4      	; 0x2c0 <LCD_GOTO+0x20>
 2bc:	86 0f       	add	r24, r22
 2be:	91 1d       	adc	r25, r1
 2c0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 2c4:	08 95       	ret

000002c6 <LCD_WriteString>:
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	8c 01       	movw	r16, r24
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <LCD_WriteString+0x1e>
 2d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteData>
 2d6:	8f ec       	ldi	r24, 0xCF	; 207
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_WriteString+0x14>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_WriteString+0x1a>
 2e0:	00 00       	nop
 2e2:	cf 5f       	subi	r28, 0xFF	; 255
 2e4:	f8 01       	movw	r30, r16
 2e6:	ec 0f       	add	r30, r28
 2e8:	f1 1d       	adc	r31, r1
 2ea:	80 81       	ld	r24, Z
 2ec:	81 11       	cpse	r24, r1
 2ee:	f1 cf       	rjmp	.-30     	; 0x2d2 <LCD_WriteString+0xc>
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <LCD_Create_Character>:

/*----------------  Function used to Create Character  --------------------*/
/*-------  Note that you have 16 memory locations for Characters and you can call them by numbers from 1 to 16 ------*/
/*------------- use LCD_GOTO(); fun before this fun -----------------------*/
void LCD_Create_Character(uint8_t *Pattern,uint8_t Location)
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	8c 01       	movw	r16, r24
	uint8_t i;
	LCD_WriteCmd(0x40 + (8*Location));
 300:	86 2f       	mov	r24, r22
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 96       	adiw	r24, 0x08	; 8
 306:	88 0f       	add	r24, r24
 308:	88 0f       	add	r24, r24
 30a:	88 0f       	add	r24, r24
 30c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
	for (i=0; i<8; i++)
 310:	c0 e0       	ldi	r28, 0x00	; 0
 312:	0d c0       	rjmp	.+26     	; 0x32e <LCD_Create_Character+0x36>
	{
		LCD_WriteData(Pattern[i]);
 314:	f8 01       	movw	r30, r16
 316:	ec 0f       	add	r30, r28
 318:	f1 1d       	adc	r31, r1
 31a:	80 81       	ld	r24, Z
 31c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	8f ec       	ldi	r24, 0xCF	; 207
 322:	97 e0       	ldi	r25, 0x07	; 7
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_Create_Character+0x2c>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_Create_Character+0x32>
 32a:	00 00       	nop
/*------------- use LCD_GOTO(); fun before this fun -----------------------*/
void LCD_Create_Character(uint8_t *Pattern,uint8_t Location)
{
	uint8_t i;
	LCD_WriteCmd(0x40 + (8*Location));
	for (i=0; i<8; i++)
 32c:	cf 5f       	subi	r28, 0xFF	; 255
 32e:	c8 30       	cpi	r28, 0x08	; 8
 330:	88 f3       	brcs	.-30     	; 0x314 <LCD_Create_Character+0x1c>
	{
		LCD_WriteData(Pattern[i]);
		_delay_ms(1);
	}
}
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	08 95       	ret

0000033a <main>:
uint8_t Battery2Char[] = {0x0e, 0x1b, 0x11, 0x11, 0x11, 0x1f, 0x1f, 0x1f};
uint8_t Battery3Char[] = {0x0e, 0x1b, 0x11, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f};
	
				/*-------------------------- The Main Function ----------------------------*/
int main(void)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <main+0x6>
 340:	00 d0       	rcall	.+0      	; 0x342 <main+0x8>
 342:	00 d0       	rcall	.+0      	; 0x344 <main+0xa>
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
	
	
    Init_Pins();
 348:	0e 94 11 03 	call	0x622	; 0x622 <Init_Pins>
    LCD_Init();
 34c:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
	LCD_Create_Character(Battery1Char,1);
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	80 e7       	ldi	r24, 0x70	; 112
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(Battery2Char,2);
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	88 e6       	ldi	r24, 0x68	; 104
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(Battery3Char,3);
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	80 e6       	ldi	r24, 0x60	; 96
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(BellChar,4);
 36e:	64 e0       	ldi	r22, 0x04	; 4
 370:	88 e7       	ldi	r24, 0x78	; 120
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(OpenedMouse,5);
 378:	65 e0       	ldi	r22, 0x05	; 5
 37a:	80 ea       	ldi	r24, 0xA0	; 160
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(ClosedMouse,6);
 382:	66 e0       	ldi	r22, 0x06	; 6
 384:	88 e9       	ldi	r24, 0x98	; 152
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(SpeakerChar,7);
 38c:	67 e0       	ldi	r22, 0x07	; 7
 38e:	88 e8       	ldi	r24, 0x88	; 136
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(StickMan,8);
 396:	68 e0       	ldi	r22, 0x08	; 8
 398:	88 ea       	ldi	r24, 0xA8	; 168
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(SmileyFaceChar,9);
 3a0:	69 e0       	ldi	r22, 0x09	; 9
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	LCD_Create_Character(HeartChar,10);
 3aa:	6a e0       	ldi	r22, 0x0A	; 10
 3ac:	80 e9       	ldi	r24, 0x90	; 144
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_Create_Character>
	uint8_t str[]="Ahmed";
 3b4:	86 e0       	ldi	r24, 0x06	; 6
 3b6:	e0 eb       	ldi	r30, 0xB0	; 176
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	de 01       	movw	r26, r28
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	01 90       	ld	r0, Z+
 3c0:	0d 92       	st	X+, r0
 3c2:	8a 95       	dec	r24
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x84>
	LCD_Clear();
 3c6:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Clear>
	
    while(1)
    {
		uint8_t l=0;
 3ca:	10 e0       	ldi	r17, 0x00	; 0
		while(str[l])
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <main+0x96>
		l++;
 3ce:	1f 5f       	subi	r17, 0xFF	; 255
	LCD_Clear();
	
    while(1)
    {
		uint8_t l=0;
		while(str[l])
 3d0:	e1 e0       	ldi	r30, 0x01	; 1
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	ec 0f       	add	r30, r28
 3d6:	fd 1f       	adc	r31, r29
 3d8:	e1 0f       	add	r30, r17
 3da:	f1 1d       	adc	r31, r1
 3dc:	80 81       	ld	r24, Z
 3de:	81 11       	cpse	r24, r1
 3e0:	f6 cf       	rjmp	.-20     	; 0x3ce <main+0x94>
 3e2:	1b c0       	rjmp	.+54     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		l++;
		
		for (uint8_t i=l; i>1; i--)
		{
			
			LCD_GOTO(0,0);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_GOTO>
			LCD_WriteString(str+i-1);
 3ec:	81 2f       	mov	r24, r17
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	2c 0f       	add	r18, r28
 3f8:	3d 1f       	adc	r19, r29
 3fa:	82 0f       	add	r24, r18
 3fc:	93 1f       	adc	r25, r19
 3fe:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_WriteString>
 402:	3f ef       	ldi	r19, 0xFF	; 255
 404:	89 e6       	ldi	r24, 0x69	; 105
 406:	98 e1       	ldi	r25, 0x18	; 24
 408:	31 50       	subi	r19, 0x01	; 1
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear();
 414:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Clear>
    {
		uint8_t l=0;
		while(str[l])
		l++;
		
		for (uint8_t i=l; i>1; i--)
 418:	11 50       	subi	r17, 0x01	; 1
 41a:	12 30       	cpi	r17, 0x02	; 2
 41c:	18 f7       	brcc	.-58     	; 0x3e4 <main+0xaa>
 41e:	10 e0       	ldi	r17, 0x00	; 0
 420:	14 c0       	rjmp	.+40     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			LCD_Clear();
		}
		
		for (uint8_t i=0; i<16; i++)
		{
			LCD_GOTO(0,i);
 422:	61 2f       	mov	r22, r17
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_GOTO>
			LCD_WriteString(str);
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_WriteString>
 432:	2f ef       	ldi	r18, 0xFF	; 255
 434:	39 e6       	ldi	r19, 0x69	; 105
 436:	88 e1       	ldi	r24, 0x18	; 24
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	30 40       	sbci	r19, 0x00	; 0
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear();
 444:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Clear>
			LCD_WriteString(str+i-1);
			_delay_ms(1000);
			LCD_Clear();
		}
		
		for (uint8_t i=0; i<16; i++)
 448:	1f 5f       	subi	r17, 0xFF	; 255
 44a:	10 31       	cpi	r17, 0x10	; 16
 44c:	50 f3       	brcs	.-44     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 44e:	bd cf       	rjmp	.-134    	; 0x3ca <main+0x90>

00000450 <DIO_Initpin>:
		{
			DIO_Initpin(i,status);
		}
		break;
	}
}
 450:	98 2f       	mov	r25, r24
 452:	96 95       	lsr	r25
 454:	96 95       	lsr	r25
 456:	96 95       	lsr	r25
 458:	87 70       	andi	r24, 0x07	; 7
 45a:	61 30       	cpi	r22, 0x01	; 1
 45c:	31 f0       	breq	.+12     	; 0x46a <DIO_Initpin+0x1a>
 45e:	08 f4       	brcc	.+2      	; 0x462 <DIO_Initpin+0x12>
 460:	54 c0       	rjmp	.+168    	; 0x50a <DIO_Initpin+0xba>
 462:	62 30       	cpi	r22, 0x02	; 2
 464:	09 f4       	brne	.+2      	; 0x468 <DIO_Initpin+0x18>
 466:	a1 c0       	rjmp	.+322    	; 0x5aa <DIO_Initpin+0x15a>
 468:	08 95       	ret
 46a:	91 30       	cpi	r25, 0x01	; 1
 46c:	c1 f0       	breq	.+48     	; 0x49e <DIO_Initpin+0x4e>
 46e:	28 f0       	brcs	.+10     	; 0x47a <DIO_Initpin+0x2a>
 470:	92 30       	cpi	r25, 0x02	; 2
 472:	39 f1       	breq	.+78     	; 0x4c2 <DIO_Initpin+0x72>
 474:	93 30       	cpi	r25, 0x03	; 3
 476:	b9 f1       	breq	.+110    	; 0x4e6 <DIO_Initpin+0x96>
 478:	08 95       	ret
 47a:	4a b3       	in	r20, 0x1a	; 26
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_Initpin+0x38>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_Initpin+0x34>
 48c:	cb 01       	movw	r24, r22
 48e:	96 2f       	mov	r25, r22
 490:	90 95       	com	r25
 492:	94 23       	and	r25, r20
 494:	9a bb       	out	0x1a, r25	; 26
 496:	9b b3       	in	r25, 0x1b	; 27
 498:	89 2b       	or	r24, r25
 49a:	8b bb       	out	0x1b, r24	; 27
 49c:	08 95       	ret
 49e:	47 b3       	in	r20, 0x17	; 23
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	b9 01       	movw	r22, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_Initpin+0x5c>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_Initpin+0x58>
 4b0:	cb 01       	movw	r24, r22
 4b2:	96 2f       	mov	r25, r22
 4b4:	90 95       	com	r25
 4b6:	94 23       	and	r25, r20
 4b8:	97 bb       	out	0x17, r25	; 23
 4ba:	98 b3       	in	r25, 0x18	; 24
 4bc:	89 2b       	or	r24, r25
 4be:	88 bb       	out	0x18, r24	; 24
 4c0:	08 95       	ret
 4c2:	44 b3       	in	r20, 0x14	; 20
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	b9 01       	movw	r22, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_Initpin+0x80>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_Initpin+0x7c>
 4d4:	cb 01       	movw	r24, r22
 4d6:	96 2f       	mov	r25, r22
 4d8:	90 95       	com	r25
 4da:	94 23       	and	r25, r20
 4dc:	94 bb       	out	0x14, r25	; 20
 4de:	95 b3       	in	r25, 0x15	; 21
 4e0:	89 2b       	or	r24, r25
 4e2:	85 bb       	out	0x15, r24	; 21
 4e4:	08 95       	ret
 4e6:	41 b3       	in	r20, 0x11	; 17
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	b9 01       	movw	r22, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_Initpin+0xa4>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	8a 95       	dec	r24
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_Initpin+0xa0>
 4f8:	cb 01       	movw	r24, r22
 4fa:	96 2f       	mov	r25, r22
 4fc:	90 95       	com	r25
 4fe:	94 23       	and	r25, r20
 500:	91 bb       	out	0x11, r25	; 17
 502:	92 b3       	in	r25, 0x12	; 18
 504:	89 2b       	or	r24, r25
 506:	82 bb       	out	0x12, r24	; 18
 508:	08 95       	ret
 50a:	91 30       	cpi	r25, 0x01	; 1
 50c:	c1 f0       	breq	.+48     	; 0x53e <DIO_Initpin+0xee>
 50e:	28 f0       	brcs	.+10     	; 0x51a <DIO_Initpin+0xca>
 510:	92 30       	cpi	r25, 0x02	; 2
 512:	39 f1       	breq	.+78     	; 0x562 <DIO_Initpin+0x112>
 514:	93 30       	cpi	r25, 0x03	; 3
 516:	b9 f1       	breq	.+110    	; 0x586 <DIO_Initpin+0x136>
 518:	08 95       	ret
 51a:	4a b3       	in	r20, 0x1a	; 26
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_Initpin+0xd8>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_Initpin+0xd4>
 52c:	cb 01       	movw	r24, r22
 52e:	80 95       	com	r24
 530:	94 2f       	mov	r25, r20
 532:	98 23       	and	r25, r24
 534:	9a bb       	out	0x1a, r25	; 26
 536:	9b b3       	in	r25, 0x1b	; 27
 538:	89 23       	and	r24, r25
 53a:	8b bb       	out	0x1b, r24	; 27
 53c:	08 95       	ret
 53e:	47 b3       	in	r20, 0x17	; 23
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	b9 01       	movw	r22, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_Initpin+0xfc>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	8a 95       	dec	r24
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_Initpin+0xf8>
 550:	cb 01       	movw	r24, r22
 552:	80 95       	com	r24
 554:	94 2f       	mov	r25, r20
 556:	98 23       	and	r25, r24
 558:	97 bb       	out	0x17, r25	; 23
 55a:	98 b3       	in	r25, 0x18	; 24
 55c:	89 23       	and	r24, r25
 55e:	88 bb       	out	0x18, r24	; 24
 560:	08 95       	ret
 562:	44 b3       	in	r20, 0x14	; 20
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_Initpin+0x120>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_Initpin+0x11c>
 574:	cb 01       	movw	r24, r22
 576:	80 95       	com	r24
 578:	94 2f       	mov	r25, r20
 57a:	98 23       	and	r25, r24
 57c:	94 bb       	out	0x14, r25	; 20
 57e:	95 b3       	in	r25, 0x15	; 21
 580:	89 23       	and	r24, r25
 582:	85 bb       	out	0x15, r24	; 21
 584:	08 95       	ret
 586:	41 b3       	in	r20, 0x11	; 17
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_Initpin+0x144>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	8a 95       	dec	r24
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_Initpin+0x140>
 598:	cb 01       	movw	r24, r22
 59a:	80 95       	com	r24
 59c:	94 2f       	mov	r25, r20
 59e:	98 23       	and	r25, r24
 5a0:	91 bb       	out	0x11, r25	; 17
 5a2:	92 b3       	in	r25, 0x12	; 18
 5a4:	89 23       	and	r24, r25
 5a6:	82 bb       	out	0x12, r24	; 18
 5a8:	08 95       	ret
 5aa:	91 30       	cpi	r25, 0x01	; 1
 5ac:	99 f0       	breq	.+38     	; 0x5d4 <DIO_Initpin+0x184>
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <DIO_Initpin+0x16a>
 5b0:	92 30       	cpi	r25, 0x02	; 2
 5b2:	e9 f0       	breq	.+58     	; 0x5ee <DIO_Initpin+0x19e>
 5b4:	93 30       	cpi	r25, 0x03	; 3
 5b6:	41 f1       	breq	.+80     	; 0x608 <DIO_Initpin+0x1b8>
 5b8:	08 95       	ret
 5ba:	4a b3       	in	r20, 0x1a	; 26
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	b9 01       	movw	r22, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_Initpin+0x178>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	8a 95       	dec	r24
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_Initpin+0x174>
 5cc:	cb 01       	movw	r24, r22
 5ce:	84 2b       	or	r24, r20
 5d0:	8a bb       	out	0x1a, r24	; 26
 5d2:	08 95       	ret
 5d4:	47 b3       	in	r20, 0x17	; 23
 5d6:	21 e0       	ldi	r18, 0x01	; 1
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	b9 01       	movw	r22, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_Initpin+0x192>
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	8a 95       	dec	r24
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_Initpin+0x18e>
 5e6:	cb 01       	movw	r24, r22
 5e8:	84 2b       	or	r24, r20
 5ea:	87 bb       	out	0x17, r24	; 23
 5ec:	08 95       	ret
 5ee:	44 b3       	in	r20, 0x14	; 20
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	b9 01       	movw	r22, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_Initpin+0x1ac>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_Initpin+0x1a8>
 600:	cb 01       	movw	r24, r22
 602:	84 2b       	or	r24, r20
 604:	84 bb       	out	0x14, r24	; 20
 606:	08 95       	ret
 608:	41 b3       	in	r20, 0x11	; 17
 60a:	21 e0       	ldi	r18, 0x01	; 1
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	b9 01       	movw	r22, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_Initpin+0x1c6>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	8a 95       	dec	r24
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_Initpin+0x1c2>
 61a:	cb 01       	movw	r24, r22
 61c:	84 2b       	or	r24, r20
 61e:	81 bb       	out	0x11, r24	; 17
 620:	08 95       	ret

00000622 <Init_Pins>:
 622:	cf 93       	push	r28
 624:	c0 e0       	ldi	r28, 0x00	; 0
 626:	09 c0       	rjmp	.+18     	; 0x63a <Init_Pins+0x18>
 628:	ec 2f       	mov	r30, r28
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	ea 54       	subi	r30, 0x4A	; 74
 62e:	ff 4f       	sbci	r31, 0xFF	; 255
 630:	60 81       	ld	r22, Z
 632:	8c 2f       	mov	r24, r28
 634:	0e 94 28 02 	call	0x450	; 0x450 <DIO_Initpin>
 638:	cf 5f       	subi	r28, 0xFF	; 255
 63a:	c0 32       	cpi	r28, 0x20	; 32
 63c:	a8 f3       	brcs	.-22     	; 0x628 <Init_Pins+0x6>
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
 642:	98 2f       	mov	r25, r24
 644:	96 95       	lsr	r25
 646:	96 95       	lsr	r25
 648:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
 64a:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
 64c:	61 30       	cpi	r22, 0x01	; 1
 64e:	e1 f5       	brne	.+120    	; 0x6c8 <DIO_Writepin+0x86>
		
		switch(port){
 650:	91 30       	cpi	r25, 0x01	; 1
 652:	99 f0       	breq	.+38     	; 0x67a <DIO_Writepin+0x38>
 654:	28 f0       	brcs	.+10     	; 0x660 <DIO_Writepin+0x1e>
 656:	92 30       	cpi	r25, 0x02	; 2
 658:	e9 f0       	breq	.+58     	; 0x694 <DIO_Writepin+0x52>
 65a:	93 30       	cpi	r25, 0x03	; 3
 65c:	41 f1       	breq	.+80     	; 0x6ae <DIO_Writepin+0x6c>
 65e:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
 660:	4b b3       	in	r20, 0x1b	; 27
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	b9 01       	movw	r22, r18
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_Writepin+0x2c>
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	8a 95       	dec	r24
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_Writepin+0x28>
 672:	cb 01       	movw	r24, r22
 674:	84 2b       	or	r24, r20
 676:	8b bb       	out	0x1b, r24	; 27
			break;
 678:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
 67a:	48 b3       	in	r20, 0x18	; 24
 67c:	21 e0       	ldi	r18, 0x01	; 1
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	b9 01       	movw	r22, r18
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_Writepin+0x46>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	8a 95       	dec	r24
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_Writepin+0x42>
 68c:	cb 01       	movw	r24, r22
 68e:	84 2b       	or	r24, r20
 690:	88 bb       	out	0x18, r24	; 24
			break;
 692:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
 694:	45 b3       	in	r20, 0x15	; 21
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	b9 01       	movw	r22, r18
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_Writepin+0x60>
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	8a 95       	dec	r24
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_Writepin+0x5c>
 6a6:	cb 01       	movw	r24, r22
 6a8:	84 2b       	or	r24, r20
 6aa:	85 bb       	out	0x15, r24	; 21
			break;
 6ac:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
 6ae:	42 b3       	in	r20, 0x12	; 18
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	b9 01       	movw	r22, r18
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_Writepin+0x7a>
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	8a 95       	dec	r24
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_Writepin+0x76>
 6c0:	cb 01       	movw	r24, r22
 6c2:	84 2b       	or	r24, r20
 6c4:	82 bb       	out	0x12, r24	; 18
			break;
 6c6:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
 6c8:	61 11       	cpse	r22, r1
 6ca:	3f c0       	rjmp	.+126    	; 0x74a <DIO_Writepin+0x108>
		switch(port){
 6cc:	91 30       	cpi	r25, 0x01	; 1
 6ce:	a1 f0       	breq	.+40     	; 0x6f8 <DIO_Writepin+0xb6>
 6d0:	28 f0       	brcs	.+10     	; 0x6dc <DIO_Writepin+0x9a>
 6d2:	92 30       	cpi	r25, 0x02	; 2
 6d4:	f9 f0       	breq	.+62     	; 0x714 <DIO_Writepin+0xd2>
 6d6:	93 30       	cpi	r25, 0x03	; 3
 6d8:	59 f1       	breq	.+86     	; 0x730 <DIO_Writepin+0xee>
 6da:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
 6dc:	4b b3       	in	r20, 0x1b	; 27
 6de:	21 e0       	ldi	r18, 0x01	; 1
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	b9 01       	movw	r22, r18
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_Writepin+0xa8>
 6e6:	66 0f       	add	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	8a 95       	dec	r24
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_Writepin+0xa4>
 6ee:	cb 01       	movw	r24, r22
 6f0:	80 95       	com	r24
 6f2:	84 23       	and	r24, r20
 6f4:	8b bb       	out	0x1b, r24	; 27
			break;
 6f6:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 6f8:	48 b3       	in	r20, 0x18	; 24
 6fa:	21 e0       	ldi	r18, 0x01	; 1
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	b9 01       	movw	r22, r18
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_Writepin+0xc4>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	8a 95       	dec	r24
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_Writepin+0xc0>
 70a:	cb 01       	movw	r24, r22
 70c:	80 95       	com	r24
 70e:	84 23       	and	r24, r20
 710:	88 bb       	out	0x18, r24	; 24
			break;
 712:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 714:	45 b3       	in	r20, 0x15	; 21
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	b9 01       	movw	r22, r18
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_Writepin+0xe0>
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	8a 95       	dec	r24
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_Writepin+0xdc>
 726:	cb 01       	movw	r24, r22
 728:	80 95       	com	r24
 72a:	84 23       	and	r24, r20
 72c:	85 bb       	out	0x15, r24	; 21
			break;
 72e:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 730:	42 b3       	in	r20, 0x12	; 18
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	b9 01       	movw	r22, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_Writepin+0xfc>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_Writepin+0xf8>
 742:	cb 01       	movw	r24, r22
 744:	80 95       	com	r24
 746:	84 23       	and	r24, r20
 748:	82 bb       	out	0x12, r24	; 18
 74a:	08 95       	ret

0000074c <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
 74c:	1f 92       	push	r1
 74e:	0f 92       	push	r0
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
 76e:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <Fptr_EXI0>
 772:	f0 91 d9 00 	lds	r31, 0x00D9	; 0x8000d9 <Fptr_EXI0+0x1>
 776:	30 97       	sbiw	r30, 0x00	; 0
 778:	09 f0       	breq	.+2      	; 0x77c <__vector_1+0x30>
		Fptr_EXI0();
 77a:	09 95       	icall
	}
}
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__vector_2>:

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT1_vect){
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	2f 93       	push	r18
 7aa:	3f 93       	push	r19
 7ac:	4f 93       	push	r20
 7ae:	5f 93       	push	r21
 7b0:	6f 93       	push	r22
 7b2:	7f 93       	push	r23
 7b4:	8f 93       	push	r24
 7b6:	9f 93       	push	r25
 7b8:	af 93       	push	r26
 7ba:	bf 93       	push	r27
 7bc:	ef 93       	push	r30
 7be:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
 7c0:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <__data_end>
 7c4:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <__data_end+0x1>
 7c8:	30 97       	sbiw	r30, 0x00	; 0
 7ca:	09 f0       	breq	.+2      	; 0x7ce <__vector_2+0x30>
		Fptr_EXI1();
 7cc:	09 95       	icall
	}
}
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
