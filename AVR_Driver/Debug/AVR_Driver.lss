
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000012d0  00001364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800092  00800092  00001396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030d4  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001088  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f1c  00000000  00000000  00005930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a58  00000000  00000000  0000784c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010fb  00000000  00000000  000082a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024d9  00000000  00000000  0000939f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000b878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_1>
       8:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_2>
       c:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_3>
      10:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__vector_4>
      14:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_5>
      18:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_6>
      1c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__vector_7>
      20:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_8>
      24:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_9>
      28:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_10>
      2c:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	15 03       	mulsu	r17, r21
      56:	1f 03       	fmul	r17, r23
      58:	29 03       	fmul	r18, r17
      5a:	33 03       	mulsu	r19, r19
      5c:	3d 03       	fmul	r19, r21
      5e:	47 03       	mulsu	r20, r23
      60:	51 03       	mulsu	r21, r17
      62:	96 05       	cpc	r25, r6
      64:	a0 05       	cpc	r26, r0
      66:	aa 05       	cpc	r26, r10
      68:	b4 05       	cpc	r27, r4
      6a:	be 05       	cpc	r27, r14
      6c:	c8 05       	cpc	r28, r8
      6e:	d2 05       	cpc	r29, r2
      70:	dc 05       	cpc	r29, r12

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e0 ed       	ldi	r30, 0xD0	; 208
      86:	f2 e1       	ldi	r31, 0x12	; 18
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a2 39       	cpi	r26, 0x92	; 146
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a2 e9       	ldi	r26, 0x92	; 146
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a8 3a       	cpi	r26, 0xA8	; 168
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      a8:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <Fan_Controller_call>:



void Fan_Controller_call()
{
	sei();
      b0:	78 94       	sei
	Init_Pins();
      b2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <Init_Pins>
	LCD_Init();
      b6:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_Init>
	ADC_Init(ADC_AVCC,ADC_SCALER_64_);
      ba:	65 e0       	ldi	r22, 0x05	; 5
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	0e 94 ed 02 	call	0x5da	; 0x5da <ADC_Init>
	LCD_GOTO(0,0);
      c2:	60 e0       	ldi	r22, 0x00	; 0
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_GOTO>
	uint16_t x;
	while(1)
	{
		x=Temp_sensor(ADC1);
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	0e 94 45 07 	call	0xe8a	; 0xe8a <Temp_sensor>
      d0:	c8 2f       	mov	r28, r24
      d2:	08 2f       	mov	r16, r24
      d4:	10 e0       	ldi	r17, 0x00	; 0
		LCD_GOTO(0,0);
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_GOTO>
		LCD_WriteString("Temp : ");
      de:	80 e6       	ldi	r24, 0x60	; 96
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteString>
		LCD_WriteNumber(x);
      e6:	6c 2f       	mov	r22, r28
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 0a 08 	call	0x1014	; 0x1014 <__floatunsisf>
      f2:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_WriteNumber>
		LCD_GOTO(1,0);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_GOTO>
		LCD_WriteString("Speed : ");
      fe:	88 e6       	ldi	r24, 0x68	; 104
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteString>
		
		if (x<25)
     106:	09 31       	cpi	r16, 0x19	; 25
     108:	11 05       	cpc	r17, r1
     10a:	58 f4       	brcc	.+22     	; 0x122 <Fan_Controller_call+0x72>
		{
			Mspeed(10,left);
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	8a e0       	ldi	r24, 0x0A	; 10
     110:	0e 94 c0 00 	call	0x180	; 0x180 <Mspeed>
			LCD_WriteNumber(10);
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	80 e2       	ldi	r24, 0x20	; 32
     11a:	91 e4       	ldi	r25, 0x41	; 65
     11c:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_WriteNumber>
     120:	d4 cf       	rjmp	.-88     	; 0xca <Fan_Controller_call+0x1a>
		}
		else if(x>=25 && x<30)
     122:	c8 01       	movw	r24, r16
     124:	49 97       	sbiw	r24, 0x19	; 25
     126:	05 97       	sbiw	r24, 0x05	; 5
     128:	58 f4       	brcc	.+22     	; 0x140 <Fan_Controller_call+0x90>
		{
			Mspeed(50,left);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	82 e3       	ldi	r24, 0x32	; 50
     12e:	0e 94 c0 00 	call	0x180	; 0x180 <Mspeed>
			LCD_WriteNumber(50);
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	88 e4       	ldi	r24, 0x48	; 72
     138:	92 e4       	ldi	r25, 0x42	; 66
     13a:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_WriteNumber>
     13e:	c5 cf       	rjmp	.-118    	; 0xca <Fan_Controller_call+0x1a>
		}
		else if(x>=30 && x<35)
     140:	c8 01       	movw	r24, r16
     142:	4e 97       	sbiw	r24, 0x1e	; 30
     144:	05 97       	sbiw	r24, 0x05	; 5
     146:	58 f4       	brcc	.+22     	; 0x15e <Fan_Controller_call+0xae>
		{
			Mspeed(70,left);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	86 e4       	ldi	r24, 0x46	; 70
     14c:	0e 94 c0 00 	call	0x180	; 0x180 <Mspeed>
			LCD_WriteNumber(70);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	8c e8       	ldi	r24, 0x8C	; 140
     156:	92 e4       	ldi	r25, 0x42	; 66
     158:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_WriteNumber>
     15c:	b6 cf       	rjmp	.-148    	; 0xca <Fan_Controller_call+0x1a>
		}
		else if(x>=35 && x<40)
     15e:	03 52       	subi	r16, 0x23	; 35
     160:	11 09       	sbc	r17, r1
     162:	05 30       	cpi	r16, 0x05	; 5
     164:	11 05       	cpc	r17, r1
     166:	08 f0       	brcs	.+2      	; 0x16a <Fan_Controller_call+0xba>
     168:	b0 cf       	rjmp	.-160    	; 0xca <Fan_Controller_call+0x1a>
		{
			Mspeed(90,left);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	8a e5       	ldi	r24, 0x5A	; 90
     16e:	0e 94 c0 00 	call	0x180	; 0x180 <Mspeed>
			LCD_WriteNumber(90);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	84 eb       	ldi	r24, 0xB4	; 180
     178:	92 e4       	ldi	r25, 0x42	; 66
     17a:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_WriteNumber>
     17e:	a5 cf       	rjmp	.-182    	; 0xca <Fan_Controller_call+0x1a>

00000180 <Mspeed>:
	}
}


void Mspeed(uint8_t s,Motor_dir dir)
{
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	c8 2f       	mov	r28, r24
     186:	d6 2f       	mov	r29, r22
	TIMER0_Init(FAST_PWM,TIMER0_SCALER_8,Inverting);
     188:	42 e0       	ldi	r20, 0x02	; 2
     18a:	62 e0       	ldi	r22, 0x02	; 2
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	0e 94 68 05 	call	0xad0	; 0xad0 <TIMER0_Init>
	OCR0=255-((uint16_t)255*s)/100;
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	c8 9f       	mul	r28, r24
     196:	90 01       	movw	r18, r0
     198:	11 24       	eor	r1, r1
     19a:	36 95       	lsr	r19
     19c:	27 95       	ror	r18
     19e:	36 95       	lsr	r19
     1a0:	27 95       	ror	r18
     1a2:	ab e7       	ldi	r26, 0x7B	; 123
     1a4:	b4 e1       	ldi	r27, 0x14	; 20
     1a6:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     1aa:	96 95       	lsr	r25
     1ac:	87 95       	ror	r24
     1ae:	80 95       	com	r24
     1b0:	8c bf       	out	0x3c, r24	; 60
	if (dir == left)
     1b2:	d1 11       	cpse	r29, r1
     1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <Mspeed+0x48>
	{
		DIO_Writepin(IN1,LOW);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	8b e0       	ldi	r24, 0x0B	; 11
     1ba:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
		DIO_Writepin(EN1,HIGH);
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	8f e0       	ldi	r24, 0x0F	; 15
     1c2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     1c6:	0a c0       	rjmp	.+20     	; 0x1dc <Mspeed+0x5c>
	}
	else if (dir == right)
     1c8:	d1 30       	cpi	r29, 0x01	; 1
     1ca:	41 f4       	brne	.+16     	; 0x1dc <Mspeed+0x5c>
	{
		DIO_Writepin(IN2,LOW);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	8e e0       	ldi	r24, 0x0E	; 14
     1d0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
		DIO_Writepin(EN1,HIGH);
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	8f e0       	ldi	r24, 0x0F	; 15
     1d8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
	}
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <LCD_WriteCmd>:
	for(uint8_t i =0; i < n ; i++)
	{
		LCD_WriteData(' ');
		_delay_ms(1);
	}
}
     1e2:	cf 93       	push	r28
     1e4:	c8 2f       	mov	r28, r24
     1e6:	84 fb       	bst	r24, 4
     1e8:	66 27       	eor	r22, r22
     1ea:	60 f9       	bld	r22, 0
     1ec:	84 e0       	ldi	r24, 0x04	; 4
     1ee:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     1f2:	c5 fb       	bst	r28, 5
     1f4:	66 27       	eor	r22, r22
     1f6:	60 f9       	bld	r22, 0
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     1fe:	c6 fb       	bst	r28, 6
     200:	66 27       	eor	r22, r22
     202:	60 f9       	bld	r22, 0
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     20a:	6c 2f       	mov	r22, r28
     20c:	66 1f       	adc	r22, r22
     20e:	66 27       	eor	r22, r22
     210:	66 1f       	adc	r22, r22
     212:	87 e0       	ldi	r24, 0x07	; 7
     214:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	88 e0       	ldi	r24, 0x08	; 8
     21c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	89 e0       	ldi	r24, 0x09	; 9
     224:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	8a e0       	ldi	r24, 0x0A	; 10
     22c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     230:	8f ec       	ldi	r24, 0xCF	; 207
     232:	97 e0       	ldi	r25, 0x07	; 7
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <LCD_WriteCmd+0x52>
     238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_WriteCmd+0x58>
     23a:	00 00       	nop
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     244:	6c 2f       	mov	r22, r28
     246:	61 70       	andi	r22, 0x01	; 1
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     24e:	c1 fb       	bst	r28, 1
     250:	66 27       	eor	r22, r22
     252:	60 f9       	bld	r22, 0
     254:	85 e0       	ldi	r24, 0x05	; 5
     256:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     25a:	c2 fb       	bst	r28, 2
     25c:	66 27       	eor	r22, r22
     25e:	60 f9       	bld	r22, 0
     260:	86 e0       	ldi	r24, 0x06	; 6
     262:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     266:	c3 fb       	bst	r28, 3
     268:	66 27       	eor	r22, r22
     26a:	60 f9       	bld	r22, 0
     26c:	87 e0       	ldi	r24, 0x07	; 7
     26e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	88 e0       	ldi	r24, 0x08	; 8
     276:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	89 e0       	ldi	r24, 0x09	; 9
     27e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	8a e0       	ldi	r24, 0x0A	; 10
     286:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     28a:	8f ec       	ldi	r24, 0xCF	; 207
     28c:	97 e0       	ldi	r25, 0x07	; 7
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <LCD_WriteCmd+0xac>
     292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_WriteCmd+0xb2>
     294:	00 00       	nop
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	8a e0       	ldi	r24, 0x0A	; 10
     29a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     29e:	8f e0       	ldi	r24, 0x0F	; 15
     2a0:	97 e2       	ldi	r25, 0x27	; 39
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_WriteCmd+0xc0>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_WriteCmd+0xc6>
     2a8:	00 00       	nop
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCD_Init>:
     2ae:	8f e3       	ldi	r24, 0x3F	; 63
     2b0:	9c e9       	ldi	r25, 0x9C	; 156
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_Init+0x4>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_Init+0xa>
     2b8:	00 00       	nop
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_WriteCmd>
     2c0:	8f ec       	ldi	r24, 0xCF	; 207
     2c2:	97 e0       	ldi	r25, 0x07	; 7
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_Init+0x16>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_Init+0x1c>
     2ca:	00 00       	nop
     2cc:	88 e2       	ldi	r24, 0x28	; 40
     2ce:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_WriteCmd>
     2d2:	8f ec       	ldi	r24, 0xCF	; 207
     2d4:	97 e0       	ldi	r25, 0x07	; 7
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_Init+0x28>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_Init+0x2e>
     2dc:	00 00       	nop
     2de:	8c e0       	ldi	r24, 0x0C	; 12
     2e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_WriteCmd>
     2e4:	8f ec       	ldi	r24, 0xCF	; 207
     2e6:	97 e0       	ldi	r25, 0x07	; 7
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_Init+0x3a>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_Init+0x40>
     2ee:	00 00       	nop
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_WriteCmd>
     2f6:	8f e9       	ldi	r24, 0x9F	; 159
     2f8:	9f e0       	ldi	r25, 0x0F	; 15
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_Init+0x4c>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_Init+0x52>
     300:	00 00       	nop
     302:	86 e0       	ldi	r24, 0x06	; 6
     304:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_WriteCmd>
     308:	8f ec       	ldi	r24, 0xCF	; 207
     30a:	97 e0       	ldi	r25, 0x07	; 7
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_Init+0x5e>
     310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_Init+0x64>
     312:	00 00       	nop
     314:	80 e8       	ldi	r24, 0x80	; 128
     316:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_WriteCmd>
     31a:	08 95       	ret

0000031c <LCD_WriteData>:
     31c:	cf 93       	push	r28
     31e:	c8 2f       	mov	r28, r24
     320:	84 fb       	bst	r24, 4
     322:	66 27       	eor	r22, r22
     324:	60 f9       	bld	r22, 0
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     32c:	c5 fb       	bst	r28, 5
     32e:	66 27       	eor	r22, r22
     330:	60 f9       	bld	r22, 0
     332:	85 e0       	ldi	r24, 0x05	; 5
     334:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     338:	c6 fb       	bst	r28, 6
     33a:	66 27       	eor	r22, r22
     33c:	60 f9       	bld	r22, 0
     33e:	86 e0       	ldi	r24, 0x06	; 6
     340:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     344:	6c 2f       	mov	r22, r28
     346:	66 1f       	adc	r22, r22
     348:	66 27       	eor	r22, r22
     34a:	66 1f       	adc	r22, r22
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	88 e0       	ldi	r24, 0x08	; 8
     356:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	89 e0       	ldi	r24, 0x09	; 9
     35e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	8a e0       	ldi	r24, 0x0A	; 10
     366:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     36a:	8f ec       	ldi	r24, 0xCF	; 207
     36c:	97 e0       	ldi	r25, 0x07	; 7
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <LCD_WriteData+0x52>
     372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_WriteData+0x58>
     374:	00 00       	nop
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	8a e0       	ldi	r24, 0x0A	; 10
     37a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     37e:	6c 2f       	mov	r22, r28
     380:	61 70       	andi	r22, 0x01	; 1
     382:	84 e0       	ldi	r24, 0x04	; 4
     384:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     388:	c1 fb       	bst	r28, 1
     38a:	66 27       	eor	r22, r22
     38c:	60 f9       	bld	r22, 0
     38e:	85 e0       	ldi	r24, 0x05	; 5
     390:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     394:	c2 fb       	bst	r28, 2
     396:	66 27       	eor	r22, r22
     398:	60 f9       	bld	r22, 0
     39a:	86 e0       	ldi	r24, 0x06	; 6
     39c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     3a0:	c3 fb       	bst	r28, 3
     3a2:	66 27       	eor	r22, r22
     3a4:	60 f9       	bld	r22, 0
     3a6:	87 e0       	ldi	r24, 0x07	; 7
     3a8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	88 e0       	ldi	r24, 0x08	; 8
     3b0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	89 e0       	ldi	r24, 0x09	; 9
     3b8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	8a e0       	ldi	r24, 0x0A	; 10
     3c0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     3c4:	8f ec       	ldi	r24, 0xCF	; 207
     3c6:	97 e0       	ldi	r25, 0x07	; 7
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_WriteData+0xac>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_WriteData+0xb2>
     3ce:	00 00       	nop
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	8a e0       	ldi	r24, 0x0A	; 10
     3d4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Writepin>
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <LCD_GOTO>:
     3dc:	88 23       	and	r24, r24
     3de:	29 f0       	breq	.+10     	; 0x3ea <LCD_GOTO+0xe>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <LCD_GOTO+0x14>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <LCD_GOTO+0x18>
     3ea:	80 e8       	ldi	r24, 0x80	; 128
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <LCD_GOTO+0x18>
     3f0:	80 ec       	ldi	r24, 0xC0	; 192
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	60 31       	cpi	r22, 0x10	; 16
     3f6:	10 f4       	brcc	.+4      	; 0x3fc <LCD_GOTO+0x20>
     3f8:	86 0f       	add	r24, r22
     3fa:	91 1d       	adc	r25, r1
     3fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_WriteCmd>
     400:	08 95       	ret

00000402 <LCD_WriteString>:
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	8c 01       	movw	r16, r24
     40a:	c0 e0       	ldi	r28, 0x00	; 0
     40c:	09 c0       	rjmp	.+18     	; 0x420 <LCD_WriteString+0x1e>
     40e:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_WriteData>
     412:	8f ec       	ldi	r24, 0xCF	; 207
     414:	97 e0       	ldi	r25, 0x07	; 7
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <LCD_WriteString+0x14>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <LCD_WriteString+0x1a>
     41c:	00 00       	nop
     41e:	cf 5f       	subi	r28, 0xFF	; 255
     420:	f8 01       	movw	r30, r16
     422:	ec 0f       	add	r30, r28
     424:	f1 1d       	adc	r31, r1
     426:	80 81       	ld	r24, Z
     428:	81 11       	cpse	r24, r1
     42a:	f1 cf       	rjmp	.-30     	; 0x40e <LCD_WriteString+0xc>
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	08 95       	ret

00000434 <LCD_WriteNumber>:

/*----------------  Function used to Write Real Number  --------------------*/

void LCD_WriteNumber(float Number)
{
     434:	8f 92       	push	r8
     436:	9f 92       	push	r9
     438:	af 92       	push	r10
     43a:	bf 92       	push	r11
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	60 97       	sbiw	r28, 0x10	; 16
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	4b 01       	movw	r8, r22
     458:	5c 01       	movw	r10, r24
	uint8_t i=0,arr[16];
	if(Number==0)
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	a9 01       	movw	r20, r18
     460:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__cmpsf2>
     464:	81 11       	cpse	r24, r1
     466:	03 c0       	rjmp	.+6      	; 0x46e <LCD_WriteNumber+0x3a>
	LCD_WriteData('0');
     468:	80 e3       	ldi	r24, 0x30	; 48
     46a:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_WriteData>
	
	if (Number<0)
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	a9 01       	movw	r20, r18
     474:	c5 01       	movw	r24, r10
     476:	b4 01       	movw	r22, r8
     478:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__cmpsf2>
     47c:	88 23       	and	r24, r24
     47e:	3c f4       	brge	.+14     	; 0x48e <LCD_WriteNumber+0x5a>
	{
		Number=Number*-1;
     480:	b7 fa       	bst	r11, 7
     482:	b0 94       	com	r11
     484:	b7 f8       	bld	r11, 7
     486:	b0 94       	com	r11
		LCD_WriteData('-');
     488:	8d e2       	ldi	r24, 0x2D	; 45
     48a:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_WriteData>
	}
	int int_num=Number;	// integer part
     48e:	c5 01       	movw	r24, r10
     490:	b4 01       	movw	r22, r8
     492:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fixsfsi>
     496:	7b 01       	movw	r14, r22
	float fra_num=Number-int_num; // fraction part
     498:	07 2e       	mov	r0, r23
     49a:	00 0c       	add	r0, r0
     49c:	88 0b       	sbc	r24, r24
     49e:	99 0b       	sbc	r25, r25
     4a0:	0e 94 0c 08 	call	0x1018	; 0x1018 <__floatsisf>
     4a4:	9b 01       	movw	r18, r22
     4a6:	ac 01       	movw	r20, r24
     4a8:	c5 01       	movw	r24, r10
     4aa:	b4 01       	movw	r22, r8
     4ac:	0e 94 62 07 	call	0xec4	; 0xec4 <__subsf3>
     4b0:	4b 01       	movw	r8, r22
     4b2:	5c 01       	movw	r10, r24

/*----------------  Function used to Write Real Number  --------------------*/

void LCD_WriteNumber(float Number)
{
	uint8_t i=0,arr[16];
     4b4:	10 e0       	ldi	r17, 0x00	; 0
		LCD_WriteData('-');
	}
	int int_num=Number;	// integer part
	float fra_num=Number-int_num; // fraction part
	
		while(int_num)
     4b6:	10 c0       	rjmp	.+32     	; 0x4d8 <LCD_WriteNumber+0xa4>
		{
			arr[i]=int_num%10 +'0';
     4b8:	c7 01       	movw	r24, r14
     4ba:	6a e0       	ldi	r22, 0x0A	; 10
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	0e 94 29 09 	call	0x1252	; 0x1252 <__divmodhi4>
     4c2:	e1 e0       	ldi	r30, 0x01	; 1
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	ec 0f       	add	r30, r28
     4c8:	fd 1f       	adc	r31, r29
     4ca:	e1 0f       	add	r30, r17
     4cc:	f1 1d       	adc	r31, r1
     4ce:	80 5d       	subi	r24, 0xD0	; 208
     4d0:	80 83       	st	Z, r24
			int_num/=10;
     4d2:	e6 2e       	mov	r14, r22
     4d4:	f7 2e       	mov	r15, r23
			i++;
     4d6:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_WriteData('-');
	}
	int int_num=Number;	// integer part
	float fra_num=Number-int_num; // fraction part
	
		while(int_num)
     4d8:	e1 14       	cp	r14, r1
     4da:	f1 04       	cpc	r15, r1
     4dc:	69 f7       	brne	.-38     	; 0x4b8 <LCD_WriteNumber+0x84>
     4de:	0d c0       	rjmp	.+26     	; 0x4fa <LCD_WriteNumber+0xc6>
			i++;
		}
		// write array content (Number ) --> start writing from the biggest digit
		for(;i>0;i--)
		{
			LCD_WriteData(arr[i-1]);
     4e0:	e1 2f       	mov	r30, r17
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	2c 0f       	add	r18, r28
     4ec:	3d 1f       	adc	r19, r29
     4ee:	e2 0f       	add	r30, r18
     4f0:	f3 1f       	adc	r31, r19
     4f2:	80 81       	ld	r24, Z
     4f4:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_WriteData>
			arr[i]=int_num%10 +'0';
			int_num/=10;
			i++;
		}
		// write array content (Number ) --> start writing from the biggest digit
		for(;i>0;i--)
     4f8:	11 50       	subi	r17, 0x01	; 1
     4fa:	11 11       	cpse	r17, r1
     4fc:	f1 cf       	rjmp	.-30     	; 0x4e0 <LCD_WriteNumber+0xac>
		{
			LCD_WriteData(arr[i-1]);
		}
		if (fra_num!=0)
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	a9 01       	movw	r20, r18
     504:	c5 01       	movw	r24, r10
     506:	b4 01       	movw	r22, r8
     508:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__cmpsf2>
     50c:	88 23       	and	r24, r24
     50e:	09 f4       	brne	.+2      	; 0x512 <LCD_WriteNumber+0xde>
     510:	4f c0       	rjmp	.+158    	; 0x5b0 <LCD_WriteNumber+0x17c>
		{
			LCD_WriteData('.');
     512:	8e e2       	ldi	r24, 0x2E	; 46
     514:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_WriteData>
			i=0;
			uint16_t int_num1;
			int_num1=fra_num*1000;
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	4a e7       	ldi	r20, 0x7A	; 122
     51e:	54 e4       	ldi	r21, 0x44	; 68
     520:	c5 01       	movw	r24, r10
     522:	b4 01       	movw	r22, r8
     524:	0e 94 bc 08 	call	0x1178	; 0x1178 <__mulsf3>
     528:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fixunssfsi>
     52c:	ab 01       	movw	r20, r22
			while(int_num1)
     52e:	2d c0       	rjmp	.+90     	; 0x58a <LCD_WriteNumber+0x156>
			{
				arr[i]=int_num1%10 +'0';
     530:	9a 01       	movw	r18, r20
     532:	ad ec       	ldi	r26, 0xCD	; 205
     534:	bc ec       	ldi	r27, 0xCC	; 204
     536:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     53a:	96 95       	lsr	r25
     53c:	87 95       	ror	r24
     53e:	96 95       	lsr	r25
     540:	87 95       	ror	r24
     542:	96 95       	lsr	r25
     544:	87 95       	ror	r24
     546:	9c 01       	movw	r18, r24
     548:	22 0f       	add	r18, r18
     54a:	33 1f       	adc	r19, r19
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	9a 01       	movw	r18, r20
     55e:	28 1b       	sub	r18, r24
     560:	39 0b       	sbc	r19, r25
     562:	c9 01       	movw	r24, r18
     564:	e1 e0       	ldi	r30, 0x01	; 1
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	ec 0f       	add	r30, r28
     56a:	fd 1f       	adc	r31, r29
     56c:	e1 0f       	add	r30, r17
     56e:	f1 1d       	adc	r31, r1
     570:	80 5d       	subi	r24, 0xD0	; 208
     572:	80 83       	st	Z, r24
				int_num1/=10;
     574:	9a 01       	movw	r18, r20
     576:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     57a:	ac 01       	movw	r20, r24
     57c:	56 95       	lsr	r21
     57e:	47 95       	ror	r20
     580:	56 95       	lsr	r21
     582:	47 95       	ror	r20
     584:	56 95       	lsr	r21
     586:	47 95       	ror	r20
				i++;
     588:	1f 5f       	subi	r17, 0xFF	; 255
		{
			LCD_WriteData('.');
			i=0;
			uint16_t int_num1;
			int_num1=fra_num*1000;
			while(int_num1)
     58a:	41 15       	cp	r20, r1
     58c:	51 05       	cpc	r21, r1
     58e:	81 f6       	brne	.-96     	; 0x530 <LCD_WriteNumber+0xfc>
     590:	0d c0       	rjmp	.+26     	; 0x5ac <LCD_WriteNumber+0x178>
				i++;
			}
			// write array content (Number ) --> start writing from the biggest digit
			for(;i>0;i--)
			{
				LCD_WriteData(arr[i-1]);
     592:	e1 2f       	mov	r30, r17
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	8c 0f       	add	r24, r28
     59e:	9d 1f       	adc	r25, r29
     5a0:	e8 0f       	add	r30, r24
     5a2:	f9 1f       	adc	r31, r25
     5a4:	80 81       	ld	r24, Z
     5a6:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_WriteData>
				arr[i]=int_num1%10 +'0';
				int_num1/=10;
				i++;
			}
			// write array content (Number ) --> start writing from the biggest digit
			for(;i>0;i--)
     5aa:	11 50       	subi	r17, 0x01	; 1
     5ac:	11 11       	cpse	r17, r1
     5ae:	f1 cf       	rjmp	.-30     	; 0x592 <LCD_WriteNumber+0x15e>
			{
				LCD_WriteData(arr[i-1]);
			}
		}	
}
     5b0:	60 96       	adiw	r28, 0x10	; 16
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	08 95       	ret

000005d0 <main>:
#include "Apps/Fan Controller.h"		
			/*-------------------------- The Main Function ----------------------------*/
			
int main(void)
{
	Fan_Controller_call();
     5d0:	0e 94 58 00 	call	0xb0	; 0xb0 <Fan_Controller_call>

}
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	08 95       	ret

000005da <ADC_Init>:

/*------------------------- Function Definitions -----------------------------*/

void ADC_Init(ADC_VoltageReference reference , ADC_Scaler_Type scaler)
{
	switch(reference)
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	59 f0       	breq	.+22     	; 0x5f4 <ADC_Init+0x1a>
     5de:	18 f0       	brcs	.+6      	; 0x5e6 <ADC_Init+0xc>
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	79 f0       	breq	.+30     	; 0x602 <ADC_Init+0x28>
     5e4:	14 c0       	rjmp	.+40     	; 0x60e <ADC_Init+0x34>
	{
		case ADC_AREF:
		CLEAR_BIT(ADMUX , REFS0);
     5e6:	87 b1       	in	r24, 0x07	; 7
     5e8:	8f 7b       	andi	r24, 0xBF	; 191
     5ea:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX , REFS1);
     5ec:	87 b1       	in	r24, 0x07	; 7
     5ee:	8f 77       	andi	r24, 0x7F	; 127
     5f0:	87 b9       	out	0x07, r24	; 7
		break;
     5f2:	0d c0       	rjmp	.+26     	; 0x60e <ADC_Init+0x34>
		case ADC_AVCC:
		SET_BIT(ADMUX , REFS0);
     5f4:	87 b1       	in	r24, 0x07	; 7
     5f6:	80 64       	ori	r24, 0x40	; 64
     5f8:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX , REFS1);
     5fa:	87 b1       	in	r24, 0x07	; 7
     5fc:	8f 77       	andi	r24, 0x7F	; 127
     5fe:	87 b9       	out	0x07, r24	; 7
		break;
     600:	06 c0       	rjmp	.+12     	; 0x60e <ADC_Init+0x34>
		case ADC_2_56V:
		SET_BIT(ADMUX , REFS0);
     602:	87 b1       	in	r24, 0x07	; 7
     604:	80 64       	ori	r24, 0x40	; 64
     606:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX , REFS1);
     608:	87 b1       	in	r24, 0x07	; 7
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// prescaler selection
	
	ADCSRA &= 0xF8; // 0B11111000
     60e:	86 b1       	in	r24, 0x06	; 6
     610:	88 7f       	andi	r24, 0xF8	; 248
     612:	86 b9       	out	0x06, r24	; 6
	switch(scaler)
     614:	86 2f       	mov	r24, r22
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	87 30       	cpi	r24, 0x07	; 7
     61a:	91 05       	cpc	r25, r1
     61c:	08 f0       	brcs	.+2      	; 0x620 <ADC_Init+0x46>
     61e:	4a c0       	rjmp	.+148    	; 0x6b4 <ADC_Init+0xda>
     620:	fc 01       	movw	r30, r24
     622:	e6 5d       	subi	r30, 0xD6	; 214
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__tablejump2__>
	{
		case ADC_SCALER_2:
		CLEAR_BIT(ADCSRA,ADPS0);
     62a:	86 b1       	in	r24, 0x06	; 6
     62c:	8e 7f       	andi	r24, 0xFE	; 254
     62e:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
     630:	86 b1       	in	r24, 0x06	; 6
     632:	8d 7f       	andi	r24, 0xFD	; 253
     634:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS2);
     636:	86 b1       	in	r24, 0x06	; 6
     638:	8b 7f       	andi	r24, 0xFB	; 251
     63a:	86 b9       	out	0x06, r24	; 6
		break;
     63c:	3b c0       	rjmp	.+118    	; 0x6b4 <ADC_Init+0xda>
		case ADC_SCALER_4:
		CLEAR_BIT(ADCSRA,ADPS0);
     63e:	86 b1       	in	r24, 0x06	; 6
     640:	8e 7f       	andi	r24, 0xFE	; 254
     642:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     644:	86 b1       	in	r24, 0x06	; 6
     646:	82 60       	ori	r24, 0x02	; 2
     648:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS2);
     64a:	86 b1       	in	r24, 0x06	; 6
     64c:	8b 7f       	andi	r24, 0xFB	; 251
     64e:	86 b9       	out	0x06, r24	; 6
		break;
     650:	31 c0       	rjmp	.+98     	; 0x6b4 <ADC_Init+0xda>
		case ADC_SCALER_8_:
		SET_BIT(ADCSRA,ADPS0);
     652:	86 b1       	in	r24, 0x06	; 6
     654:	81 60       	ori	r24, 0x01	; 1
     656:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     658:	86 b1       	in	r24, 0x06	; 6
     65a:	82 60       	ori	r24, 0x02	; 2
     65c:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS2);
     65e:	86 b1       	in	r24, 0x06	; 6
     660:	8b 7f       	andi	r24, 0xFB	; 251
     662:	86 b9       	out	0x06, r24	; 6
		break;
     664:	27 c0       	rjmp	.+78     	; 0x6b4 <ADC_Init+0xda>
		case ADC_SCALER_16:
		CLEAR_BIT(ADCSRA,ADPS0);
     666:	86 b1       	in	r24, 0x06	; 6
     668:	8e 7f       	andi	r24, 0xFE	; 254
     66a:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
     66c:	86 b1       	in	r24, 0x06	; 6
     66e:	8d 7f       	andi	r24, 0xFD	; 253
     670:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     672:	86 b1       	in	r24, 0x06	; 6
     674:	84 60       	ori	r24, 0x04	; 4
     676:	86 b9       	out	0x06, r24	; 6
		break;
     678:	1d c0       	rjmp	.+58     	; 0x6b4 <ADC_Init+0xda>
		case ADC_SCALER_32:
		SET_BIT(ADCSRA,ADPS0);
     67a:	86 b1       	in	r24, 0x06	; 6
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
     680:	86 b1       	in	r24, 0x06	; 6
     682:	8d 7f       	andi	r24, 0xFD	; 253
     684:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     686:	86 b1       	in	r24, 0x06	; 6
     688:	84 60       	ori	r24, 0x04	; 4
     68a:	86 b9       	out	0x06, r24	; 6
		break;
     68c:	13 c0       	rjmp	.+38     	; 0x6b4 <ADC_Init+0xda>
		case ADC_SCALER_64_:
		CLEAR_BIT(ADCSRA,ADPS0);
     68e:	86 b1       	in	r24, 0x06	; 6
     690:	8e 7f       	andi	r24, 0xFE	; 254
     692:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     694:	86 b1       	in	r24, 0x06	; 6
     696:	82 60       	ori	r24, 0x02	; 2
     698:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     69a:	86 b1       	in	r24, 0x06	; 6
     69c:	84 60       	ori	r24, 0x04	; 4
     69e:	86 b9       	out	0x06, r24	; 6
		break;
     6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <ADC_Init+0xda>
		case ADC_SCALER_128:
		SET_BIT(ADCSRA,ADPS0);
     6a2:	86 b1       	in	r24, 0x06	; 6
     6a4:	81 60       	ori	r24, 0x01	; 1
     6a6:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     6a8:	86 b1       	in	r24, 0x06	; 6
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     6ae:	86 b1       	in	r24, 0x06	; 6
     6b0:	84 60       	ori	r24, 0x04	; 4
     6b2:	86 b9       	out	0x06, r24	; 6
		break;
	}
	// read adjust right
	CLEAR_BIT(ADMUX , ADLAR);
     6b4:	87 b1       	in	r24, 0x07	; 7
     6b6:	8f 7d       	andi	r24, 0xDF	; 223
     6b8:	87 b9       	out	0x07, r24	; 7
	
	// Enable
	SET_BIT(ADCSRA , ADEN);
     6ba:	86 b1       	in	r24, 0x06	; 6
     6bc:	80 68       	ori	r24, 0x80	; 128
     6be:	86 b9       	out	0x06, r24	; 6
     6c0:	08 95       	ret

000006c2 <ADC_ReadChannel>:
}

uint16_t ADC_ReadChannel(ADC_Channel channel)
{
	// channel selection
	ADMUX &= 0xE0; // 0B11100000
     6c2:	97 b1       	in	r25, 0x07	; 7
     6c4:	90 7e       	andi	r25, 0xE0	; 224
     6c6:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
     6c8:	97 b1       	in	r25, 0x07	; 7
     6ca:	89 2b       	or	r24, r25
     6cc:	87 b9       	out	0x07, r24	; 7
	//  ADC Start Conversion
	SET_BIT(ADCSRA,ADSC);
     6ce:	86 b1       	in	r24, 0x06	; 6
     6d0:	80 64       	ori	r24, 0x40	; 64
     6d2:	86 b9       	out	0x06, r24	; 6
	// polling while conversion
	while(READ_BIT(ADCSRA,ADSC));
     6d4:	36 99       	sbic	0x06, 6	; 6
     6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <ADC_ReadChannel+0x12>
	return ADC;
     6d8:	84 b1       	in	r24, 0x04	; 4
     6da:	95 b1       	in	r25, 0x05	; 5
}
     6dc:	08 95       	ret

000006de <DIO_Initpin>:
		{
			DIO_Initpin(i,status);
		}
		break;
	}
}
     6de:	98 2f       	mov	r25, r24
     6e0:	96 95       	lsr	r25
     6e2:	96 95       	lsr	r25
     6e4:	96 95       	lsr	r25
     6e6:	87 70       	andi	r24, 0x07	; 7
     6e8:	61 30       	cpi	r22, 0x01	; 1
     6ea:	31 f0       	breq	.+12     	; 0x6f8 <DIO_Initpin+0x1a>
     6ec:	08 f4       	brcc	.+2      	; 0x6f0 <DIO_Initpin+0x12>
     6ee:	54 c0       	rjmp	.+168    	; 0x798 <DIO_Initpin+0xba>
     6f0:	62 30       	cpi	r22, 0x02	; 2
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <DIO_Initpin+0x18>
     6f4:	a1 c0       	rjmp	.+322    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     6f6:	08 95       	ret
     6f8:	91 30       	cpi	r25, 0x01	; 1
     6fa:	c1 f0       	breq	.+48     	; 0x72c <DIO_Initpin+0x4e>
     6fc:	28 f0       	brcs	.+10     	; 0x708 <DIO_Initpin+0x2a>
     6fe:	92 30       	cpi	r25, 0x02	; 2
     700:	39 f1       	breq	.+78     	; 0x750 <DIO_Initpin+0x72>
     702:	93 30       	cpi	r25, 0x03	; 3
     704:	b9 f1       	breq	.+110    	; 0x774 <DIO_Initpin+0x96>
     706:	08 95       	ret
     708:	4a b3       	in	r20, 0x1a	; 26
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	b9 01       	movw	r22, r18
     710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_Initpin+0x38>
     712:	66 0f       	add	r22, r22
     714:	77 1f       	adc	r23, r23
     716:	8a 95       	dec	r24
     718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_Initpin+0x34>
     71a:	cb 01       	movw	r24, r22
     71c:	96 2f       	mov	r25, r22
     71e:	90 95       	com	r25
     720:	94 23       	and	r25, r20
     722:	9a bb       	out	0x1a, r25	; 26
     724:	9b b3       	in	r25, 0x1b	; 27
     726:	89 2b       	or	r24, r25
     728:	8b bb       	out	0x1b, r24	; 27
     72a:	08 95       	ret
     72c:	47 b3       	in	r20, 0x17	; 23
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	b9 01       	movw	r22, r18
     734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_Initpin+0x5c>
     736:	66 0f       	add	r22, r22
     738:	77 1f       	adc	r23, r23
     73a:	8a 95       	dec	r24
     73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_Initpin+0x58>
     73e:	cb 01       	movw	r24, r22
     740:	96 2f       	mov	r25, r22
     742:	90 95       	com	r25
     744:	94 23       	and	r25, r20
     746:	97 bb       	out	0x17, r25	; 23
     748:	98 b3       	in	r25, 0x18	; 24
     74a:	89 2b       	or	r24, r25
     74c:	88 bb       	out	0x18, r24	; 24
     74e:	08 95       	ret
     750:	44 b3       	in	r20, 0x14	; 20
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	b9 01       	movw	r22, r18
     758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_Initpin+0x80>
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	8a 95       	dec	r24
     760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_Initpin+0x7c>
     762:	cb 01       	movw	r24, r22
     764:	96 2f       	mov	r25, r22
     766:	90 95       	com	r25
     768:	94 23       	and	r25, r20
     76a:	94 bb       	out	0x14, r25	; 20
     76c:	95 b3       	in	r25, 0x15	; 21
     76e:	89 2b       	or	r24, r25
     770:	85 bb       	out	0x15, r24	; 21
     772:	08 95       	ret
     774:	41 b3       	in	r20, 0x11	; 17
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	b9 01       	movw	r22, r18
     77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_Initpin+0xa4>
     77e:	66 0f       	add	r22, r22
     780:	77 1f       	adc	r23, r23
     782:	8a 95       	dec	r24
     784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_Initpin+0xa0>
     786:	cb 01       	movw	r24, r22
     788:	96 2f       	mov	r25, r22
     78a:	90 95       	com	r25
     78c:	94 23       	and	r25, r20
     78e:	91 bb       	out	0x11, r25	; 17
     790:	92 b3       	in	r25, 0x12	; 18
     792:	89 2b       	or	r24, r25
     794:	82 bb       	out	0x12, r24	; 18
     796:	08 95       	ret
     798:	91 30       	cpi	r25, 0x01	; 1
     79a:	c1 f0       	breq	.+48     	; 0x7cc <DIO_Initpin+0xee>
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <DIO_Initpin+0xca>
     79e:	92 30       	cpi	r25, 0x02	; 2
     7a0:	39 f1       	breq	.+78     	; 0x7f0 <DIO_Initpin+0x112>
     7a2:	93 30       	cpi	r25, 0x03	; 3
     7a4:	b9 f1       	breq	.+110    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7a6:	08 95       	ret
     7a8:	4a b3       	in	r20, 0x1a	; 26
     7aa:	21 e0       	ldi	r18, 0x01	; 1
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	b9 01       	movw	r22, r18
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_Initpin+0xd8>
     7b2:	66 0f       	add	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	8a 95       	dec	r24
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_Initpin+0xd4>
     7ba:	cb 01       	movw	r24, r22
     7bc:	80 95       	com	r24
     7be:	94 2f       	mov	r25, r20
     7c0:	98 23       	and	r25, r24
     7c2:	9a bb       	out	0x1a, r25	; 26
     7c4:	9b b3       	in	r25, 0x1b	; 27
     7c6:	89 23       	and	r24, r25
     7c8:	8b bb       	out	0x1b, r24	; 27
     7ca:	08 95       	ret
     7cc:	47 b3       	in	r20, 0x17	; 23
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	b9 01       	movw	r22, r18
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_Initpin+0xfc>
     7d6:	66 0f       	add	r22, r22
     7d8:	77 1f       	adc	r23, r23
     7da:	8a 95       	dec	r24
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_Initpin+0xf8>
     7de:	cb 01       	movw	r24, r22
     7e0:	80 95       	com	r24
     7e2:	94 2f       	mov	r25, r20
     7e4:	98 23       	and	r25, r24
     7e6:	97 bb       	out	0x17, r25	; 23
     7e8:	98 b3       	in	r25, 0x18	; 24
     7ea:	89 23       	and	r24, r25
     7ec:	88 bb       	out	0x18, r24	; 24
     7ee:	08 95       	ret
     7f0:	44 b3       	in	r20, 0x14	; 20
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	b9 01       	movw	r22, r18
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_Initpin+0x120>
     7fa:	66 0f       	add	r22, r22
     7fc:	77 1f       	adc	r23, r23
     7fe:	8a 95       	dec	r24
     800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_Initpin+0x11c>
     802:	cb 01       	movw	r24, r22
     804:	80 95       	com	r24
     806:	94 2f       	mov	r25, r20
     808:	98 23       	and	r25, r24
     80a:	94 bb       	out	0x14, r25	; 20
     80c:	95 b3       	in	r25, 0x15	; 21
     80e:	89 23       	and	r24, r25
     810:	85 bb       	out	0x15, r24	; 21
     812:	08 95       	ret
     814:	41 b3       	in	r20, 0x11	; 17
     816:	21 e0       	ldi	r18, 0x01	; 1
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	b9 01       	movw	r22, r18
     81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81e:	66 0f       	add	r22, r22
     820:	77 1f       	adc	r23, r23
     822:	8a 95       	dec	r24
     824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     826:	cb 01       	movw	r24, r22
     828:	80 95       	com	r24
     82a:	94 2f       	mov	r25, r20
     82c:	98 23       	and	r25, r24
     82e:	91 bb       	out	0x11, r25	; 17
     830:	92 b3       	in	r25, 0x12	; 18
     832:	89 23       	and	r24, r25
     834:	82 bb       	out	0x12, r24	; 18
     836:	08 95       	ret
     838:	91 30       	cpi	r25, 0x01	; 1
     83a:	99 f0       	breq	.+38     	; 0x862 <__stack+0x3>
     83c:	28 f0       	brcs	.+10     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     83e:	92 30       	cpi	r25, 0x02	; 2
     840:	e9 f0       	breq	.+58     	; 0x87c <__stack+0x1d>
     842:	93 30       	cpi	r25, 0x03	; 3
     844:	41 f1       	breq	.+80     	; 0x896 <__stack+0x37>
     846:	08 95       	ret
     848:	4a b3       	in	r20, 0x1a	; 26
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	b9 01       	movw	r22, r18
     850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     852:	66 0f       	add	r22, r22
     854:	77 1f       	adc	r23, r23
     856:	8a 95       	dec	r24
     858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     85a:	cb 01       	movw	r24, r22
     85c:	84 2b       	or	r24, r20
     85e:	8a bb       	out	0x1a, r24	; 26
     860:	08 95       	ret
     862:	47 b3       	in	r20, 0x17	; 23
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	b9 01       	movw	r22, r18
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	66 0f       	add	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	8a 95       	dec	r24
     872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
     874:	cb 01       	movw	r24, r22
     876:	84 2b       	or	r24, r20
     878:	87 bb       	out	0x17, r24	; 23
     87a:	08 95       	ret
     87c:	44 b3       	in	r20, 0x14	; 20
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	b9 01       	movw	r22, r18
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	66 0f       	add	r22, r22
     888:	77 1f       	adc	r23, r23
     88a:	8a 95       	dec	r24
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	cb 01       	movw	r24, r22
     890:	84 2b       	or	r24, r20
     892:	84 bb       	out	0x14, r24	; 20
     894:	08 95       	ret
     896:	41 b3       	in	r20, 0x11	; 17
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	b9 01       	movw	r22, r18
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	66 0f       	add	r22, r22
     8a2:	77 1f       	adc	r23, r23
     8a4:	8a 95       	dec	r24
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	cb 01       	movw	r24, r22
     8aa:	84 2b       	or	r24, r20
     8ac:	81 bb       	out	0x11, r24	; 17
     8ae:	08 95       	ret

000008b0 <Init_Pins>:
     8b0:	cf 93       	push	r28
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <Init_Pins+0x18>
     8b6:	ec 2f       	mov	r30, r28
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	ef 58       	subi	r30, 0x8F	; 143
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	60 81       	ld	r22, Z
     8c0:	8c 2f       	mov	r24, r28
     8c2:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_Initpin>
     8c6:	cf 5f       	subi	r28, 0xFF	; 255
     8c8:	c0 32       	cpi	r28, 0x20	; 32
     8ca:	a8 f3       	brcs	.-22     	; 0x8b6 <Init_Pins+0x6>
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
     8d0:	98 2f       	mov	r25, r24
     8d2:	96 95       	lsr	r25
     8d4:	96 95       	lsr	r25
     8d6:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
     8d8:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
     8da:	61 30       	cpi	r22, 0x01	; 1
     8dc:	e1 f5       	brne	.+120    	; 0x956 <DIO_Writepin+0x86>
		
		switch(port){
     8de:	91 30       	cpi	r25, 0x01	; 1
     8e0:	99 f0       	breq	.+38     	; 0x908 <DIO_Writepin+0x38>
     8e2:	28 f0       	brcs	.+10     	; 0x8ee <DIO_Writepin+0x1e>
     8e4:	92 30       	cpi	r25, 0x02	; 2
     8e6:	e9 f0       	breq	.+58     	; 0x922 <DIO_Writepin+0x52>
     8e8:	93 30       	cpi	r25, 0x03	; 3
     8ea:	41 f1       	breq	.+80     	; 0x93c <DIO_Writepin+0x6c>
     8ec:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
     8ee:	4b b3       	in	r20, 0x1b	; 27
     8f0:	21 e0       	ldi	r18, 0x01	; 1
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	b9 01       	movw	r22, r18
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <DIO_Writepin+0x2c>
     8f8:	66 0f       	add	r22, r22
     8fa:	77 1f       	adc	r23, r23
     8fc:	8a 95       	dec	r24
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <DIO_Writepin+0x28>
     900:	cb 01       	movw	r24, r22
     902:	84 2b       	or	r24, r20
     904:	8b bb       	out	0x1b, r24	; 27
			break;
     906:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     908:	48 b3       	in	r20, 0x18	; 24
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	b9 01       	movw	r22, r18
     910:	02 c0       	rjmp	.+4      	; 0x916 <DIO_Writepin+0x46>
     912:	66 0f       	add	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	8a 95       	dec	r24
     918:	e2 f7       	brpl	.-8      	; 0x912 <DIO_Writepin+0x42>
     91a:	cb 01       	movw	r24, r22
     91c:	84 2b       	or	r24, r20
     91e:	88 bb       	out	0x18, r24	; 24
			break;
     920:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     922:	45 b3       	in	r20, 0x15	; 21
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	b9 01       	movw	r22, r18
     92a:	02 c0       	rjmp	.+4      	; 0x930 <DIO_Writepin+0x60>
     92c:	66 0f       	add	r22, r22
     92e:	77 1f       	adc	r23, r23
     930:	8a 95       	dec	r24
     932:	e2 f7       	brpl	.-8      	; 0x92c <DIO_Writepin+0x5c>
     934:	cb 01       	movw	r24, r22
     936:	84 2b       	or	r24, r20
     938:	85 bb       	out	0x15, r24	; 21
			break;
     93a:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     93c:	42 b3       	in	r20, 0x12	; 18
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	b9 01       	movw	r22, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_Writepin+0x7a>
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	8a 95       	dec	r24
     94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_Writepin+0x76>
     94e:	cb 01       	movw	r24, r22
     950:	84 2b       	or	r24, r20
     952:	82 bb       	out	0x12, r24	; 18
			break;
     954:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
     956:	61 11       	cpse	r22, r1
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <DIO_Writepin+0x108>
		switch(port){
     95a:	91 30       	cpi	r25, 0x01	; 1
     95c:	a1 f0       	breq	.+40     	; 0x986 <DIO_Writepin+0xb6>
     95e:	28 f0       	brcs	.+10     	; 0x96a <DIO_Writepin+0x9a>
     960:	92 30       	cpi	r25, 0x02	; 2
     962:	f9 f0       	breq	.+62     	; 0x9a2 <DIO_Writepin+0xd2>
     964:	93 30       	cpi	r25, 0x03	; 3
     966:	59 f1       	breq	.+86     	; 0x9be <DIO_Writepin+0xee>
     968:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
     96a:	4b b3       	in	r20, 0x1b	; 27
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	b9 01       	movw	r22, r18
     972:	02 c0       	rjmp	.+4      	; 0x978 <DIO_Writepin+0xa8>
     974:	66 0f       	add	r22, r22
     976:	77 1f       	adc	r23, r23
     978:	8a 95       	dec	r24
     97a:	e2 f7       	brpl	.-8      	; 0x974 <DIO_Writepin+0xa4>
     97c:	cb 01       	movw	r24, r22
     97e:	80 95       	com	r24
     980:	84 23       	and	r24, r20
     982:	8b bb       	out	0x1b, r24	; 27
			break;
     984:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
     986:	48 b3       	in	r20, 0x18	; 24
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	b9 01       	movw	r22, r18
     98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_Writepin+0xc4>
     990:	66 0f       	add	r22, r22
     992:	77 1f       	adc	r23, r23
     994:	8a 95       	dec	r24
     996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_Writepin+0xc0>
     998:	cb 01       	movw	r24, r22
     99a:	80 95       	com	r24
     99c:	84 23       	and	r24, r20
     99e:	88 bb       	out	0x18, r24	; 24
			break;
     9a0:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
     9a2:	45 b3       	in	r20, 0x15	; 21
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	b9 01       	movw	r22, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_Writepin+0xe0>
     9ac:	66 0f       	add	r22, r22
     9ae:	77 1f       	adc	r23, r23
     9b0:	8a 95       	dec	r24
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_Writepin+0xdc>
     9b4:	cb 01       	movw	r24, r22
     9b6:	80 95       	com	r24
     9b8:	84 23       	and	r24, r20
     9ba:	85 bb       	out	0x15, r24	; 21
			break;
     9bc:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
     9be:	42 b3       	in	r20, 0x12	; 18
     9c0:	21 e0       	ldi	r18, 0x01	; 1
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	b9 01       	movw	r22, r18
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_Writepin+0xfc>
     9c8:	66 0f       	add	r22, r22
     9ca:	77 1f       	adc	r23, r23
     9cc:	8a 95       	dec	r24
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_Writepin+0xf8>
     9d0:	cb 01       	movw	r24, r22
     9d2:	80 95       	com	r24
     9d4:	84 23       	and	r24, r20
     9d6:	82 bb       	out	0x12, r24	; 18
     9d8:	08 95       	ret

000009da <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
     9fc:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <Fptr_EXI0>
     a00:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <Fptr_EXI0+0x1>
     a04:	30 97       	sbiw	r30, 0x00	; 0
     a06:	09 f0       	breq	.+2      	; 0xa0a <__vector_1+0x30>
		Fptr_EXI0();
     a08:	09 95       	icall
	}
}
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_2>:

/*-------------  (ISR of EXI1) ----------------*/

ISR(INT1_vect){
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
     a4e:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <Fptr_EXI1>
     a52:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <Fptr_EXI1+0x1>
     a56:	30 97       	sbiw	r30, 0x00	; 0
     a58:	09 f0       	breq	.+2      	; 0xa5c <__vector_2+0x30>
		Fptr_EXI1();
     a5a:	09 95       	icall
	}
}
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	bf 91       	pop	r27
     a62:	af 91       	pop	r26
     a64:	9f 91       	pop	r25
     a66:	8f 91       	pop	r24
     a68:	7f 91       	pop	r23
     a6a:	6f 91       	pop	r22
     a6c:	5f 91       	pop	r21
     a6e:	4f 91       	pop	r20
     a70:	3f 91       	pop	r19
     a72:	2f 91       	pop	r18
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <__vector_3>:

/*-------------  (ISR of EXI2) ----------------*/

ISR(INT2_vect){
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
	
	if(Fptr_EXI2!=NULL_ptr){
     aa0:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
     aa4:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <__data_end+0x1>
     aa8:	30 97       	sbiw	r30, 0x00	; 0
     aaa:	09 f0       	breq	.+2      	; 0xaae <__vector_3+0x30>
		Fptr_EXI2();
     aac:	09 95       	icall
	}
     aae:	ff 91       	pop	r31
     ab0:	ef 91       	pop	r30
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	0f 90       	pop	r0
     acc:	1f 90       	pop	r1
     ace:	18 95       	reti

00000ad0 <TIMER0_Init>:
	
	pf_OC=pf;
	C_set=(1000000*time)/200;
	OCR0=200;
	TIMER0_OC_SetCallBack(fun_oc0);
	TIMER0_OCInterrupt_Enable();
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	69 f0       	breq	.+26     	; 0xaee <TIMER0_Init+0x1e>
     ad4:	28 f0       	brcs	.+10     	; 0xae0 <TIMER0_Init+0x10>
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	89 f0       	breq	.+34     	; 0xafc <TIMER0_Init+0x2c>
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	b1 f0       	breq	.+44     	; 0xb0a <TIMER0_Init+0x3a>
     ade:	1b c0       	rjmp	.+54     	; 0xb16 <TIMER0_Init+0x46>
     ae0:	83 b7       	in	r24, 0x33	; 51
     ae2:	8f 7b       	andi	r24, 0xBF	; 191
     ae4:	83 bf       	out	0x33, r24	; 51
     ae6:	83 b7       	in	r24, 0x33	; 51
     ae8:	87 7f       	andi	r24, 0xF7	; 247
     aea:	83 bf       	out	0x33, r24	; 51
     aec:	14 c0       	rjmp	.+40     	; 0xb16 <TIMER0_Init+0x46>
     aee:	83 b7       	in	r24, 0x33	; 51
     af0:	80 64       	ori	r24, 0x40	; 64
     af2:	83 bf       	out	0x33, r24	; 51
     af4:	83 b7       	in	r24, 0x33	; 51
     af6:	87 7f       	andi	r24, 0xF7	; 247
     af8:	83 bf       	out	0x33, r24	; 51
     afa:	0d c0       	rjmp	.+26     	; 0xb16 <TIMER0_Init+0x46>
     afc:	83 b7       	in	r24, 0x33	; 51
     afe:	8f 7b       	andi	r24, 0xBF	; 191
     b00:	83 bf       	out	0x33, r24	; 51
     b02:	83 b7       	in	r24, 0x33	; 51
     b04:	88 60       	ori	r24, 0x08	; 8
     b06:	83 bf       	out	0x33, r24	; 51
     b08:	06 c0       	rjmp	.+12     	; 0xb16 <TIMER0_Init+0x46>
     b0a:	83 b7       	in	r24, 0x33	; 51
     b0c:	80 64       	ori	r24, 0x40	; 64
     b0e:	83 bf       	out	0x33, r24	; 51
     b10:	83 b7       	in	r24, 0x33	; 51
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	83 bf       	out	0x33, r24	; 51
     b16:	86 2f       	mov	r24, r22
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	88 30       	cpi	r24, 0x08	; 8
     b1c:	91 05       	cpc	r25, r1
     b1e:	08 f0       	brcs	.+2      	; 0xb22 <TIMER0_Init+0x52>
     b20:	54 c0       	rjmp	.+168    	; 0xbca <TIMER0_Init+0xfa>
     b22:	fc 01       	movw	r30, r24
     b24:	ef 5c       	subi	r30, 0xCF	; 207
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__tablejump2__>
     b2c:	83 b7       	in	r24, 0x33	; 51
     b2e:	8e 7f       	andi	r24, 0xFE	; 254
     b30:	83 bf       	out	0x33, r24	; 51
     b32:	83 b7       	in	r24, 0x33	; 51
     b34:	8d 7f       	andi	r24, 0xFD	; 253
     b36:	83 bf       	out	0x33, r24	; 51
     b38:	83 b7       	in	r24, 0x33	; 51
     b3a:	8b 7f       	andi	r24, 0xFB	; 251
     b3c:	83 bf       	out	0x33, r24	; 51
     b3e:	45 c0       	rjmp	.+138    	; 0xbca <TIMER0_Init+0xfa>
     b40:	83 b7       	in	r24, 0x33	; 51
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	83 bf       	out	0x33, r24	; 51
     b46:	83 b7       	in	r24, 0x33	; 51
     b48:	8d 7f       	andi	r24, 0xFD	; 253
     b4a:	83 bf       	out	0x33, r24	; 51
     b4c:	83 b7       	in	r24, 0x33	; 51
     b4e:	8b 7f       	andi	r24, 0xFB	; 251
     b50:	83 bf       	out	0x33, r24	; 51
     b52:	3b c0       	rjmp	.+118    	; 0xbca <TIMER0_Init+0xfa>
     b54:	83 b7       	in	r24, 0x33	; 51
     b56:	8e 7f       	andi	r24, 0xFE	; 254
     b58:	83 bf       	out	0x33, r24	; 51
     b5a:	83 b7       	in	r24, 0x33	; 51
     b5c:	82 60       	ori	r24, 0x02	; 2
     b5e:	83 bf       	out	0x33, r24	; 51
     b60:	83 b7       	in	r24, 0x33	; 51
     b62:	8b 7f       	andi	r24, 0xFB	; 251
     b64:	83 bf       	out	0x33, r24	; 51
     b66:	31 c0       	rjmp	.+98     	; 0xbca <TIMER0_Init+0xfa>
     b68:	83 b7       	in	r24, 0x33	; 51
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	83 bf       	out	0x33, r24	; 51
     b6e:	83 b7       	in	r24, 0x33	; 51
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	83 bf       	out	0x33, r24	; 51
     b74:	83 b7       	in	r24, 0x33	; 51
     b76:	8b 7f       	andi	r24, 0xFB	; 251
     b78:	83 bf       	out	0x33, r24	; 51
     b7a:	27 c0       	rjmp	.+78     	; 0xbca <TIMER0_Init+0xfa>
     b7c:	83 b7       	in	r24, 0x33	; 51
     b7e:	8e 7f       	andi	r24, 0xFE	; 254
     b80:	83 bf       	out	0x33, r24	; 51
     b82:	83 b7       	in	r24, 0x33	; 51
     b84:	8d 7f       	andi	r24, 0xFD	; 253
     b86:	83 bf       	out	0x33, r24	; 51
     b88:	83 b7       	in	r24, 0x33	; 51
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	83 bf       	out	0x33, r24	; 51
     b8e:	1d c0       	rjmp	.+58     	; 0xbca <TIMER0_Init+0xfa>
     b90:	83 b7       	in	r24, 0x33	; 51
     b92:	81 60       	ori	r24, 0x01	; 1
     b94:	83 bf       	out	0x33, r24	; 51
     b96:	83 b7       	in	r24, 0x33	; 51
     b98:	8d 7f       	andi	r24, 0xFD	; 253
     b9a:	83 bf       	out	0x33, r24	; 51
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	83 bf       	out	0x33, r24	; 51
     ba2:	13 c0       	rjmp	.+38     	; 0xbca <TIMER0_Init+0xfa>
     ba4:	83 b7       	in	r24, 0x33	; 51
     ba6:	8e 7f       	andi	r24, 0xFE	; 254
     ba8:	83 bf       	out	0x33, r24	; 51
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	83 bf       	out	0x33, r24	; 51
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	84 60       	ori	r24, 0x04	; 4
     bb4:	83 bf       	out	0x33, r24	; 51
     bb6:	09 c0       	rjmp	.+18     	; 0xbca <TIMER0_Init+0xfa>
     bb8:	83 b7       	in	r24, 0x33	; 51
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	83 bf       	out	0x33, r24	; 51
     bbe:	83 b7       	in	r24, 0x33	; 51
     bc0:	82 60       	ori	r24, 0x02	; 2
     bc2:	83 bf       	out	0x33, r24	; 51
     bc4:	83 b7       	in	r24, 0x33	; 51
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	83 bf       	out	0x33, r24	; 51
     bca:	41 30       	cpi	r20, 0x01	; 1
     bcc:	69 f0       	breq	.+26     	; 0xbe8 <TIMER0_Init+0x118>
     bce:	28 f0       	brcs	.+10     	; 0xbda <TIMER0_Init+0x10a>
     bd0:	42 30       	cpi	r20, 0x02	; 2
     bd2:	c1 f0       	breq	.+48     	; 0xc04 <TIMER0_Init+0x134>
     bd4:	43 30       	cpi	r20, 0x03	; 3
     bd6:	79 f0       	breq	.+30     	; 0xbf6 <TIMER0_Init+0x126>
     bd8:	08 95       	ret
     bda:	83 b7       	in	r24, 0x33	; 51
     bdc:	8f 7e       	andi	r24, 0xEF	; 239
     bde:	83 bf       	out	0x33, r24	; 51
     be0:	83 b7       	in	r24, 0x33	; 51
     be2:	8f 7d       	andi	r24, 0xDF	; 223
     be4:	83 bf       	out	0x33, r24	; 51
     be6:	08 95       	ret
     be8:	83 b7       	in	r24, 0x33	; 51
     bea:	80 61       	ori	r24, 0x10	; 16
     bec:	83 bf       	out	0x33, r24	; 51
     bee:	83 b7       	in	r24, 0x33	; 51
     bf0:	8f 7d       	andi	r24, 0xDF	; 223
     bf2:	83 bf       	out	0x33, r24	; 51
     bf4:	08 95       	ret
     bf6:	83 b7       	in	r24, 0x33	; 51
     bf8:	8f 7e       	andi	r24, 0xEF	; 239
     bfa:	83 bf       	out	0x33, r24	; 51
     bfc:	83 b7       	in	r24, 0x33	; 51
     bfe:	80 62       	ori	r24, 0x20	; 32
     c00:	83 bf       	out	0x33, r24	; 51
     c02:	08 95       	ret
     c04:	83 b7       	in	r24, 0x33	; 51
     c06:	80 61       	ori	r24, 0x10	; 16
     c08:	83 bf       	out	0x33, r24	; 51
     c0a:	83 b7       	in	r24, 0x33	; 51
     c0c:	80 62       	ori	r24, 0x20	; 32
     c0e:	83 bf       	out	0x33, r24	; 51
     c10:	08 95       	ret

00000c12 <__vector_11>:
}
			/********************************* Timer 0 ISR functions ******************************/


	ISR(TIMER0_OVF_vect)
	{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
		if(Timer0_OVF_Fptr!=NULLptr)
     c34:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Timer0_OVF_Fptr>
     c38:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Timer0_OVF_Fptr+0x1>
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	09 f0       	breq	.+2      	; 0xc42 <__vector_11+0x30>
		{
			Timer0_OVF_Fptr();
     c40:	09 95       	icall
		}
	}
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__vector_10>:

	ISR(TIMER0_COMP_vect){
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
		Timer0_OC0_Fptr();
     c86:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Timer0_OC0_Fptr>
     c8a:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Timer0_OC0_Fptr+0x1>
     c8e:	09 95       	icall
	}
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER1_OVF_vect)
{
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	4f 93       	push	r20
     cc2:	5f 93       	push	r21
     cc4:	6f 93       	push	r22
     cc6:	7f 93       	push	r23
     cc8:	8f 93       	push	r24
     cca:	9f 93       	push	r25
     ccc:	af 93       	push	r26
     cce:	bf 93       	push	r27
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
	Timer1_OVF_Fptr();
     cd4:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Timer1_OVF_Fptr>
     cd8:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Timer1_OVF_Fptr+0x1>
     cdc:	09 95       	icall
}
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	7f 91       	pop	r23
     cec:	6f 91       	pop	r22
     cee:	5f 91       	pop	r21
     cf0:	4f 91       	pop	r20
     cf2:	3f 91       	pop	r19
     cf4:	2f 91       	pop	r18
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0
     cfc:	1f 90       	pop	r1
     cfe:	18 95       	reti

00000d00 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     d00:	1f 92       	push	r1
     d02:	0f 92       	push	r0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	0f 92       	push	r0
     d08:	11 24       	eor	r1, r1
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	Timer1_OCA_Fptr();
     d22:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Timer1_OCA_Fptr>
     d26:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Timer1_OCA_Fptr+0x1>
     d2a:	09 95       	icall
}
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
	Timer1_OCB_Fptr();
     d70:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Timer1_OCB_Fptr>
     d74:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Timer1_OCB_Fptr+0x1>
     d78:	09 95       	icall
}
     d7a:	ff 91       	pop	r31
     d7c:	ef 91       	pop	r30
     d7e:	bf 91       	pop	r27
     d80:	af 91       	pop	r26
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	7f 91       	pop	r23
     d88:	6f 91       	pop	r22
     d8a:	5f 91       	pop	r21
     d8c:	4f 91       	pop	r20
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31
	Timer1_ICU_Fptr();
     dbe:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Timer1_ICU_Fptr>
     dc2:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Timer1_ICU_Fptr+0x1>
     dc6:	09 95       	icall
}
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_5>:
	}

	/********************************* Timer 2 ISR functions ******************************/

	ISR(TIMER2_OVF_vect)
	{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
		if(Timer2_OVF_Fptr!=NULLptr)
     e0c:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Timer2_OVF_Fptr>
     e10:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <Timer2_OVF_Fptr+0x1>
     e14:	30 97       	sbiw	r30, 0x00	; 0
     e16:	09 f0       	breq	.+2      	; 0xe1a <__vector_5+0x30>
		{
			Timer2_OVF_Fptr();
     e18:	09 95       	icall
		}
	}
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_4>:

	ISR(TIMER2_COMP_vect){
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
		Timer2_OC2_Fptr();
     e5e:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <Timer2_OC2_Fptr>
     e62:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <Timer2_OC2_Fptr+0x1>
     e66:	09 95       	icall
	}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <Temp_sensor>:
static uint16_t z;
static uint16_t f;

uint8_t Temp_sensor(ADC_Channel cha)
{
	z= ADC_ReadChannel(cha);
     e8a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <ADC_ReadChannel>
	z=((uint32_t)z*5000)/1024;
     e8e:	9c 01       	movw	r18, r24
     e90:	a8 e8       	ldi	r26, 0x88	; 136
     e92:	b3 e1       	ldi	r27, 0x13	; 19
     e94:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	01 2e       	mov	r0, r17
     e9e:	1a e0       	ldi	r17, 0x0A	; 10
     ea0:	56 95       	lsr	r21
     ea2:	47 95       	ror	r20
     ea4:	37 95       	ror	r19
     ea6:	27 95       	ror	r18
     ea8:	1a 95       	dec	r17
     eaa:	d1 f7       	brne	.-12     	; 0xea0 <Temp_sensor+0x16>
     eac:	10 2d       	mov	r17, r0
	f=z/10;
     eae:	ad ec       	ldi	r26, 0xCD	; 205
     eb0:	bc ec       	ldi	r27, 0xCC	; 204
     eb2:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     eb6:	96 95       	lsr	r25
     eb8:	87 95       	ror	r24
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
	return f;
     ec2:	08 95       	ret

00000ec4 <__subsf3>:
     ec4:	50 58       	subi	r21, 0x80	; 128

00000ec6 <__addsf3>:
     ec6:	bb 27       	eor	r27, r27
     ec8:	aa 27       	eor	r26, r26
     eca:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3x>
     ece:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_round>
     ed2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_pscA>
     ed6:	38 f0       	brcs	.+14     	; 0xee6 <__addsf3+0x20>
     ed8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fp_pscB>
     edc:	20 f0       	brcs	.+8      	; 0xee6 <__addsf3+0x20>
     ede:	39 f4       	brne	.+14     	; 0xeee <__addsf3+0x28>
     ee0:	9f 3f       	cpi	r25, 0xFF	; 255
     ee2:	19 f4       	brne	.+6      	; 0xeea <__addsf3+0x24>
     ee4:	26 f4       	brtc	.+8      	; 0xeee <__addsf3+0x28>
     ee6:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_nan>
     eea:	0e f4       	brtc	.+2      	; 0xeee <__addsf3+0x28>
     eec:	e0 95       	com	r30
     eee:	e7 fb       	bst	r30, 7
     ef0:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_inf>

00000ef4 <__addsf3x>:
     ef4:	e9 2f       	mov	r30, r25
     ef6:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_split3>
     efa:	58 f3       	brcs	.-42     	; 0xed2 <__addsf3+0xc>
     efc:	ba 17       	cp	r27, r26
     efe:	62 07       	cpc	r22, r18
     f00:	73 07       	cpc	r23, r19
     f02:	84 07       	cpc	r24, r20
     f04:	95 07       	cpc	r25, r21
     f06:	20 f0       	brcs	.+8      	; 0xf10 <__addsf3x+0x1c>
     f08:	79 f4       	brne	.+30     	; 0xf28 <__addsf3x+0x34>
     f0a:	a6 f5       	brtc	.+104    	; 0xf74 <__addsf3x+0x80>
     f0c:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__fp_zero>
     f10:	0e f4       	brtc	.+2      	; 0xf14 <__addsf3x+0x20>
     f12:	e0 95       	com	r30
     f14:	0b 2e       	mov	r0, r27
     f16:	ba 2f       	mov	r27, r26
     f18:	a0 2d       	mov	r26, r0
     f1a:	0b 01       	movw	r0, r22
     f1c:	b9 01       	movw	r22, r18
     f1e:	90 01       	movw	r18, r0
     f20:	0c 01       	movw	r0, r24
     f22:	ca 01       	movw	r24, r20
     f24:	a0 01       	movw	r20, r0
     f26:	11 24       	eor	r1, r1
     f28:	ff 27       	eor	r31, r31
     f2a:	59 1b       	sub	r21, r25
     f2c:	99 f0       	breq	.+38     	; 0xf54 <__addsf3x+0x60>
     f2e:	59 3f       	cpi	r21, 0xF9	; 249
     f30:	50 f4       	brcc	.+20     	; 0xf46 <__addsf3x+0x52>
     f32:	50 3e       	cpi	r21, 0xE0	; 224
     f34:	68 f1       	brcs	.+90     	; 0xf90 <__addsf3x+0x9c>
     f36:	1a 16       	cp	r1, r26
     f38:	f0 40       	sbci	r31, 0x00	; 0
     f3a:	a2 2f       	mov	r26, r18
     f3c:	23 2f       	mov	r18, r19
     f3e:	34 2f       	mov	r19, r20
     f40:	44 27       	eor	r20, r20
     f42:	58 5f       	subi	r21, 0xF8	; 248
     f44:	f3 cf       	rjmp	.-26     	; 0xf2c <__addsf3x+0x38>
     f46:	46 95       	lsr	r20
     f48:	37 95       	ror	r19
     f4a:	27 95       	ror	r18
     f4c:	a7 95       	ror	r26
     f4e:	f0 40       	sbci	r31, 0x00	; 0
     f50:	53 95       	inc	r21
     f52:	c9 f7       	brne	.-14     	; 0xf46 <__addsf3x+0x52>
     f54:	7e f4       	brtc	.+30     	; 0xf74 <__addsf3x+0x80>
     f56:	1f 16       	cp	r1, r31
     f58:	ba 0b       	sbc	r27, r26
     f5a:	62 0b       	sbc	r22, r18
     f5c:	73 0b       	sbc	r23, r19
     f5e:	84 0b       	sbc	r24, r20
     f60:	ba f0       	brmi	.+46     	; 0xf90 <__addsf3x+0x9c>
     f62:	91 50       	subi	r25, 0x01	; 1
     f64:	a1 f0       	breq	.+40     	; 0xf8e <__addsf3x+0x9a>
     f66:	ff 0f       	add	r31, r31
     f68:	bb 1f       	adc	r27, r27
     f6a:	66 1f       	adc	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	88 1f       	adc	r24, r24
     f70:	c2 f7       	brpl	.-16     	; 0xf62 <__addsf3x+0x6e>
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <__addsf3x+0x9c>
     f74:	ba 0f       	add	r27, r26
     f76:	62 1f       	adc	r22, r18
     f78:	73 1f       	adc	r23, r19
     f7a:	84 1f       	adc	r24, r20
     f7c:	48 f4       	brcc	.+18     	; 0xf90 <__addsf3x+0x9c>
     f7e:	87 95       	ror	r24
     f80:	77 95       	ror	r23
     f82:	67 95       	ror	r22
     f84:	b7 95       	ror	r27
     f86:	f7 95       	ror	r31
     f88:	9e 3f       	cpi	r25, 0xFE	; 254
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__addsf3x+0x9a>
     f8c:	b0 cf       	rjmp	.-160    	; 0xeee <__addsf3+0x28>
     f8e:	93 95       	inc	r25
     f90:	88 0f       	add	r24, r24
     f92:	08 f0       	brcs	.+2      	; 0xf96 <__addsf3x+0xa2>
     f94:	99 27       	eor	r25, r25
     f96:	ee 0f       	add	r30, r30
     f98:	97 95       	ror	r25
     f9a:	87 95       	ror	r24
     f9c:	08 95       	ret

00000f9e <__cmpsf2>:
     f9e:	0e 94 47 08 	call	0x108e	; 0x108e <__fp_cmp>
     fa2:	08 f4       	brcc	.+2      	; 0xfa6 <__cmpsf2+0x8>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	08 95       	ret

00000fa8 <__fixsfsi>:
     fa8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fixunssfsi>
     fac:	68 94       	set
     fae:	b1 11       	cpse	r27, r1
     fb0:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_szero>
     fb4:	08 95       	ret

00000fb6 <__fixunssfsi>:
     fb6:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fp_splitA>
     fba:	88 f0       	brcs	.+34     	; 0xfde <__fixunssfsi+0x28>
     fbc:	9f 57       	subi	r25, 0x7F	; 127
     fbe:	98 f0       	brcs	.+38     	; 0xfe6 <__fixunssfsi+0x30>
     fc0:	b9 2f       	mov	r27, r25
     fc2:	99 27       	eor	r25, r25
     fc4:	b7 51       	subi	r27, 0x17	; 23
     fc6:	b0 f0       	brcs	.+44     	; 0xff4 <__fixunssfsi+0x3e>
     fc8:	e1 f0       	breq	.+56     	; 0x1002 <__fixunssfsi+0x4c>
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	1a f0       	brmi	.+6      	; 0xfda <__fixunssfsi+0x24>
     fd4:	ba 95       	dec	r27
     fd6:	c9 f7       	brne	.-14     	; 0xfca <__fixunssfsi+0x14>
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <__fixunssfsi+0x4c>
     fda:	b1 30       	cpi	r27, 0x01	; 1
     fdc:	91 f0       	breq	.+36     	; 0x1002 <__fixunssfsi+0x4c>
     fde:	0e 94 b5 08 	call	0x116a	; 0x116a <__fp_zero>
     fe2:	b1 e0       	ldi	r27, 0x01	; 1
     fe4:	08 95       	ret
     fe6:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__fp_zero>
     fea:	67 2f       	mov	r22, r23
     fec:	78 2f       	mov	r23, r24
     fee:	88 27       	eor	r24, r24
     ff0:	b8 5f       	subi	r27, 0xF8	; 248
     ff2:	39 f0       	breq	.+14     	; 0x1002 <__fixunssfsi+0x4c>
     ff4:	b9 3f       	cpi	r27, 0xF9	; 249
     ff6:	cc f3       	brlt	.-14     	; 0xfea <__fixunssfsi+0x34>
     ff8:	86 95       	lsr	r24
     ffa:	77 95       	ror	r23
     ffc:	67 95       	ror	r22
     ffe:	b3 95       	inc	r27
    1000:	d9 f7       	brne	.-10     	; 0xff8 <__fixunssfsi+0x42>
    1002:	3e f4       	brtc	.+14     	; 0x1012 <__fixunssfsi+0x5c>
    1004:	90 95       	com	r25
    1006:	80 95       	com	r24
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	08 95       	ret

00001014 <__floatunsisf>:
    1014:	e8 94       	clt
    1016:	09 c0       	rjmp	.+18     	; 0x102a <__floatsisf+0x12>

00001018 <__floatsisf>:
    1018:	97 fb       	bst	r25, 7
    101a:	3e f4       	brtc	.+14     	; 0x102a <__floatsisf+0x12>
    101c:	90 95       	com	r25
    101e:	80 95       	com	r24
    1020:	70 95       	com	r23
    1022:	61 95       	neg	r22
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	99 23       	and	r25, r25
    102c:	a9 f0       	breq	.+42     	; 0x1058 <__floatsisf+0x40>
    102e:	f9 2f       	mov	r31, r25
    1030:	96 e9       	ldi	r25, 0x96	; 150
    1032:	bb 27       	eor	r27, r27
    1034:	93 95       	inc	r25
    1036:	f6 95       	lsr	r31
    1038:	87 95       	ror	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	b7 95       	ror	r27
    1040:	f1 11       	cpse	r31, r1
    1042:	f8 cf       	rjmp	.-16     	; 0x1034 <__floatsisf+0x1c>
    1044:	fa f4       	brpl	.+62     	; 0x1084 <__floatsisf+0x6c>
    1046:	bb 0f       	add	r27, r27
    1048:	11 f4       	brne	.+4      	; 0x104e <__floatsisf+0x36>
    104a:	60 ff       	sbrs	r22, 0
    104c:	1b c0       	rjmp	.+54     	; 0x1084 <__floatsisf+0x6c>
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	8f 4f       	sbci	r24, 0xFF	; 255
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	16 c0       	rjmp	.+44     	; 0x1084 <__floatsisf+0x6c>
    1058:	88 23       	and	r24, r24
    105a:	11 f0       	breq	.+4      	; 0x1060 <__floatsisf+0x48>
    105c:	96 e9       	ldi	r25, 0x96	; 150
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <__floatsisf+0x6a>
    1060:	77 23       	and	r23, r23
    1062:	21 f0       	breq	.+8      	; 0x106c <__floatsisf+0x54>
    1064:	9e e8       	ldi	r25, 0x8E	; 142
    1066:	87 2f       	mov	r24, r23
    1068:	76 2f       	mov	r23, r22
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <__floatsisf+0x5e>
    106c:	66 23       	and	r22, r22
    106e:	71 f0       	breq	.+28     	; 0x108c <__floatsisf+0x74>
    1070:	96 e8       	ldi	r25, 0x86	; 134
    1072:	86 2f       	mov	r24, r22
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	2a f0       	brmi	.+10     	; 0x1084 <__floatsisf+0x6c>
    107a:	9a 95       	dec	r25
    107c:	66 0f       	add	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	88 1f       	adc	r24, r24
    1082:	da f7       	brpl	.-10     	; 0x107a <__floatsisf+0x62>
    1084:	88 0f       	add	r24, r24
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret

0000108e <__fp_cmp>:
    108e:	99 0f       	add	r25, r25
    1090:	00 08       	sbc	r0, r0
    1092:	55 0f       	add	r21, r21
    1094:	aa 0b       	sbc	r26, r26
    1096:	e0 e8       	ldi	r30, 0x80	; 128
    1098:	fe ef       	ldi	r31, 0xFE	; 254
    109a:	16 16       	cp	r1, r22
    109c:	17 06       	cpc	r1, r23
    109e:	e8 07       	cpc	r30, r24
    10a0:	f9 07       	cpc	r31, r25
    10a2:	c0 f0       	brcs	.+48     	; 0x10d4 <__fp_cmp+0x46>
    10a4:	12 16       	cp	r1, r18
    10a6:	13 06       	cpc	r1, r19
    10a8:	e4 07       	cpc	r30, r20
    10aa:	f5 07       	cpc	r31, r21
    10ac:	98 f0       	brcs	.+38     	; 0x10d4 <__fp_cmp+0x46>
    10ae:	62 1b       	sub	r22, r18
    10b0:	73 0b       	sbc	r23, r19
    10b2:	84 0b       	sbc	r24, r20
    10b4:	95 0b       	sbc	r25, r21
    10b6:	39 f4       	brne	.+14     	; 0x10c6 <__fp_cmp+0x38>
    10b8:	0a 26       	eor	r0, r26
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <__fp_cmp+0x46>
    10bc:	23 2b       	or	r18, r19
    10be:	24 2b       	or	r18, r20
    10c0:	25 2b       	or	r18, r21
    10c2:	21 f4       	brne	.+8      	; 0x10cc <__fp_cmp+0x3e>
    10c4:	08 95       	ret
    10c6:	0a 26       	eor	r0, r26
    10c8:	09 f4       	brne	.+2      	; 0x10cc <__fp_cmp+0x3e>
    10ca:	a1 40       	sbci	r26, 0x01	; 1
    10cc:	a6 95       	lsr	r26
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	81 1d       	adc	r24, r1
    10d2:	81 1d       	adc	r24, r1
    10d4:	08 95       	ret

000010d6 <__fp_inf>:
    10d6:	97 f9       	bld	r25, 7
    10d8:	9f 67       	ori	r25, 0x7F	; 127
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	08 95       	ret

000010e2 <__fp_nan>:
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	80 ec       	ldi	r24, 0xC0	; 192
    10e6:	08 95       	ret

000010e8 <__fp_pscA>:
    10e8:	00 24       	eor	r0, r0
    10ea:	0a 94       	dec	r0
    10ec:	16 16       	cp	r1, r22
    10ee:	17 06       	cpc	r1, r23
    10f0:	18 06       	cpc	r1, r24
    10f2:	09 06       	cpc	r0, r25
    10f4:	08 95       	ret

000010f6 <__fp_pscB>:
    10f6:	00 24       	eor	r0, r0
    10f8:	0a 94       	dec	r0
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	14 06       	cpc	r1, r20
    1100:	05 06       	cpc	r0, r21
    1102:	08 95       	ret

00001104 <__fp_round>:
    1104:	09 2e       	mov	r0, r25
    1106:	03 94       	inc	r0
    1108:	00 0c       	add	r0, r0
    110a:	11 f4       	brne	.+4      	; 0x1110 <__fp_round+0xc>
    110c:	88 23       	and	r24, r24
    110e:	52 f0       	brmi	.+20     	; 0x1124 <__fp_round+0x20>
    1110:	bb 0f       	add	r27, r27
    1112:	40 f4       	brcc	.+16     	; 0x1124 <__fp_round+0x20>
    1114:	bf 2b       	or	r27, r31
    1116:	11 f4       	brne	.+4      	; 0x111c <__fp_round+0x18>
    1118:	60 ff       	sbrs	r22, 0
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <__fp_round+0x20>
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	08 95       	ret

00001126 <__fp_split3>:
    1126:	57 fd       	sbrc	r21, 7
    1128:	90 58       	subi	r25, 0x80	; 128
    112a:	44 0f       	add	r20, r20
    112c:	55 1f       	adc	r21, r21
    112e:	59 f0       	breq	.+22     	; 0x1146 <__fp_splitA+0x10>
    1130:	5f 3f       	cpi	r21, 0xFF	; 255
    1132:	71 f0       	breq	.+28     	; 0x1150 <__fp_splitA+0x1a>
    1134:	47 95       	ror	r20

00001136 <__fp_splitA>:
    1136:	88 0f       	add	r24, r24
    1138:	97 fb       	bst	r25, 7
    113a:	99 1f       	adc	r25, r25
    113c:	61 f0       	breq	.+24     	; 0x1156 <__fp_splitA+0x20>
    113e:	9f 3f       	cpi	r25, 0xFF	; 255
    1140:	79 f0       	breq	.+30     	; 0x1160 <__fp_splitA+0x2a>
    1142:	87 95       	ror	r24
    1144:	08 95       	ret
    1146:	12 16       	cp	r1, r18
    1148:	13 06       	cpc	r1, r19
    114a:	14 06       	cpc	r1, r20
    114c:	55 1f       	adc	r21, r21
    114e:	f2 cf       	rjmp	.-28     	; 0x1134 <__fp_split3+0xe>
    1150:	46 95       	lsr	r20
    1152:	f1 df       	rcall	.-30     	; 0x1136 <__fp_splitA>
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <__fp_splitA+0x30>
    1156:	16 16       	cp	r1, r22
    1158:	17 06       	cpc	r1, r23
    115a:	18 06       	cpc	r1, r24
    115c:	99 1f       	adc	r25, r25
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <__fp_splitA+0xc>
    1160:	86 95       	lsr	r24
    1162:	71 05       	cpc	r23, r1
    1164:	61 05       	cpc	r22, r1
    1166:	08 94       	sec
    1168:	08 95       	ret

0000116a <__fp_zero>:
    116a:	e8 94       	clt

0000116c <__fp_szero>:
    116c:	bb 27       	eor	r27, r27
    116e:	66 27       	eor	r22, r22
    1170:	77 27       	eor	r23, r23
    1172:	cb 01       	movw	r24, r22
    1174:	97 f9       	bld	r25, 7
    1176:	08 95       	ret

00001178 <__mulsf3>:
    1178:	0e 94 cf 08 	call	0x119e	; 0x119e <__mulsf3x>
    117c:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_round>
    1180:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_pscA>
    1184:	38 f0       	brcs	.+14     	; 0x1194 <__mulsf3+0x1c>
    1186:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fp_pscB>
    118a:	20 f0       	brcs	.+8      	; 0x1194 <__mulsf3+0x1c>
    118c:	95 23       	and	r25, r21
    118e:	11 f0       	breq	.+4      	; 0x1194 <__mulsf3+0x1c>
    1190:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_inf>
    1194:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_nan>
    1198:	11 24       	eor	r1, r1
    119a:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_szero>

0000119e <__mulsf3x>:
    119e:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_split3>
    11a2:	70 f3       	brcs	.-36     	; 0x1180 <__mulsf3+0x8>

000011a4 <__mulsf3_pse>:
    11a4:	95 9f       	mul	r25, r21
    11a6:	c1 f3       	breq	.-16     	; 0x1198 <__mulsf3+0x20>
    11a8:	95 0f       	add	r25, r21
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	55 1f       	adc	r21, r21
    11ae:	62 9f       	mul	r22, r18
    11b0:	f0 01       	movw	r30, r0
    11b2:	72 9f       	mul	r23, r18
    11b4:	bb 27       	eor	r27, r27
    11b6:	f0 0d       	add	r31, r0
    11b8:	b1 1d       	adc	r27, r1
    11ba:	63 9f       	mul	r22, r19
    11bc:	aa 27       	eor	r26, r26
    11be:	f0 0d       	add	r31, r0
    11c0:	b1 1d       	adc	r27, r1
    11c2:	aa 1f       	adc	r26, r26
    11c4:	64 9f       	mul	r22, r20
    11c6:	66 27       	eor	r22, r22
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	66 1f       	adc	r22, r22
    11ce:	82 9f       	mul	r24, r18
    11d0:	22 27       	eor	r18, r18
    11d2:	b0 0d       	add	r27, r0
    11d4:	a1 1d       	adc	r26, r1
    11d6:	62 1f       	adc	r22, r18
    11d8:	73 9f       	mul	r23, r19
    11da:	b0 0d       	add	r27, r0
    11dc:	a1 1d       	adc	r26, r1
    11de:	62 1f       	adc	r22, r18
    11e0:	83 9f       	mul	r24, r19
    11e2:	a0 0d       	add	r26, r0
    11e4:	61 1d       	adc	r22, r1
    11e6:	22 1f       	adc	r18, r18
    11e8:	74 9f       	mul	r23, r20
    11ea:	33 27       	eor	r19, r19
    11ec:	a0 0d       	add	r26, r0
    11ee:	61 1d       	adc	r22, r1
    11f0:	23 1f       	adc	r18, r19
    11f2:	84 9f       	mul	r24, r20
    11f4:	60 0d       	add	r22, r0
    11f6:	21 1d       	adc	r18, r1
    11f8:	82 2f       	mov	r24, r18
    11fa:	76 2f       	mov	r23, r22
    11fc:	6a 2f       	mov	r22, r26
    11fe:	11 24       	eor	r1, r1
    1200:	9f 57       	subi	r25, 0x7F	; 127
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	9a f0       	brmi	.+38     	; 0x122c <__mulsf3_pse+0x88>
    1206:	f1 f0       	breq	.+60     	; 0x1244 <__mulsf3_pse+0xa0>
    1208:	88 23       	and	r24, r24
    120a:	4a f0       	brmi	.+18     	; 0x121e <__mulsf3_pse+0x7a>
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	bb 1f       	adc	r27, r27
    1212:	66 1f       	adc	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	88 1f       	adc	r24, r24
    1218:	91 50       	subi	r25, 0x01	; 1
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	a9 f7       	brne	.-22     	; 0x1208 <__mulsf3_pse+0x64>
    121e:	9e 3f       	cpi	r25, 0xFE	; 254
    1220:	51 05       	cpc	r21, r1
    1222:	80 f0       	brcs	.+32     	; 0x1244 <__mulsf3_pse+0xa0>
    1224:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_inf>
    1228:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_szero>
    122c:	5f 3f       	cpi	r21, 0xFF	; 255
    122e:	e4 f3       	brlt	.-8      	; 0x1228 <__mulsf3_pse+0x84>
    1230:	98 3e       	cpi	r25, 0xE8	; 232
    1232:	d4 f3       	brlt	.-12     	; 0x1228 <__mulsf3_pse+0x84>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b7 95       	ror	r27
    123c:	f7 95       	ror	r31
    123e:	e7 95       	ror	r30
    1240:	9f 5f       	subi	r25, 0xFF	; 255
    1242:	c1 f7       	brne	.-16     	; 0x1234 <__mulsf3_pse+0x90>
    1244:	fe 2b       	or	r31, r30
    1246:	88 0f       	add	r24, r24
    1248:	91 1d       	adc	r25, r1
    124a:	96 95       	lsr	r25
    124c:	87 95       	ror	r24
    124e:	97 f9       	bld	r25, 7
    1250:	08 95       	ret

00001252 <__divmodhi4>:
    1252:	97 fb       	bst	r25, 7
    1254:	07 2e       	mov	r0, r23
    1256:	16 f4       	brtc	.+4      	; 0x125c <__divmodhi4+0xa>
    1258:	00 94       	com	r0
    125a:	07 d0       	rcall	.+14     	; 0x126a <__divmodhi4_neg1>
    125c:	77 fd       	sbrc	r23, 7
    125e:	09 d0       	rcall	.+18     	; 0x1272 <__divmodhi4_neg2>
    1260:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__udivmodhi4>
    1264:	07 fc       	sbrc	r0, 7
    1266:	05 d0       	rcall	.+10     	; 0x1272 <__divmodhi4_neg2>
    1268:	3e f4       	brtc	.+14     	; 0x1278 <__divmodhi4_exit>

0000126a <__divmodhi4_neg1>:
    126a:	90 95       	com	r25
    126c:	81 95       	neg	r24
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	08 95       	ret

00001272 <__divmodhi4_neg2>:
    1272:	70 95       	com	r23
    1274:	61 95       	neg	r22
    1276:	7f 4f       	sbci	r23, 0xFF	; 255

00001278 <__divmodhi4_exit>:
    1278:	08 95       	ret

0000127a <__tablejump2__>:
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	05 90       	lpm	r0, Z+
    1280:	f4 91       	lpm	r31, Z
    1282:	e0 2d       	mov	r30, r0
    1284:	09 94       	ijmp

00001286 <__umulhisi3>:
    1286:	a2 9f       	mul	r26, r18
    1288:	b0 01       	movw	r22, r0
    128a:	b3 9f       	mul	r27, r19
    128c:	c0 01       	movw	r24, r0
    128e:	a3 9f       	mul	r26, r19
    1290:	70 0d       	add	r23, r0
    1292:	81 1d       	adc	r24, r1
    1294:	11 24       	eor	r1, r1
    1296:	91 1d       	adc	r25, r1
    1298:	b2 9f       	mul	r27, r18
    129a:	70 0d       	add	r23, r0
    129c:	81 1d       	adc	r24, r1
    129e:	11 24       	eor	r1, r1
    12a0:	91 1d       	adc	r25, r1
    12a2:	08 95       	ret

000012a4 <__udivmodhi4>:
    12a4:	aa 1b       	sub	r26, r26
    12a6:	bb 1b       	sub	r27, r27
    12a8:	51 e1       	ldi	r21, 0x11	; 17
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <__udivmodhi4_ep>

000012ac <__udivmodhi4_loop>:
    12ac:	aa 1f       	adc	r26, r26
    12ae:	bb 1f       	adc	r27, r27
    12b0:	a6 17       	cp	r26, r22
    12b2:	b7 07       	cpc	r27, r23
    12b4:	10 f0       	brcs	.+4      	; 0x12ba <__udivmodhi4_ep>
    12b6:	a6 1b       	sub	r26, r22
    12b8:	b7 0b       	sbc	r27, r23

000012ba <__udivmodhi4_ep>:
    12ba:	88 1f       	adc	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	5a 95       	dec	r21
    12c0:	a9 f7       	brne	.-22     	; 0x12ac <__udivmodhi4_loop>
    12c2:	80 95       	com	r24
    12c4:	90 95       	com	r25
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	08 95       	ret

000012cc <_exit>:
    12cc:	f8 94       	cli

000012ce <__stop_program>:
    12ce:	ff cf       	rjmp	.-2      	; 0x12ce <__stop_program>
