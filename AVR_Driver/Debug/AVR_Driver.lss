
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000ee  008000ee  00000cb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c97  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbb  00000000  00000000  00003d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dff  00000000  00000000  00004d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aac  00000000  00000000  00006b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001084  00000000  00000000  000075cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002706  00000000  00000000  00008650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000ad56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_1>
   8:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_2>
   c:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_3>
  10:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__vector_4>
  14:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_5>
  18:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_6>
  1c:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_7>
  20:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_8>
  24:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_9>
  28:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__vector_10>
  2c:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3e       	cpi	r26, 0xEE	; 238
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae ee       	ldi	r26, 0xEE	; 238
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 30       	cpi	r26, 0x04	; 4
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  8a:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_WriteCmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	84 fb       	bst	r24, 4
  98:	66 27       	eor	r22, r22
  9a:	60 f9       	bld	r22, 0
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  a2:	c5 fb       	bst	r28, 5
  a4:	66 27       	eor	r22, r22
  a6:	60 f9       	bld	r22, 0
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  ae:	c6 fb       	bst	r28, 6
  b0:	66 27       	eor	r22, r22
  b2:	60 f9       	bld	r22, 0
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  ba:	6c 2f       	mov	r22, r28
  bc:	66 1f       	adc	r22, r22
  be:	66 27       	eor	r22, r22
  c0:	66 1f       	adc	r22, r22
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	89 e0       	ldi	r24, 0x09	; 9
  d4:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WriteCmd+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WriteCmd+0x58>
  ea:	00 00       	nop
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  f4:	6c 2f       	mov	r22, r28
  f6:	61 70       	andi	r22, 0x01	; 1
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
  fe:	c1 fb       	bst	r28, 1
 100:	66 27       	eor	r22, r22
 102:	60 f9       	bld	r22, 0
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 10a:	c2 fb       	bst	r28, 2
 10c:	66 27       	eor	r22, r22
 10e:	60 f9       	bld	r22, 0
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 116:	c3 fb       	bst	r28, 3
 118:	66 27       	eor	r22, r22
 11a:	60 f9       	bld	r22, 0
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 13a:	8f ec       	ldi	r24, 0xCF	; 207
 13c:	97 e0       	ldi	r25, 0x07	; 7
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_WriteCmd+0xac>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_WriteCmd+0xb2>
 144:	00 00       	nop
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	97 e2       	ldi	r25, 0x27	; 39
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_WriteCmd+0xc0>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_WriteCmd+0xc6>
 158:	00 00       	nop
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <LCD_Init>:
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Init+0x4>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Init+0xa>
 168:	00 00       	nop
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 170:	8f ec       	ldi	r24, 0xCF	; 207
 172:	97 e0       	ldi	r25, 0x07	; 7
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Init+0x16>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Init+0x1c>
 17a:	00 00       	nop
 17c:	88 e2       	ldi	r24, 0x28	; 40
 17e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	97 e0       	ldi	r25, 0x07	; 7
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x28>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Init+0x2e>
 18c:	00 00       	nop
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 194:	8f ec       	ldi	r24, 0xCF	; 207
 196:	97 e0       	ldi	r25, 0x07	; 7
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x3a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x40>
 19e:	00 00       	nop
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Init+0x4c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Init+0x52>
 1b0:	00 00       	nop
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1b8:	8f ec       	ldi	r24, 0xCF	; 207
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x5e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0x64>
 1c2:	00 00       	nop
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1ca:	08 95       	ret

000001cc <LCD_WriteData>:
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	84 fb       	bst	r24, 4
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 1dc:	c5 fb       	bst	r28, 5
 1de:	66 27       	eor	r22, r22
 1e0:	60 f9       	bld	r22, 0
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 1e8:	c6 fb       	bst	r28, 6
 1ea:	66 27       	eor	r22, r22
 1ec:	60 f9       	bld	r22, 0
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 1f4:	6c 2f       	mov	r22, r28
 1f6:	66 1f       	adc	r22, r22
 1f8:	66 27       	eor	r22, r22
 1fa:	66 1f       	adc	r22, r22
 1fc:	87 e0       	ldi	r24, 0x07	; 7
 1fe:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_WriteData+0x52>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_WriteData+0x58>
 224:	00 00       	nop
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 22e:	6c 2f       	mov	r22, r28
 230:	61 70       	andi	r22, 0x01	; 1
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 238:	c1 fb       	bst	r28, 1
 23a:	66 27       	eor	r22, r22
 23c:	60 f9       	bld	r22, 0
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 244:	c2 fb       	bst	r28, 2
 246:	66 27       	eor	r22, r22
 248:	60 f9       	bld	r22, 0
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 250:	c3 fb       	bst	r28, 3
 252:	66 27       	eor	r22, r22
 254:	60 f9       	bld	r22, 0
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	89 e0       	ldi	r24, 0x09	; 9
 268:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 274:	8f ec       	ldi	r24, 0xCF	; 207
 276:	97 e0       	ldi	r25, 0x07	; 7
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_WriteData+0xac>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_WriteData+0xb2>
 27e:	00 00       	nop
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_Writepin>
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LCD_GOTO>:
 28c:	88 23       	and	r24, r24
 28e:	29 f0       	breq	.+10     	; 0x29a <LCD_GOTO+0xe>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	31 f0       	breq	.+12     	; 0x2a0 <LCD_GOTO+0x14>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <LCD_GOTO+0x18>
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <LCD_GOTO+0x18>
 2a0:	80 ec       	ldi	r24, 0xC0	; 192
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	60 31       	cpi	r22, 0x10	; 16
 2a6:	10 f4       	brcc	.+4      	; 0x2ac <LCD_GOTO+0x20>
 2a8:	86 0f       	add	r24, r22
 2aa:	91 1d       	adc	r25, r1
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 2b0:	08 95       	ret

000002b2 <LCD_WriteString>:
}

/*----------------  Function used to Write string  --------------------*/

void LCD_WriteString(char *str)
{
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	8c 01       	movw	r16, r24
	uint8_t i;
	for (i=0 ; str[i] ; i++)
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <LCD_WriteString+0x1e>
	{
		LCD_WriteData(str[i]);
 2be:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteData>
 2c2:	8f ec       	ldi	r24, 0xCF	; 207
 2c4:	97 e0       	ldi	r25, 0x07	; 7
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_WriteString+0x14>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_WriteString+0x1a>
 2cc:	00 00       	nop
/*----------------  Function used to Write string  --------------------*/

void LCD_WriteString(char *str)
{
	uint8_t i;
	for (i=0 ; str[i] ; i++)
 2ce:	cf 5f       	subi	r28, 0xFF	; 255
 2d0:	f8 01       	movw	r30, r16
 2d2:	ec 0f       	add	r30, r28
 2d4:	f1 1d       	adc	r31, r1
 2d6:	80 81       	ld	r24, Z
 2d8:	81 11       	cpse	r24, r1
 2da:	f1 cf       	rjmp	.-30     	; 0x2be <LCD_WriteString+0xc>
	{
		LCD_WriteData(str[i]);
		_delay_ms(1);
	}
}
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <main>:


			/*-------------------------- The Main Function ----------------------------*/
			
int main(void)
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	c8 5c       	subi	r28, 0xC8	; 200
 2ee:	d1 09       	sbc	r29, r1
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
	Init_Pins();
 2fa:	0e 94 9a 02 	call	0x534	; 0x534 <Init_Pins>
	LCD_Init();
 2fe:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
	LCD_GOTO(0,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_GOTO>
	LCD_WriteString("UART Test");
 30a:	84 ec       	ldi	r24, 0xC4	; 196
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WriteString>
	uart_init(bits_8,bit_1,Disabled,Asynchronous);
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <uart_init>
	uint8_t str[100]="Ali Reda Elsaid";
 31e:	80 e1       	ldi	r24, 0x10	; 16
 320:	e0 e6       	ldi	r30, 0x60	; 96
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	de 01       	movw	r26, r28
 326:	11 96       	adiw	r26, 0x01	; 1
 328:	01 90       	ld	r0, Z+
 32a:	0d 92       	st	X+, r0
 32c:	8a 95       	dec	r24
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x44>
 330:	fe 01       	movw	r30, r28
 332:	71 96       	adiw	r30, 0x11	; 17
 334:	84 e5       	ldi	r24, 0x54	; 84
 336:	df 01       	movw	r26, r30
 338:	1d 92       	st	X+, r1
 33a:	8a 95       	dec	r24
 33c:	e9 f7       	brne	.-6      	; 0x338 <main+0x54>
	uart_send_string(str);
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	0e 94 6a 05 	call	0xad4	; 0xad4 <uart_send_string>
	uint8_t str1[100];
	while(1)
	{
		uart_recieve_string(str1);
 346:	ce 01       	movw	r24, r28
 348:	8b 59       	subi	r24, 0x9B	; 155
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	0e 94 8a 05 	call	0xb14	; 0xb14 <uart_recieve_string>
		LCD_GOTO(1,0);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_GOTO>
		LCD_WriteString(str);
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WriteString>
 360:	f2 cf       	rjmp	.-28     	; 0x346 <main+0x62>

00000362 <DIO_Initpin>:
		{
			DIO_Initpin(i,status);
		}
		break;
	}
}
 362:	98 2f       	mov	r25, r24
 364:	96 95       	lsr	r25
 366:	96 95       	lsr	r25
 368:	96 95       	lsr	r25
 36a:	87 70       	andi	r24, 0x07	; 7
 36c:	61 30       	cpi	r22, 0x01	; 1
 36e:	31 f0       	breq	.+12     	; 0x37c <DIO_Initpin+0x1a>
 370:	08 f4       	brcc	.+2      	; 0x374 <DIO_Initpin+0x12>
 372:	54 c0       	rjmp	.+168    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 374:	62 30       	cpi	r22, 0x02	; 2
 376:	09 f4       	brne	.+2      	; 0x37a <DIO_Initpin+0x18>
 378:	a1 c0       	rjmp	.+322    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 37a:	08 95       	ret
 37c:	91 30       	cpi	r25, 0x01	; 1
 37e:	c1 f0       	breq	.+48     	; 0x3b0 <DIO_Initpin+0x4e>
 380:	28 f0       	brcs	.+10     	; 0x38c <DIO_Initpin+0x2a>
 382:	92 30       	cpi	r25, 0x02	; 2
 384:	39 f1       	breq	.+78     	; 0x3d4 <DIO_Initpin+0x72>
 386:	93 30       	cpi	r25, 0x03	; 3
 388:	b9 f1       	breq	.+110    	; 0x3f8 <DIO_Initpin+0x96>
 38a:	08 95       	ret
 38c:	4a b3       	in	r20, 0x1a	; 26
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_Initpin+0x38>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_Initpin+0x34>
 39e:	cb 01       	movw	r24, r22
 3a0:	96 2f       	mov	r25, r22
 3a2:	90 95       	com	r25
 3a4:	94 23       	and	r25, r20
 3a6:	9a bb       	out	0x1a, r25	; 26
 3a8:	9b b3       	in	r25, 0x1b	; 27
 3aa:	89 2b       	or	r24, r25
 3ac:	8b bb       	out	0x1b, r24	; 27
 3ae:	08 95       	ret
 3b0:	47 b3       	in	r20, 0x17	; 23
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_Initpin+0x5c>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	8a 95       	dec	r24
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_Initpin+0x58>
 3c2:	cb 01       	movw	r24, r22
 3c4:	96 2f       	mov	r25, r22
 3c6:	90 95       	com	r25
 3c8:	94 23       	and	r25, r20
 3ca:	97 bb       	out	0x17, r25	; 23
 3cc:	98 b3       	in	r25, 0x18	; 24
 3ce:	89 2b       	or	r24, r25
 3d0:	88 bb       	out	0x18, r24	; 24
 3d2:	08 95       	ret
 3d4:	44 b3       	in	r20, 0x14	; 20
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_Initpin+0x80>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_Initpin+0x7c>
 3e6:	cb 01       	movw	r24, r22
 3e8:	96 2f       	mov	r25, r22
 3ea:	90 95       	com	r25
 3ec:	94 23       	and	r25, r20
 3ee:	94 bb       	out	0x14, r25	; 20
 3f0:	95 b3       	in	r25, 0x15	; 21
 3f2:	89 2b       	or	r24, r25
 3f4:	85 bb       	out	0x15, r24	; 21
 3f6:	08 95       	ret
 3f8:	41 b3       	in	r20, 0x11	; 17
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	b9 01       	movw	r22, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	cb 01       	movw	r24, r22
 40c:	96 2f       	mov	r25, r22
 40e:	90 95       	com	r25
 410:	94 23       	and	r25, r20
 412:	91 bb       	out	0x11, r25	; 17
 414:	92 b3       	in	r25, 0x12	; 18
 416:	89 2b       	or	r24, r25
 418:	82 bb       	out	0x12, r24	; 18
 41a:	08 95       	ret
 41c:	91 30       	cpi	r25, 0x01	; 1
 41e:	c1 f0       	breq	.+48     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 420:	28 f0       	brcs	.+10     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 422:	92 30       	cpi	r25, 0x02	; 2
 424:	39 f1       	breq	.+78     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 426:	93 30       	cpi	r25, 0x03	; 3
 428:	b9 f1       	breq	.+110    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 42a:	08 95       	ret
 42c:	4a b3       	in	r20, 0x1a	; 26
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	cb 01       	movw	r24, r22
 440:	80 95       	com	r24
 442:	94 2f       	mov	r25, r20
 444:	98 23       	and	r25, r24
 446:	9a bb       	out	0x1a, r25	; 26
 448:	9b b3       	in	r25, 0x1b	; 27
 44a:	89 23       	and	r24, r25
 44c:	8b bb       	out	0x1b, r24	; 27
 44e:	08 95       	ret
 450:	47 b3       	in	r20, 0x17	; 23
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	8a 95       	dec	r24
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	cb 01       	movw	r24, r22
 464:	80 95       	com	r24
 466:	94 2f       	mov	r25, r20
 468:	98 23       	and	r25, r24
 46a:	97 bb       	out	0x17, r25	; 23
 46c:	98 b3       	in	r25, 0x18	; 24
 46e:	89 23       	and	r24, r25
 470:	88 bb       	out	0x18, r24	; 24
 472:	08 95       	ret
 474:	44 b3       	in	r20, 0x14	; 20
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	8a 95       	dec	r24
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	cb 01       	movw	r24, r22
 488:	80 95       	com	r24
 48a:	94 2f       	mov	r25, r20
 48c:	98 23       	and	r25, r24
 48e:	94 bb       	out	0x14, r25	; 20
 490:	95 b3       	in	r25, 0x15	; 21
 492:	89 23       	and	r24, r25
 494:	85 bb       	out	0x15, r24	; 21
 496:	08 95       	ret
 498:	41 b3       	in	r20, 0x11	; 17
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	b9 01       	movw	r22, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	8a 95       	dec	r24
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	cb 01       	movw	r24, r22
 4ac:	80 95       	com	r24
 4ae:	94 2f       	mov	r25, r20
 4b0:	98 23       	and	r25, r24
 4b2:	91 bb       	out	0x11, r25	; 17
 4b4:	92 b3       	in	r25, 0x12	; 18
 4b6:	89 23       	and	r24, r25
 4b8:	82 bb       	out	0x12, r24	; 18
 4ba:	08 95       	ret
 4bc:	91 30       	cpi	r25, 0x01	; 1
 4be:	99 f0       	breq	.+38     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4c0:	28 f0       	brcs	.+10     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c2:	92 30       	cpi	r25, 0x02	; 2
 4c4:	e9 f0       	breq	.+58     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4c6:	93 30       	cpi	r25, 0x03	; 3
 4c8:	41 f1       	breq	.+80     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 4ca:	08 95       	ret
 4cc:	4a b3       	in	r20, 0x1a	; 26
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	8a bb       	out	0x1a, r24	; 26
 4e4:	08 95       	ret
 4e6:	47 b3       	in	r20, 0x17	; 23
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	b9 01       	movw	r22, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	8a 95       	dec	r24
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4f8:	cb 01       	movw	r24, r22
 4fa:	84 2b       	or	r24, r20
 4fc:	87 bb       	out	0x17, r24	; 23
 4fe:	08 95       	ret
 500:	44 b3       	in	r20, 0x14	; 20
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	b9 01       	movw	r22, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 512:	cb 01       	movw	r24, r22
 514:	84 2b       	or	r24, r20
 516:	84 bb       	out	0x14, r24	; 20
 518:	08 95       	ret
 51a:	41 b3       	in	r20, 0x11	; 17
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 52c:	cb 01       	movw	r24, r22
 52e:	84 2b       	or	r24, r20
 530:	81 bb       	out	0x11, r24	; 17
 532:	08 95       	ret

00000534 <Init_Pins>:
 534:	cf 93       	push	r28
 536:	c0 e0       	ldi	r28, 0x00	; 0
 538:	09 c0       	rjmp	.+18     	; 0x54c <Init_Pins+0x18>
 53a:	ec 2f       	mov	r30, r28
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	e2 53       	subi	r30, 0x32	; 50
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	60 81       	ld	r22, Z
 544:	8c 2f       	mov	r24, r28
 546:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_Initpin>
 54a:	cf 5f       	subi	r28, 0xFF	; 255
 54c:	c0 32       	cpi	r28, 0x20	; 32
 54e:	a8 f3       	brcs	.-22     	; 0x53a <Init_Pins+0x6>
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
 554:	98 2f       	mov	r25, r24
 556:	96 95       	lsr	r25
 558:	96 95       	lsr	r25
 55a:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
 55c:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
 55e:	61 30       	cpi	r22, 0x01	; 1
 560:	e1 f5       	brne	.+120    	; 0x5da <DIO_Writepin+0x86>
		
		switch(port){
 562:	91 30       	cpi	r25, 0x01	; 1
 564:	99 f0       	breq	.+38     	; 0x58c <DIO_Writepin+0x38>
 566:	28 f0       	brcs	.+10     	; 0x572 <DIO_Writepin+0x1e>
 568:	92 30       	cpi	r25, 0x02	; 2
 56a:	e9 f0       	breq	.+58     	; 0x5a6 <DIO_Writepin+0x52>
 56c:	93 30       	cpi	r25, 0x03	; 3
 56e:	41 f1       	breq	.+80     	; 0x5c0 <DIO_Writepin+0x6c>
 570:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
 572:	4b b3       	in	r20, 0x1b	; 27
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	b9 01       	movw	r22, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_Writepin+0x2c>
 57c:	66 0f       	add	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	8a 95       	dec	r24
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_Writepin+0x28>
 584:	cb 01       	movw	r24, r22
 586:	84 2b       	or	r24, r20
 588:	8b bb       	out	0x1b, r24	; 27
			break;
 58a:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
 58c:	48 b3       	in	r20, 0x18	; 24
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	b9 01       	movw	r22, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_Writepin+0x46>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_Writepin+0x42>
 59e:	cb 01       	movw	r24, r22
 5a0:	84 2b       	or	r24, r20
 5a2:	88 bb       	out	0x18, r24	; 24
			break;
 5a4:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
 5a6:	45 b3       	in	r20, 0x15	; 21
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	b9 01       	movw	r22, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_Writepin+0x60>
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_Writepin+0x5c>
 5b8:	cb 01       	movw	r24, r22
 5ba:	84 2b       	or	r24, r20
 5bc:	85 bb       	out	0x15, r24	; 21
			break;
 5be:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
 5c0:	42 b3       	in	r20, 0x12	; 18
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	b9 01       	movw	r22, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_Writepin+0x7a>
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_Writepin+0x76>
 5d2:	cb 01       	movw	r24, r22
 5d4:	84 2b       	or	r24, r20
 5d6:	82 bb       	out	0x12, r24	; 18
			break;
 5d8:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
 5da:	61 11       	cpse	r22, r1
 5dc:	3f c0       	rjmp	.+126    	; 0x65c <DIO_Writepin+0x108>
		switch(port){
 5de:	91 30       	cpi	r25, 0x01	; 1
 5e0:	a1 f0       	breq	.+40     	; 0x60a <DIO_Writepin+0xb6>
 5e2:	28 f0       	brcs	.+10     	; 0x5ee <DIO_Writepin+0x9a>
 5e4:	92 30       	cpi	r25, 0x02	; 2
 5e6:	f9 f0       	breq	.+62     	; 0x626 <DIO_Writepin+0xd2>
 5e8:	93 30       	cpi	r25, 0x03	; 3
 5ea:	59 f1       	breq	.+86     	; 0x642 <DIO_Writepin+0xee>
 5ec:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
 5ee:	4b b3       	in	r20, 0x1b	; 27
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	b9 01       	movw	r22, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_Writepin+0xa8>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_Writepin+0xa4>
 600:	cb 01       	movw	r24, r22
 602:	80 95       	com	r24
 604:	84 23       	and	r24, r20
 606:	8b bb       	out	0x1b, r24	; 27
			break;
 608:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 60a:	48 b3       	in	r20, 0x18	; 24
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	b9 01       	movw	r22, r18
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_Writepin+0xc4>
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	8a 95       	dec	r24
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_Writepin+0xc0>
 61c:	cb 01       	movw	r24, r22
 61e:	80 95       	com	r24
 620:	84 23       	and	r24, r20
 622:	88 bb       	out	0x18, r24	; 24
			break;
 624:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 626:	45 b3       	in	r20, 0x15	; 21
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	b9 01       	movw	r22, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_Writepin+0xe0>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_Writepin+0xdc>
 638:	cb 01       	movw	r24, r22
 63a:	80 95       	com	r24
 63c:	84 23       	and	r24, r20
 63e:	85 bb       	out	0x15, r24	; 21
			break;
 640:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 642:	42 b3       	in	r20, 0x12	; 18
 644:	21 e0       	ldi	r18, 0x01	; 1
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	b9 01       	movw	r22, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_Writepin+0xfc>
 64c:	66 0f       	add	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	8a 95       	dec	r24
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_Writepin+0xf8>
 654:	cb 01       	movw	r24, r22
 656:	80 95       	com	r24
 658:	84 23       	and	r24, r20
 65a:	82 bb       	out	0x12, r24	; 18
 65c:	08 95       	ret

0000065e <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	2f 93       	push	r18
 66a:	3f 93       	push	r19
 66c:	4f 93       	push	r20
 66e:	5f 93       	push	r21
 670:	6f 93       	push	r22
 672:	7f 93       	push	r23
 674:	8f 93       	push	r24
 676:	9f 93       	push	r25
 678:	af 93       	push	r26
 67a:	bf 93       	push	r27
 67c:	ef 93       	push	r30
 67e:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
 680:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <Fptr_EXI0>
 684:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <Fptr_EXI0+0x1>
 688:	30 97       	sbiw	r30, 0x00	; 0
 68a:	09 f0       	breq	.+2      	; 0x68e <__vector_1+0x30>
		Fptr_EXI0();
 68c:	09 95       	icall
	}
}
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__vector_2>:

/*-------------  (ISR of EXI1) ----------------*/

ISR(INT1_vect){
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
 6d2:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <Fptr_EXI1>
 6d6:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <Fptr_EXI1+0x1>
 6da:	30 97       	sbiw	r30, 0x00	; 0
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_2+0x30>
		Fptr_EXI1();
 6de:	09 95       	icall
	}
}
 6e0:	ff 91       	pop	r31
 6e2:	ef 91       	pop	r30
 6e4:	bf 91       	pop	r27
 6e6:	af 91       	pop	r26
 6e8:	9f 91       	pop	r25
 6ea:	8f 91       	pop	r24
 6ec:	7f 91       	pop	r23
 6ee:	6f 91       	pop	r22
 6f0:	5f 91       	pop	r21
 6f2:	4f 91       	pop	r20
 6f4:	3f 91       	pop	r19
 6f6:	2f 91       	pop	r18
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <__vector_3>:

/*-------------  (ISR of EXI2) ----------------*/

ISR(INT2_vect){
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	2f 93       	push	r18
 70e:	3f 93       	push	r19
 710:	4f 93       	push	r20
 712:	5f 93       	push	r21
 714:	6f 93       	push	r22
 716:	7f 93       	push	r23
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
 71c:	af 93       	push	r26
 71e:	bf 93       	push	r27
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31
	
	if(Fptr_EXI2!=NULL_ptr){
 724:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <__data_end>
 728:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <__data_end+0x1>
 72c:	30 97       	sbiw	r30, 0x00	; 0
 72e:	09 f0       	breq	.+2      	; 0x732 <__vector_3+0x30>
		Fptr_EXI2();
 730:	09 95       	icall
	}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <__vector_11>:
}
			/********************************* Timer 0 ISR functions ******************************/


	ISR(TIMER0_OVF_vect)
	{
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
		if(Timer0_OVF_Fptr!=NULLptr)
 776:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <Timer0_OVF_Fptr>
 77a:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <Timer0_OVF_Fptr+0x1>
 77e:	30 97       	sbiw	r30, 0x00	; 0
 780:	09 f0       	breq	.+2      	; 0x784 <__vector_11+0x30>
		{
			Timer0_OVF_Fptr();
 782:	09 95       	icall
		}
	}
 784:	ff 91       	pop	r31
 786:	ef 91       	pop	r30
 788:	bf 91       	pop	r27
 78a:	af 91       	pop	r26
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	7f 91       	pop	r23
 792:	6f 91       	pop	r22
 794:	5f 91       	pop	r21
 796:	4f 91       	pop	r20
 798:	3f 91       	pop	r19
 79a:	2f 91       	pop	r18
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <__vector_10>:

	ISR(TIMER0_COMP_vect){
 7a6:	1f 92       	push	r1
 7a8:	0f 92       	push	r0
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	0f 92       	push	r0
 7ae:	11 24       	eor	r1, r1
 7b0:	2f 93       	push	r18
 7b2:	3f 93       	push	r19
 7b4:	4f 93       	push	r20
 7b6:	5f 93       	push	r21
 7b8:	6f 93       	push	r22
 7ba:	7f 93       	push	r23
 7bc:	8f 93       	push	r24
 7be:	9f 93       	push	r25
 7c0:	af 93       	push	r26
 7c2:	bf 93       	push	r27
 7c4:	ef 93       	push	r30
 7c6:	ff 93       	push	r31
		Timer0_OC0_Fptr();
 7c8:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <Timer0_OC0_Fptr>
 7cc:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <Timer0_OC0_Fptr+0x1>
 7d0:	09 95       	icall
	}
 7d2:	ff 91       	pop	r31
 7d4:	ef 91       	pop	r30
 7d6:	bf 91       	pop	r27
 7d8:	af 91       	pop	r26
 7da:	9f 91       	pop	r25
 7dc:	8f 91       	pop	r24
 7de:	7f 91       	pop	r23
 7e0:	6f 91       	pop	r22
 7e2:	5f 91       	pop	r21
 7e4:	4f 91       	pop	r20
 7e6:	3f 91       	pop	r19
 7e8:	2f 91       	pop	r18
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER1_OVF_vect)
{
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	11 24       	eor	r1, r1
 7fe:	2f 93       	push	r18
 800:	3f 93       	push	r19
 802:	4f 93       	push	r20
 804:	5f 93       	push	r21
 806:	6f 93       	push	r22
 808:	7f 93       	push	r23
 80a:	8f 93       	push	r24
 80c:	9f 93       	push	r25
 80e:	af 93       	push	r26
 810:	bf 93       	push	r27
 812:	ef 93       	push	r30
 814:	ff 93       	push	r31
	Timer1_OVF_Fptr();
 816:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <Timer1_OVF_Fptr>
 81a:	f0 91 ff 00 	lds	r31, 0x00FF	; 0x8000ff <Timer1_OVF_Fptr+0x1>
 81e:	09 95       	icall
}
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	bf 91       	pop	r27
 826:	af 91       	pop	r26
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	7f 91       	pop	r23
 82e:	6f 91       	pop	r22
 830:	5f 91       	pop	r21
 832:	4f 91       	pop	r20
 834:	3f 91       	pop	r19
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
	Timer1_OCA_Fptr();
 864:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <Timer1_OCA_Fptr>
 868:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <Timer1_OCA_Fptr+0x1>
 86c:	09 95       	icall
}
 86e:	ff 91       	pop	r31
 870:	ef 91       	pop	r30
 872:	bf 91       	pop	r27
 874:	af 91       	pop	r26
 876:	9f 91       	pop	r25
 878:	8f 91       	pop	r24
 87a:	7f 91       	pop	r23
 87c:	6f 91       	pop	r22
 87e:	5f 91       	pop	r21
 880:	4f 91       	pop	r20
 882:	3f 91       	pop	r19
 884:	2f 91       	pop	r18
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

00000890 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	2f 93       	push	r18
 89c:	3f 93       	push	r19
 89e:	4f 93       	push	r20
 8a0:	5f 93       	push	r21
 8a2:	6f 93       	push	r22
 8a4:	7f 93       	push	r23
 8a6:	8f 93       	push	r24
 8a8:	9f 93       	push	r25
 8aa:	af 93       	push	r26
 8ac:	bf 93       	push	r27
 8ae:	ef 93       	push	r30
 8b0:	ff 93       	push	r31
	Timer1_OCB_Fptr();
 8b2:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <Timer1_OCB_Fptr>
 8b6:	f0 91 fb 00 	lds	r31, 0x00FB	; 0x8000fb <Timer1_OCB_Fptr+0x1>
 8ba:	09 95       	icall
}
 8bc:	ff 91       	pop	r31
 8be:	ef 91       	pop	r30
 8c0:	bf 91       	pop	r27
 8c2:	af 91       	pop	r26
 8c4:	9f 91       	pop	r25
 8c6:	8f 91       	pop	r24
 8c8:	7f 91       	pop	r23
 8ca:	6f 91       	pop	r22
 8cc:	5f 91       	pop	r21
 8ce:	4f 91       	pop	r20
 8d0:	3f 91       	pop	r19
 8d2:	2f 91       	pop	r18
 8d4:	0f 90       	pop	r0
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	0f 90       	pop	r0
 8da:	1f 90       	pop	r1
 8dc:	18 95       	reti

000008de <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
 8de:	1f 92       	push	r1
 8e0:	0f 92       	push	r0
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	0f 92       	push	r0
 8e6:	11 24       	eor	r1, r1
 8e8:	2f 93       	push	r18
 8ea:	3f 93       	push	r19
 8ec:	4f 93       	push	r20
 8ee:	5f 93       	push	r21
 8f0:	6f 93       	push	r22
 8f2:	7f 93       	push	r23
 8f4:	8f 93       	push	r24
 8f6:	9f 93       	push	r25
 8f8:	af 93       	push	r26
 8fa:	bf 93       	push	r27
 8fc:	ef 93       	push	r30
 8fe:	ff 93       	push	r31
	Timer1_ICU_Fptr();
 900:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <Timer1_ICU_Fptr>
 904:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <Timer1_ICU_Fptr+0x1>
 908:	09 95       	icall
}
 90a:	ff 91       	pop	r31
 90c:	ef 91       	pop	r30
 90e:	bf 91       	pop	r27
 910:	af 91       	pop	r26
 912:	9f 91       	pop	r25
 914:	8f 91       	pop	r24
 916:	7f 91       	pop	r23
 918:	6f 91       	pop	r22
 91a:	5f 91       	pop	r21
 91c:	4f 91       	pop	r20
 91e:	3f 91       	pop	r19
 920:	2f 91       	pop	r18
 922:	0f 90       	pop	r0
 924:	0f be       	out	0x3f, r0	; 63
 926:	0f 90       	pop	r0
 928:	1f 90       	pop	r1
 92a:	18 95       	reti

0000092c <__vector_5>:
	}

	/********************************* Timer 2 ISR functions ******************************/

	ISR(TIMER2_OVF_vect)
	{
 92c:	1f 92       	push	r1
 92e:	0f 92       	push	r0
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	0f 92       	push	r0
 934:	11 24       	eor	r1, r1
 936:	2f 93       	push	r18
 938:	3f 93       	push	r19
 93a:	4f 93       	push	r20
 93c:	5f 93       	push	r21
 93e:	6f 93       	push	r22
 940:	7f 93       	push	r23
 942:	8f 93       	push	r24
 944:	9f 93       	push	r25
 946:	af 93       	push	r26
 948:	bf 93       	push	r27
 94a:	ef 93       	push	r30
 94c:	ff 93       	push	r31
		if(Timer2_OVF_Fptr!=NULLptr)
 94e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <Timer2_OVF_Fptr>
 952:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <Timer2_OVF_Fptr+0x1>
 956:	30 97       	sbiw	r30, 0x00	; 0
 958:	09 f0       	breq	.+2      	; 0x95c <__vector_5+0x30>
		{
			Timer2_OVF_Fptr();
 95a:	09 95       	icall
		}
	}
 95c:	ff 91       	pop	r31
 95e:	ef 91       	pop	r30
 960:	bf 91       	pop	r27
 962:	af 91       	pop	r26
 964:	9f 91       	pop	r25
 966:	8f 91       	pop	r24
 968:	7f 91       	pop	r23
 96a:	6f 91       	pop	r22
 96c:	5f 91       	pop	r21
 96e:	4f 91       	pop	r20
 970:	3f 91       	pop	r19
 972:	2f 91       	pop	r18
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <__vector_4>:

	ISR(TIMER2_COMP_vect){
 97e:	1f 92       	push	r1
 980:	0f 92       	push	r0
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	0f 92       	push	r0
 986:	11 24       	eor	r1, r1
 988:	2f 93       	push	r18
 98a:	3f 93       	push	r19
 98c:	4f 93       	push	r20
 98e:	5f 93       	push	r21
 990:	6f 93       	push	r22
 992:	7f 93       	push	r23
 994:	8f 93       	push	r24
 996:	9f 93       	push	r25
 998:	af 93       	push	r26
 99a:	bf 93       	push	r27
 99c:	ef 93       	push	r30
 99e:	ff 93       	push	r31
		Timer2_OC2_Fptr();
 9a0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Timer2_OC2_Fptr>
 9a4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <Timer2_OC2_Fptr+0x1>
 9a8:	09 95       	icall
	}
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	bf 91       	pop	r27
 9b0:	af 91       	pop	r26
 9b2:	9f 91       	pop	r25
 9b4:	8f 91       	pop	r24
 9b6:	7f 91       	pop	r23
 9b8:	6f 91       	pop	r22
 9ba:	5f 91       	pop	r21
 9bc:	4f 91       	pop	r20
 9be:	3f 91       	pop	r19
 9c0:	2f 91       	pop	r18
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <uart_init>:
#include "../Utils.h"

void uart_init(Character_Size s, Stop_Bits x, Parity_Mode m, Mode y)
{
	// The frame format
	switch(s)
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	f9 f0       	breq	.+62     	; 0xa0e <uart_init+0x42>
 9d0:	28 f4       	brcc	.+10     	; 0x9dc <uart_init+0x10>
 9d2:	88 23       	and	r24, r24
 9d4:	41 f0       	breq	.+16     	; 0x9e6 <uart_init+0x1a>
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	81 f0       	breq	.+32     	; 0x9fa <uart_init+0x2e>
 9da:	36 c0       	rjmp	.+108    	; 0xa48 <uart_init+0x7c>
 9dc:	83 30       	cpi	r24, 0x03	; 3
 9de:	09 f1       	breq	.+66     	; 0xa22 <uart_init+0x56>
 9e0:	84 30       	cpi	r24, 0x04	; 4
 9e2:	49 f1       	breq	.+82     	; 0xa36 <uart_init+0x6a>
 9e4:	31 c0       	rjmp	.+98     	; 0xa48 <uart_init+0x7c>
	{
		case bits_5:
		CLEAR_BIT(UCSRC,UCSZ0);
 9e6:	80 b5       	in	r24, 0x20	; 32
 9e8:	8d 7f       	andi	r24, 0xFD	; 253
 9ea:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRC,UCSZ1);
 9ec:	80 b5       	in	r24, 0x20	; 32
 9ee:	8b 7f       	andi	r24, 0xFB	; 251
 9f0:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRB,UCSZ2);
 9f2:	8a b1       	in	r24, 0x0a	; 10
 9f4:	8b 7f       	andi	r24, 0xFB	; 251
 9f6:	8a b9       	out	0x0a, r24	; 10
		break;
 9f8:	27 c0       	rjmp	.+78     	; 0xa48 <uart_init+0x7c>
		case bits_6:
		SET_BIT(UCSRC,UCSZ0);
 9fa:	80 b5       	in	r24, 0x20	; 32
 9fc:	82 60       	ori	r24, 0x02	; 2
 9fe:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRC,UCSZ1);
 a00:	80 b5       	in	r24, 0x20	; 32
 a02:	8b 7f       	andi	r24, 0xFB	; 251
 a04:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRB,UCSZ2);
 a06:	8a b1       	in	r24, 0x0a	; 10
 a08:	8b 7f       	andi	r24, 0xFB	; 251
 a0a:	8a b9       	out	0x0a, r24	; 10
		break;
 a0c:	1d c0       	rjmp	.+58     	; 0xa48 <uart_init+0x7c>
		case bits_7:
		CLEAR_BIT(UCSRC,UCSZ0);
 a0e:	80 b5       	in	r24, 0x20	; 32
 a10:	8d 7f       	andi	r24, 0xFD	; 253
 a12:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
 a14:	80 b5       	in	r24, 0x20	; 32
 a16:	84 60       	ori	r24, 0x04	; 4
 a18:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRB,UCSZ2);
 a1a:	8a b1       	in	r24, 0x0a	; 10
 a1c:	8b 7f       	andi	r24, 0xFB	; 251
 a1e:	8a b9       	out	0x0a, r24	; 10
		break;
 a20:	13 c0       	rjmp	.+38     	; 0xa48 <uart_init+0x7c>
		case bits_8:
		SET_BIT(UCSRC,UCSZ0);
 a22:	80 b5       	in	r24, 0x20	; 32
 a24:	82 60       	ori	r24, 0x02	; 2
 a26:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
 a28:	80 b5       	in	r24, 0x20	; 32
 a2a:	84 60       	ori	r24, 0x04	; 4
 a2c:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRB,UCSZ2);
 a2e:	8a b1       	in	r24, 0x0a	; 10
 a30:	8b 7f       	andi	r24, 0xFB	; 251
 a32:	8a b9       	out	0x0a, r24	; 10
		break;
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <uart_init+0x7c>
		case bits_9:
		SET_BIT(UCSRC,UCSZ0);
 a36:	80 b5       	in	r24, 0x20	; 32
 a38:	82 60       	ori	r24, 0x02	; 2
 a3a:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
 a3c:	80 b5       	in	r24, 0x20	; 32
 a3e:	84 60       	ori	r24, 0x04	; 4
 a40:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRB,UCSZ2);
 a42:	8a b1       	in	r24, 0x0a	; 10
 a44:	84 60       	ori	r24, 0x04	; 4
 a46:	8a b9       	out	0x0a, r24	; 10
		break;
	}
	// Stop Bit Select
	switch (x)
 a48:	66 23       	and	r22, r22
 a4a:	19 f0       	breq	.+6      	; 0xa52 <uart_init+0x86>
 a4c:	61 30       	cpi	r22, 0x01	; 1
 a4e:	29 f0       	breq	.+10     	; 0xa5a <uart_init+0x8e>
 a50:	07 c0       	rjmp	.+14     	; 0xa60 <uart_init+0x94>
	{
		case bit_1:
		CLEAR_BIT(UCSRC,USBS);
 a52:	80 b5       	in	r24, 0x20	; 32
 a54:	87 7f       	andi	r24, 0xF7	; 247
 a56:	80 bd       	out	0x20, r24	; 32
		break;
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <uart_init+0x94>
		case bit_2:
		SET_BIT(UCSRC,USBS);
 a5a:	80 b5       	in	r24, 0x20	; 32
 a5c:	88 60       	ori	r24, 0x08	; 8
 a5e:	80 bd       	out	0x20, r24	; 32
		break;
	}
	// Parity Mode
	switch (m)
 a60:	41 30       	cpi	r20, 0x01	; 1
 a62:	59 f0       	breq	.+22     	; 0xa7a <uart_init+0xae>
 a64:	18 f0       	brcs	.+6      	; 0xa6c <uart_init+0xa0>
 a66:	42 30       	cpi	r20, 0x02	; 2
 a68:	79 f0       	breq	.+30     	; 0xa88 <uart_init+0xbc>
 a6a:	14 c0       	rjmp	.+40     	; 0xa94 <uart_init+0xc8>
	{
		case Disabled:
		CLEAR_BIT(UCSRC,UPM0);
 a6c:	80 b5       	in	r24, 0x20	; 32
 a6e:	8f 7e       	andi	r24, 0xEF	; 239
 a70:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRC,UPM1);
 a72:	80 b5       	in	r24, 0x20	; 32
 a74:	8f 7d       	andi	r24, 0xDF	; 223
 a76:	80 bd       	out	0x20, r24	; 32
		break;
 a78:	0d c0       	rjmp	.+26     	; 0xa94 <uart_init+0xc8>
		case Even_Parity:
		CLEAR_BIT(UCSRC,UPM0);
 a7a:	80 b5       	in	r24, 0x20	; 32
 a7c:	8f 7e       	andi	r24, 0xEF	; 239
 a7e:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UPM1);
 a80:	80 b5       	in	r24, 0x20	; 32
 a82:	80 62       	ori	r24, 0x20	; 32
 a84:	80 bd       	out	0x20, r24	; 32
		break;
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <uart_init+0xc8>
		case Odd_Parity:
		SET_BIT(UCSRC,UPM0);
 a88:	80 b5       	in	r24, 0x20	; 32
 a8a:	80 61       	ori	r24, 0x10	; 16
 a8c:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UPM1);
 a8e:	80 b5       	in	r24, 0x20	; 32
 a90:	80 62       	ori	r24, 0x20	; 32
 a92:	80 bd       	out	0x20, r24	; 32
		break;
	}
	// Mode
	switch (y)
 a94:	22 23       	and	r18, r18
 a96:	19 f0       	breq	.+6      	; 0xa9e <uart_init+0xd2>
 a98:	21 30       	cpi	r18, 0x01	; 1
 a9a:	41 f0       	breq	.+16     	; 0xaac <uart_init+0xe0>
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <uart_init+0xe6>
	{
		case Asynchronous:
		CLEAR_BIT(UCSRC,UMSEL);
 a9e:	80 b5       	in	r24, 0x20	; 32
 aa0:	8f 7b       	andi	r24, 0xBF	; 191
 aa2:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRA,U2X);
 aa4:	8b b1       	in	r24, 0x0b	; 11
 aa6:	8d 7f       	andi	r24, 0xFD	; 253
 aa8:	8b b9       	out	0x0b, r24	; 11
		break;
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <uart_init+0xe6>
		case synchronous:
		SET_BIT(UCSRC,UMSEL);
 aac:	80 b5       	in	r24, 0x20	; 32
 aae:	80 64       	ori	r24, 0x40	; 64
 ab0:	80 bd       	out	0x20, r24	; 32
		break;
	}
	//  Baud Rate = 9600
	UBRRL=51;
 ab2:	83 e3       	ldi	r24, 0x33	; 51
 ab4:	89 b9       	out	0x09, r24	; 9
	// Receiver Enable
	SET_BIT(UCSRB,RXEN);
 ab6:	8a b1       	in	r24, 0x0a	; 10
 ab8:	80 61       	ori	r24, 0x10	; 16
 aba:	8a b9       	out	0x0a, r24	; 10
	//  Transmitter Enable
	SET_BIT(UCSRB,TXEN);
 abc:	8a b1       	in	r24, 0x0a	; 10
 abe:	88 60       	ori	r24, 0x08	; 8
 ac0:	8a b9       	out	0x0a, r24	; 10
 ac2:	08 95       	ret

00000ac4 <uart_send>:
}

void uart_send(uint8_t data)
{
	// check if the buffer is empty 
	while(!READ_BIT(UCSRA,UDRE));
 ac4:	5d 9b       	sbis	0x0b, 5	; 11
 ac6:	fe cf       	rjmp	.-4      	; 0xac4 <uart_send>
	UDR=data;
 ac8:	8c b9       	out	0x0c, r24	; 12
 aca:	08 95       	ret

00000acc <uart_recieve>:
}

uint8_t uart_recieve()
{
	// check when the receive buffer is empty
	while(!READ_BIT(UCSRA,RXC));
 acc:	5f 9b       	sbis	0x0b, 7	; 11
 ace:	fe cf       	rjmp	.-4      	; 0xacc <uart_recieve>
	return UDR;
 ad0:	8c b1       	in	r24, 0x0c	; 12
}
 ad2:	08 95       	ret

00000ad4 <uart_send_string>:
	}
	return y;
}

void uart_send_string(uint32_t *str)
{
 ad4:	0f 93       	push	r16
 ad6:	1f 93       	push	r17
 ad8:	cf 93       	push	r28
 ada:	8c 01       	movw	r16, r24
	for (uint8_t i=0; str[i]; i++)
 adc:	c0 e0       	ldi	r28, 0x00	; 0
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <uart_send_string+0x12>
	{
		uart_send(str[i]);
 ae0:	0e 94 62 05 	call	0xac4	; 0xac4 <uart_send>
	return y;
}

void uart_send_string(uint32_t *str)
{
	for (uint8_t i=0; str[i]; i++)
 ae4:	cf 5f       	subi	r28, 0xFF	; 255
 ae6:	ec 2f       	mov	r30, r28
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	ee 0f       	add	r30, r30
 aec:	ff 1f       	adc	r31, r31
 aee:	ee 0f       	add	r30, r30
 af0:	ff 1f       	adc	r31, r31
 af2:	e0 0f       	add	r30, r16
 af4:	f1 1f       	adc	r31, r17
 af6:	80 81       	ld	r24, Z
 af8:	91 81       	ldd	r25, Z+1	; 0x01
 afa:	a2 81       	ldd	r26, Z+2	; 0x02
 afc:	b3 81       	ldd	r27, Z+3	; 0x03
 afe:	00 97       	sbiw	r24, 0x00	; 0
 b00:	a1 05       	cpc	r26, r1
 b02:	b1 05       	cpc	r27, r1
 b04:	69 f7       	brne	.-38     	; 0xae0 <uart_send_string+0xc>
	{
		uart_send(str[i]);
	}
	uart_send('#');
 b06:	83 e2       	ldi	r24, 0x23	; 35
 b08:	0e 94 62 05 	call	0xac4	; 0xac4 <uart_send>
}
 b0c:	cf 91       	pop	r28
 b0e:	1f 91       	pop	r17
 b10:	0f 91       	pop	r16
 b12:	08 95       	ret

00000b14 <uart_recieve_string>:

void uart_recieve_string(uint32_t *str)
{
 b14:	ef 92       	push	r14
 b16:	ff 92       	push	r15
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	7c 01       	movw	r14, r24
	uint8_t i=0;
	str[i]=uart_recieve();
 b20:	0e 94 66 05 	call	0xacc	; 0xacc <uart_recieve>
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	a0 e0       	ldi	r26, 0x00	; 0
 b28:	b0 e0       	ldi	r27, 0x00	; 0
 b2a:	f7 01       	movw	r30, r14
 b2c:	80 83       	st	Z, r24
 b2e:	91 83       	std	Z+1, r25	; 0x01
 b30:	a2 83       	std	Z+2, r26	; 0x02
 b32:	b3 83       	std	Z+3, r27	; 0x03
	uart_send('#');
}

void uart_recieve_string(uint32_t *str)
{
	uint8_t i=0;
 b34:	10 e0       	ldi	r17, 0x00	; 0
	str[i]=uart_recieve();
	while(str[i]!='#')
 b36:	12 c0       	rjmp	.+36     	; 0xb5c <uart_recieve_string+0x48>
	{
		i++;
 b38:	1f 5f       	subi	r17, 0xFF	; 255
		str[i]=uart_recieve();
 b3a:	c1 2f       	mov	r28, r17
 b3c:	d0 e0       	ldi	r29, 0x00	; 0
 b3e:	cc 0f       	add	r28, r28
 b40:	dd 1f       	adc	r29, r29
 b42:	cc 0f       	add	r28, r28
 b44:	dd 1f       	adc	r29, r29
 b46:	ce 0d       	add	r28, r14
 b48:	df 1d       	adc	r29, r15
 b4a:	0e 94 66 05 	call	0xacc	; 0xacc <uart_recieve>
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	a0 e0       	ldi	r26, 0x00	; 0
 b52:	b0 e0       	ldi	r27, 0x00	; 0
 b54:	88 83       	st	Y, r24
 b56:	99 83       	std	Y+1, r25	; 0x01
 b58:	aa 83       	std	Y+2, r26	; 0x02
 b5a:	bb 83       	std	Y+3, r27	; 0x03

void uart_recieve_string(uint32_t *str)
{
	uint8_t i=0;
	str[i]=uart_recieve();
	while(str[i]!='#')
 b5c:	e1 2f       	mov	r30, r17
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	ee 0f       	add	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	ee 0f       	add	r30, r30
 b66:	ff 1f       	adc	r31, r31
 b68:	ee 0d       	add	r30, r14
 b6a:	ff 1d       	adc	r31, r15
 b6c:	80 81       	ld	r24, Z
 b6e:	91 81       	ldd	r25, Z+1	; 0x01
 b70:	a2 81       	ldd	r26, Z+2	; 0x02
 b72:	b3 81       	ldd	r27, Z+3	; 0x03
 b74:	83 97       	sbiw	r24, 0x23	; 35
 b76:	a1 05       	cpc	r26, r1
 b78:	b1 05       	cpc	r27, r1
 b7a:	f1 f6       	brne	.-68     	; 0xb38 <uart_recieve_string+0x24>
	{
		i++;
		str[i]=uart_recieve();
	}
	str[i]=0;
 b7c:	10 82       	st	Z, r1
 b7e:	11 82       	std	Z+1, r1	; 0x01
 b80:	12 82       	std	Z+2, r1	; 0x02
 b82:	13 82       	std	Z+3, r1	; 0x03
}
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	1f 91       	pop	r17
 b8a:	ff 90       	pop	r15
 b8c:	ef 90       	pop	r14
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
