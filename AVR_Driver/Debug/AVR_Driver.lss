
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000b16  00000baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800082  00800082  00000bcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f09  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001068  00000000  00000000  00003f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000204d  00000000  00000000  00004fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c10  00000000  00000000  00007008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011a4  00000000  00000000  00007c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002afa  00000000  00000000  00008dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000b8b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_1>
   8:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_2>
   c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_3>
  10:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_4>
  14:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_5>
  18:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_6>
  1c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_7>
  20:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_8>
  24:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_9>
  28:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_10>
  2c:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  8a:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_WriteCmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	84 fb       	bst	r24, 4
  98:	66 27       	eor	r22, r22
  9a:	60 f9       	bld	r22, 0
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  a2:	c5 fb       	bst	r28, 5
  a4:	66 27       	eor	r22, r22
  a6:	60 f9       	bld	r22, 0
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  ae:	c6 fb       	bst	r28, 6
  b0:	66 27       	eor	r22, r22
  b2:	60 f9       	bld	r22, 0
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  ba:	6c 2f       	mov	r22, r28
  bc:	66 1f       	adc	r22, r22
  be:	66 27       	eor	r22, r22
  c0:	66 1f       	adc	r22, r22
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	89 e0       	ldi	r24, 0x09	; 9
  d4:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WriteCmd+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WriteCmd+0x58>
  ea:	00 00       	nop
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  f4:	6c 2f       	mov	r22, r28
  f6:	61 70       	andi	r22, 0x01	; 1
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
  fe:	c1 fb       	bst	r28, 1
 100:	66 27       	eor	r22, r22
 102:	60 f9       	bld	r22, 0
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 10a:	c2 fb       	bst	r28, 2
 10c:	66 27       	eor	r22, r22
 10e:	60 f9       	bld	r22, 0
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 116:	c3 fb       	bst	r28, 3
 118:	66 27       	eor	r22, r22
 11a:	60 f9       	bld	r22, 0
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 13a:	8f ec       	ldi	r24, 0xCF	; 207
 13c:	97 e0       	ldi	r25, 0x07	; 7
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_WriteCmd+0xac>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_WriteCmd+0xb2>
 144:	00 00       	nop
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	97 e2       	ldi	r25, 0x27	; 39
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_WriteCmd+0xc0>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_WriteCmd+0xc6>
 158:	00 00       	nop
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <LCD_Init>:
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Init+0x4>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Init+0xa>
 168:	00 00       	nop
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 170:	8f ec       	ldi	r24, 0xCF	; 207
 172:	97 e0       	ldi	r25, 0x07	; 7
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Init+0x16>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Init+0x1c>
 17a:	00 00       	nop
 17c:	88 e2       	ldi	r24, 0x28	; 40
 17e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	97 e0       	ldi	r25, 0x07	; 7
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x28>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Init+0x2e>
 18c:	00 00       	nop
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 194:	8f ec       	ldi	r24, 0xCF	; 207
 196:	97 e0       	ldi	r25, 0x07	; 7
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x3a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x40>
 19e:	00 00       	nop
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Init+0x4c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Init+0x52>
 1b0:	00 00       	nop
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1b8:	8f ec       	ldi	r24, 0xCF	; 207
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x5e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0x64>
 1c2:	00 00       	nop
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 1ca:	08 95       	ret

000001cc <LCD_WriteData>:
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	84 fb       	bst	r24, 4
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 1dc:	c5 fb       	bst	r28, 5
 1de:	66 27       	eor	r22, r22
 1e0:	60 f9       	bld	r22, 0
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 1e8:	c6 fb       	bst	r28, 6
 1ea:	66 27       	eor	r22, r22
 1ec:	60 f9       	bld	r22, 0
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 1f4:	6c 2f       	mov	r22, r28
 1f6:	66 1f       	adc	r22, r22
 1f8:	66 27       	eor	r22, r22
 1fa:	66 1f       	adc	r22, r22
 1fc:	87 e0       	ldi	r24, 0x07	; 7
 1fe:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_WriteData+0x52>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_WriteData+0x58>
 224:	00 00       	nop
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 22e:	6c 2f       	mov	r22, r28
 230:	61 70       	andi	r22, 0x01	; 1
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 238:	c1 fb       	bst	r28, 1
 23a:	66 27       	eor	r22, r22
 23c:	60 f9       	bld	r22, 0
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 244:	c2 fb       	bst	r28, 2
 246:	66 27       	eor	r22, r22
 248:	60 f9       	bld	r22, 0
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 250:	c3 fb       	bst	r28, 3
 252:	66 27       	eor	r22, r22
 254:	60 f9       	bld	r22, 0
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	89 e0       	ldi	r24, 0x09	; 9
 268:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 274:	8f ec       	ldi	r24, 0xCF	; 207
 276:	97 e0       	ldi	r25, 0x07	; 7
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_WriteData+0xac>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_WriteData+0xb2>
 27e:	00 00       	nop
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	0e 94 84 02 	call	0x508	; 0x508 <DIO_Writepin>
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LCD_GOTO>:

void LCD_GOTO(uint8_t pos_x , uint8_t pos_y)
{
	int address = 0;
	
	if (pos_x == 0)
 28c:	88 23       	and	r24, r24
 28e:	29 f0       	breq	.+10     	; 0x29a <LCD_GOTO+0xe>
	address = 0x80;
	else if (pos_x == 1)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	31 f0       	breq	.+12     	; 0x2a0 <LCD_GOTO+0x14>

/*----------------------------------- Function used to Move Cursor of LCD ----------------------------------------*/

void LCD_GOTO(uint8_t pos_x , uint8_t pos_y)
{
	int address = 0;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <LCD_GOTO+0x18>
	
	if (pos_x == 0)
	address = 0x80;
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <LCD_GOTO+0x18>
	else if (pos_x == 1)
	address = 0xC0;
 2a0:	80 ec       	ldi	r24, 0xC0	; 192
 2a2:	90 e0       	ldi	r25, 0x00	; 0
	
	if (pos_y <= 15)
 2a4:	60 31       	cpi	r22, 0x10	; 16
 2a6:	10 f4       	brcc	.+4      	; 0x2ac <LCD_GOTO+0x20>
	address += pos_y;
 2a8:	86 0f       	add	r24, r22
 2aa:	91 1d       	adc	r25, r1
	
	LCD_WriteCmd(address);
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCmd>
 2b0:	08 95       	ret

000002b2 <LCD_WriteChar>:

/*----------------  Function used to Write Character  ------------------*/

void LCD_WriteChar(uint8_t character)
{
	LCD_WriteData(character);
 2b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteData>
 2b6:	8f ec       	ldi	r24, 0xCF	; 207
 2b8:	97 e0       	ldi	r25, 0x07	; 7
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_WriteChar+0x8>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_WriteChar+0xe>
 2c0:	00 00       	nop
 2c2:	08 95       	ret

000002c4 <main>:


			/*-------------------------- The Main Function ----------------------------*/
	
int main(void)
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <main+0x6>
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <main+0x8>
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
	Init_Pins();
 2d0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Init_Pins>
	LCD_Init();
 2d4:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
	uart_init(bits_8,bit_1,Disabled,Asynchronous);
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	0e 94 c0 04 	call	0x980	; 0x980 <uart_init>
	uint8_t str[]="ali";
 2e4:	81 e6       	ldi	r24, 0x61	; 97
 2e6:	9c e6       	ldi	r25, 0x6C	; 108
 2e8:	9a 83       	std	Y+2, r25	; 0x02
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	89 e6       	ldi	r24, 0x69	; 105
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	9c 83       	std	Y+4, r25	; 0x04
 2f2:	8b 83       	std	Y+3, r24	; 0x03
	uart_send_Asynch(str);
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	0e 94 42 05 	call	0xa84	; 0xa84 <uart_send_Asynch>
	while(1)
	{
		for (uint8_t i=0; i<9; i++)
 2fc:	10 e0       	ldi	r17, 0x00	; 0
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <main+0x4c>
		{
			LCD_GOTO(0,0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_GOTO>
			LCD_WriteChar(i);
 308:	81 2f       	mov	r24, r17
 30a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WriteChar>
	uart_init(bits_8,bit_1,Disabled,Asynchronous);
	uint8_t str[]="ali";
	uart_send_Asynch(str);
	while(1)
	{
		for (uint8_t i=0; i<9; i++)
 30e:	1f 5f       	subi	r17, 0xFF	; 255
 310:	19 30       	cpi	r17, 0x09	; 9
 312:	b0 f3       	brcs	.-20     	; 0x300 <main+0x3c>
 314:	f3 cf       	rjmp	.-26     	; 0x2fc <main+0x38>

00000316 <DIO_Initpin>:
		{
			DIO_Initpin(i,status);
		}
		break;
	}
}
 316:	98 2f       	mov	r25, r24
 318:	96 95       	lsr	r25
 31a:	96 95       	lsr	r25
 31c:	96 95       	lsr	r25
 31e:	87 70       	andi	r24, 0x07	; 7
 320:	61 30       	cpi	r22, 0x01	; 1
 322:	31 f0       	breq	.+12     	; 0x330 <DIO_Initpin+0x1a>
 324:	08 f4       	brcc	.+2      	; 0x328 <DIO_Initpin+0x12>
 326:	54 c0       	rjmp	.+168    	; 0x3d0 <DIO_Initpin+0xba>
 328:	62 30       	cpi	r22, 0x02	; 2
 32a:	09 f4       	brne	.+2      	; 0x32e <DIO_Initpin+0x18>
 32c:	a1 c0       	rjmp	.+322    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 32e:	08 95       	ret
 330:	91 30       	cpi	r25, 0x01	; 1
 332:	c1 f0       	breq	.+48     	; 0x364 <DIO_Initpin+0x4e>
 334:	28 f0       	brcs	.+10     	; 0x340 <DIO_Initpin+0x2a>
 336:	92 30       	cpi	r25, 0x02	; 2
 338:	39 f1       	breq	.+78     	; 0x388 <DIO_Initpin+0x72>
 33a:	93 30       	cpi	r25, 0x03	; 3
 33c:	b9 f1       	breq	.+110    	; 0x3ac <DIO_Initpin+0x96>
 33e:	08 95       	ret
 340:	4a b3       	in	r20, 0x1a	; 26
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	b9 01       	movw	r22, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_Initpin+0x38>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	8a 95       	dec	r24
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_Initpin+0x34>
 352:	cb 01       	movw	r24, r22
 354:	96 2f       	mov	r25, r22
 356:	90 95       	com	r25
 358:	94 23       	and	r25, r20
 35a:	9a bb       	out	0x1a, r25	; 26
 35c:	9b b3       	in	r25, 0x1b	; 27
 35e:	89 2b       	or	r24, r25
 360:	8b bb       	out	0x1b, r24	; 27
 362:	08 95       	ret
 364:	47 b3       	in	r20, 0x17	; 23
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	b9 01       	movw	r22, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_Initpin+0x5c>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	8a 95       	dec	r24
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_Initpin+0x58>
 376:	cb 01       	movw	r24, r22
 378:	96 2f       	mov	r25, r22
 37a:	90 95       	com	r25
 37c:	94 23       	and	r25, r20
 37e:	97 bb       	out	0x17, r25	; 23
 380:	98 b3       	in	r25, 0x18	; 24
 382:	89 2b       	or	r24, r25
 384:	88 bb       	out	0x18, r24	; 24
 386:	08 95       	ret
 388:	44 b3       	in	r20, 0x14	; 20
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	b9 01       	movw	r22, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_Initpin+0x80>
 392:	66 0f       	add	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	8a 95       	dec	r24
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_Initpin+0x7c>
 39a:	cb 01       	movw	r24, r22
 39c:	96 2f       	mov	r25, r22
 39e:	90 95       	com	r25
 3a0:	94 23       	and	r25, r20
 3a2:	94 bb       	out	0x14, r25	; 20
 3a4:	95 b3       	in	r25, 0x15	; 21
 3a6:	89 2b       	or	r24, r25
 3a8:	85 bb       	out	0x15, r24	; 21
 3aa:	08 95       	ret
 3ac:	41 b3       	in	r20, 0x11	; 17
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	b9 01       	movw	r22, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_Initpin+0xa4>
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_Initpin+0xa0>
 3be:	cb 01       	movw	r24, r22
 3c0:	96 2f       	mov	r25, r22
 3c2:	90 95       	com	r25
 3c4:	94 23       	and	r25, r20
 3c6:	91 bb       	out	0x11, r25	; 17
 3c8:	92 b3       	in	r25, 0x12	; 18
 3ca:	89 2b       	or	r24, r25
 3cc:	82 bb       	out	0x12, r24	; 18
 3ce:	08 95       	ret
 3d0:	91 30       	cpi	r25, 0x01	; 1
 3d2:	c1 f0       	breq	.+48     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3d4:	28 f0       	brcs	.+10     	; 0x3e0 <DIO_Initpin+0xca>
 3d6:	92 30       	cpi	r25, 0x02	; 2
 3d8:	39 f1       	breq	.+78     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3da:	93 30       	cpi	r25, 0x03	; 3
 3dc:	b9 f1       	breq	.+110    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3de:	08 95       	ret
 3e0:	4a b3       	in	r20, 0x1a	; 26
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	b9 01       	movw	r22, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_Initpin+0xd8>
 3ea:	66 0f       	add	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	8a 95       	dec	r24
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_Initpin+0xd4>
 3f2:	cb 01       	movw	r24, r22
 3f4:	80 95       	com	r24
 3f6:	94 2f       	mov	r25, r20
 3f8:	98 23       	and	r25, r24
 3fa:	9a bb       	out	0x1a, r25	; 26
 3fc:	9b b3       	in	r25, 0x1b	; 27
 3fe:	89 23       	and	r24, r25
 400:	8b bb       	out	0x1b, r24	; 27
 402:	08 95       	ret
 404:	47 b3       	in	r20, 0x17	; 23
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	b9 01       	movw	r22, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	8a 95       	dec	r24
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	cb 01       	movw	r24, r22
 418:	80 95       	com	r24
 41a:	94 2f       	mov	r25, r20
 41c:	98 23       	and	r25, r24
 41e:	97 bb       	out	0x17, r25	; 23
 420:	98 b3       	in	r25, 0x18	; 24
 422:	89 23       	and	r24, r25
 424:	88 bb       	out	0x18, r24	; 24
 426:	08 95       	ret
 428:	44 b3       	in	r20, 0x14	; 20
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	cb 01       	movw	r24, r22
 43c:	80 95       	com	r24
 43e:	94 2f       	mov	r25, r20
 440:	98 23       	and	r25, r24
 442:	94 bb       	out	0x14, r25	; 20
 444:	95 b3       	in	r25, 0x15	; 21
 446:	89 23       	and	r24, r25
 448:	85 bb       	out	0x15, r24	; 21
 44a:	08 95       	ret
 44c:	41 b3       	in	r20, 0x11	; 17
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	cb 01       	movw	r24, r22
 460:	80 95       	com	r24
 462:	94 2f       	mov	r25, r20
 464:	98 23       	and	r25, r24
 466:	91 bb       	out	0x11, r25	; 17
 468:	92 b3       	in	r25, 0x12	; 18
 46a:	89 23       	and	r24, r25
 46c:	82 bb       	out	0x12, r24	; 18
 46e:	08 95       	ret
 470:	91 30       	cpi	r25, 0x01	; 1
 472:	99 f0       	breq	.+38     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 474:	28 f0       	brcs	.+10     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 476:	92 30       	cpi	r25, 0x02	; 2
 478:	e9 f0       	breq	.+58     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 47a:	93 30       	cpi	r25, 0x03	; 3
 47c:	41 f1       	breq	.+80     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 47e:	08 95       	ret
 480:	4a b3       	in	r20, 0x1a	; 26
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	b9 01       	movw	r22, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	cb 01       	movw	r24, r22
 494:	84 2b       	or	r24, r20
 496:	8a bb       	out	0x1a, r24	; 26
 498:	08 95       	ret
 49a:	47 b3       	in	r20, 0x17	; 23
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4ac:	cb 01       	movw	r24, r22
 4ae:	84 2b       	or	r24, r20
 4b0:	87 bb       	out	0x17, r24	; 23
 4b2:	08 95       	ret
 4b4:	44 b3       	in	r20, 0x14	; 20
 4b6:	21 e0       	ldi	r18, 0x01	; 1
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	b9 01       	movw	r22, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	8a 95       	dec	r24
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	cb 01       	movw	r24, r22
 4c8:	84 2b       	or	r24, r20
 4ca:	84 bb       	out	0x14, r24	; 20
 4cc:	08 95       	ret
 4ce:	41 b3       	in	r20, 0x11	; 17
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	b9 01       	movw	r22, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4e0:	cb 01       	movw	r24, r22
 4e2:	84 2b       	or	r24, r20
 4e4:	81 bb       	out	0x11, r24	; 17
 4e6:	08 95       	ret

000004e8 <Init_Pins>:
 4e8:	cf 93       	push	r28
 4ea:	c0 e0       	ldi	r28, 0x00	; 0
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <Init_Pins+0x18>
 4ee:	ec 2f       	mov	r30, r28
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	ef 59       	subi	r30, 0x9F	; 159
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	60 81       	ld	r22, Z
 4f8:	8c 2f       	mov	r24, r28
 4fa:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_Initpin>
 4fe:	cf 5f       	subi	r28, 0xFF	; 255
 500:	c0 32       	cpi	r28, 0x20	; 32
 502:	a8 f3       	brcs	.-22     	; 0x4ee <Init_Pins+0x6>
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
 508:	98 2f       	mov	r25, r24
 50a:	96 95       	lsr	r25
 50c:	96 95       	lsr	r25
 50e:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
 510:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
 512:	61 30       	cpi	r22, 0x01	; 1
 514:	e1 f5       	brne	.+120    	; 0x58e <DIO_Writepin+0x86>
		
		switch(port){
 516:	91 30       	cpi	r25, 0x01	; 1
 518:	99 f0       	breq	.+38     	; 0x540 <DIO_Writepin+0x38>
 51a:	28 f0       	brcs	.+10     	; 0x526 <DIO_Writepin+0x1e>
 51c:	92 30       	cpi	r25, 0x02	; 2
 51e:	e9 f0       	breq	.+58     	; 0x55a <DIO_Writepin+0x52>
 520:	93 30       	cpi	r25, 0x03	; 3
 522:	41 f1       	breq	.+80     	; 0x574 <DIO_Writepin+0x6c>
 524:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
 526:	4b b3       	in	r20, 0x1b	; 27
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	b9 01       	movw	r22, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_Writepin+0x2c>
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	8a 95       	dec	r24
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_Writepin+0x28>
 538:	cb 01       	movw	r24, r22
 53a:	84 2b       	or	r24, r20
 53c:	8b bb       	out	0x1b, r24	; 27
			break;
 53e:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
 540:	48 b3       	in	r20, 0x18	; 24
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	b9 01       	movw	r22, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_Writepin+0x46>
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	8a 95       	dec	r24
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_Writepin+0x42>
 552:	cb 01       	movw	r24, r22
 554:	84 2b       	or	r24, r20
 556:	88 bb       	out	0x18, r24	; 24
			break;
 558:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
 55a:	45 b3       	in	r20, 0x15	; 21
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_Writepin+0x60>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_Writepin+0x5c>
 56c:	cb 01       	movw	r24, r22
 56e:	84 2b       	or	r24, r20
 570:	85 bb       	out	0x15, r24	; 21
			break;
 572:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
 574:	42 b3       	in	r20, 0x12	; 18
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	b9 01       	movw	r22, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_Writepin+0x7a>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	8a 95       	dec	r24
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_Writepin+0x76>
 586:	cb 01       	movw	r24, r22
 588:	84 2b       	or	r24, r20
 58a:	82 bb       	out	0x12, r24	; 18
			break;
 58c:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
 58e:	61 11       	cpse	r22, r1
 590:	3f c0       	rjmp	.+126    	; 0x610 <DIO_Writepin+0x108>
		switch(port){
 592:	91 30       	cpi	r25, 0x01	; 1
 594:	a1 f0       	breq	.+40     	; 0x5be <DIO_Writepin+0xb6>
 596:	28 f0       	brcs	.+10     	; 0x5a2 <DIO_Writepin+0x9a>
 598:	92 30       	cpi	r25, 0x02	; 2
 59a:	f9 f0       	breq	.+62     	; 0x5da <DIO_Writepin+0xd2>
 59c:	93 30       	cpi	r25, 0x03	; 3
 59e:	59 f1       	breq	.+86     	; 0x5f6 <DIO_Writepin+0xee>
 5a0:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
 5a2:	4b b3       	in	r20, 0x1b	; 27
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	b9 01       	movw	r22, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_Writepin+0xa8>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	8a 95       	dec	r24
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_Writepin+0xa4>
 5b4:	cb 01       	movw	r24, r22
 5b6:	80 95       	com	r24
 5b8:	84 23       	and	r24, r20
 5ba:	8b bb       	out	0x1b, r24	; 27
			break;
 5bc:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 5be:	48 b3       	in	r20, 0x18	; 24
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	b9 01       	movw	r22, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_Writepin+0xc4>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	8a 95       	dec	r24
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_Writepin+0xc0>
 5d0:	cb 01       	movw	r24, r22
 5d2:	80 95       	com	r24
 5d4:	84 23       	and	r24, r20
 5d6:	88 bb       	out	0x18, r24	; 24
			break;
 5d8:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 5da:	45 b3       	in	r20, 0x15	; 21
 5dc:	21 e0       	ldi	r18, 0x01	; 1
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	b9 01       	movw	r22, r18
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_Writepin+0xe0>
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	8a 95       	dec	r24
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_Writepin+0xdc>
 5ec:	cb 01       	movw	r24, r22
 5ee:	80 95       	com	r24
 5f0:	84 23       	and	r24, r20
 5f2:	85 bb       	out	0x15, r24	; 21
			break;
 5f4:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 5f6:	42 b3       	in	r20, 0x12	; 18
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	b9 01       	movw	r22, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_Writepin+0xfc>
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	8a 95       	dec	r24
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_Writepin+0xf8>
 608:	cb 01       	movw	r24, r22
 60a:	80 95       	com	r24
 60c:	84 23       	and	r24, r20
 60e:	82 bb       	out	0x12, r24	; 18
 610:	08 95       	ret

00000612 <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
 634:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Fptr_EXI0>
 638:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Fptr_EXI0+0x1>
 63c:	30 97       	sbiw	r30, 0x00	; 0
 63e:	09 f0       	breq	.+2      	; 0x642 <__vector_1+0x30>
		Fptr_EXI0();
 640:	09 95       	icall
	}
}
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_2>:

/*-------------  (ISR of EXI1) ----------------*/

ISR(INT1_vect){
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
 686:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Fptr_EXI1>
 68a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Fptr_EXI1+0x1>
 68e:	30 97       	sbiw	r30, 0x00	; 0
 690:	09 f0       	breq	.+2      	; 0x694 <__vector_2+0x30>
		Fptr_EXI1();
 692:	09 95       	icall
	}
}
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <__vector_3>:

/*-------------  (ISR of EXI2) ----------------*/

ISR(INT2_vect){
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	2f 93       	push	r18
 6c2:	3f 93       	push	r19
 6c4:	4f 93       	push	r20
 6c6:	5f 93       	push	r21
 6c8:	6f 93       	push	r22
 6ca:	7f 93       	push	r23
 6cc:	8f 93       	push	r24
 6ce:	9f 93       	push	r25
 6d0:	af 93       	push	r26
 6d2:	bf 93       	push	r27
 6d4:	ef 93       	push	r30
 6d6:	ff 93       	push	r31
	
	if(Fptr_EXI2!=NULL_ptr){
 6d8:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <__data_end>
 6dc:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <__data_end+0x1>
 6e0:	30 97       	sbiw	r30, 0x00	; 0
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <__vector_3+0x30>
		Fptr_EXI2();
 6e4:	09 95       	icall
	}
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	bf 91       	pop	r27
 6ec:	af 91       	pop	r26
 6ee:	9f 91       	pop	r25
 6f0:	8f 91       	pop	r24
 6f2:	7f 91       	pop	r23
 6f4:	6f 91       	pop	r22
 6f6:	5f 91       	pop	r21
 6f8:	4f 91       	pop	r20
 6fa:	3f 91       	pop	r19
 6fc:	2f 91       	pop	r18
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <__vector_11>:
}
			/********************************* Timer 0 ISR functions ******************************/


	ISR(TIMER0_OVF_vect)
	{
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	2f 93       	push	r18
 714:	3f 93       	push	r19
 716:	4f 93       	push	r20
 718:	5f 93       	push	r21
 71a:	6f 93       	push	r22
 71c:	7f 93       	push	r23
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	af 93       	push	r26
 724:	bf 93       	push	r27
 726:	ef 93       	push	r30
 728:	ff 93       	push	r31
		if(Timer0_OVF_Fptr!=NULLptr)
 72a:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Timer0_OVF_Fptr>
 72e:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <Timer0_OVF_Fptr+0x1>
 732:	30 97       	sbiw	r30, 0x00	; 0
 734:	09 f0       	breq	.+2      	; 0x738 <__vector_11+0x30>
		{
			Timer0_OVF_Fptr();
 736:	09 95       	icall
		}
	}
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_10>:

	ISR(TIMER0_COMP_vect){
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	4f 93       	push	r20
 76a:	5f 93       	push	r21
 76c:	6f 93       	push	r22
 76e:	7f 93       	push	r23
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
		Timer0_OC0_Fptr();
 77c:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Timer0_OC0_Fptr>
 780:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Timer0_OC0_Fptr+0x1>
 784:	09 95       	icall
	}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER1_OVF_vect)
{
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
	Timer1_OVF_Fptr();
 7ca:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <Timer1_OVF_Fptr>
 7ce:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <Timer1_OVF_Fptr+0x1>
 7d2:	09 95       	icall
}
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	7f 91       	pop	r23
 7e2:	6f 91       	pop	r22
 7e4:	5f 91       	pop	r21
 7e6:	4f 91       	pop	r20
 7e8:	3f 91       	pop	r19
 7ea:	2f 91       	pop	r18
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
	Timer1_OCA_Fptr();
 818:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <Timer1_OCA_Fptr>
 81c:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <Timer1_OCA_Fptr+0x1>
 820:	09 95       	icall
}
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
 844:	1f 92       	push	r1
 846:	0f 92       	push	r0
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	0f 92       	push	r0
 84c:	11 24       	eor	r1, r1
 84e:	2f 93       	push	r18
 850:	3f 93       	push	r19
 852:	4f 93       	push	r20
 854:	5f 93       	push	r21
 856:	6f 93       	push	r22
 858:	7f 93       	push	r23
 85a:	8f 93       	push	r24
 85c:	9f 93       	push	r25
 85e:	af 93       	push	r26
 860:	bf 93       	push	r27
 862:	ef 93       	push	r30
 864:	ff 93       	push	r31
	Timer1_OCB_Fptr();
 866:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Timer1_OCB_Fptr>
 86a:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Timer1_OCB_Fptr+0x1>
 86e:	09 95       	icall
}
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	7f 91       	pop	r23
 87e:	6f 91       	pop	r22
 880:	5f 91       	pop	r21
 882:	4f 91       	pop	r20
 884:	3f 91       	pop	r19
 886:	2f 91       	pop	r18
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
	Timer1_ICU_Fptr();
 8b4:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Timer1_ICU_Fptr>
 8b8:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Timer1_ICU_Fptr+0x1>
 8bc:	09 95       	icall
}
 8be:	ff 91       	pop	r31
 8c0:	ef 91       	pop	r30
 8c2:	bf 91       	pop	r27
 8c4:	af 91       	pop	r26
 8c6:	9f 91       	pop	r25
 8c8:	8f 91       	pop	r24
 8ca:	7f 91       	pop	r23
 8cc:	6f 91       	pop	r22
 8ce:	5f 91       	pop	r21
 8d0:	4f 91       	pop	r20
 8d2:	3f 91       	pop	r19
 8d4:	2f 91       	pop	r18
 8d6:	0f 90       	pop	r0
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	0f 90       	pop	r0
 8dc:	1f 90       	pop	r1
 8de:	18 95       	reti

000008e0 <__vector_5>:
	}

	/********************************* Timer 2 ISR functions ******************************/

	ISR(TIMER2_OVF_vect)
	{
 8e0:	1f 92       	push	r1
 8e2:	0f 92       	push	r0
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	0f 92       	push	r0
 8e8:	11 24       	eor	r1, r1
 8ea:	2f 93       	push	r18
 8ec:	3f 93       	push	r19
 8ee:	4f 93       	push	r20
 8f0:	5f 93       	push	r21
 8f2:	6f 93       	push	r22
 8f4:	7f 93       	push	r23
 8f6:	8f 93       	push	r24
 8f8:	9f 93       	push	r25
 8fa:	af 93       	push	r26
 8fc:	bf 93       	push	r27
 8fe:	ef 93       	push	r30
 900:	ff 93       	push	r31
		if(Timer2_OVF_Fptr!=NULLptr)
 902:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <Timer2_OVF_Fptr>
 906:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <Timer2_OVF_Fptr+0x1>
 90a:	30 97       	sbiw	r30, 0x00	; 0
 90c:	09 f0       	breq	.+2      	; 0x910 <__vector_5+0x30>
		{
			Timer2_OVF_Fptr();
 90e:	09 95       	icall
		}
	}
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <__vector_4>:

	ISR(TIMER2_COMP_vect){
 932:	1f 92       	push	r1
 934:	0f 92       	push	r0
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	0f 92       	push	r0
 93a:	11 24       	eor	r1, r1
 93c:	2f 93       	push	r18
 93e:	3f 93       	push	r19
 940:	4f 93       	push	r20
 942:	5f 93       	push	r21
 944:	6f 93       	push	r22
 946:	7f 93       	push	r23
 948:	8f 93       	push	r24
 94a:	9f 93       	push	r25
 94c:	af 93       	push	r26
 94e:	bf 93       	push	r27
 950:	ef 93       	push	r30
 952:	ff 93       	push	r31
		Timer2_OC2_Fptr();
 954:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <Timer2_OC2_Fptr>
 958:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <Timer2_OC2_Fptr+0x1>
 95c:	09 95       	icall
	}
 95e:	ff 91       	pop	r31
 960:	ef 91       	pop	r30
 962:	bf 91       	pop	r27
 964:	af 91       	pop	r26
 966:	9f 91       	pop	r25
 968:	8f 91       	pop	r24
 96a:	7f 91       	pop	r23
 96c:	6f 91       	pop	r22
 96e:	5f 91       	pop	r21
 970:	4f 91       	pop	r20
 972:	3f 91       	pop	r19
 974:	2f 91       	pop	r18
 976:	0f 90       	pop	r0
 978:	0f be       	out	0x3f, r0	; 63
 97a:	0f 90       	pop	r0
 97c:	1f 90       	pop	r1
 97e:	18 95       	reti

00000980 <uart_init>:
	SET_BIT(UCSRB,RXCIE);
}

void RX_Complete_Interrupt_Disable()
{
	CLEAR_BIT(UCSRB,RXCIE);
 980:	82 30       	cpi	r24, 0x02	; 2
 982:	f9 f0       	breq	.+62     	; 0x9c2 <uart_init+0x42>
 984:	28 f4       	brcc	.+10     	; 0x990 <uart_init+0x10>
 986:	88 23       	and	r24, r24
 988:	41 f0       	breq	.+16     	; 0x99a <uart_init+0x1a>
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	81 f0       	breq	.+32     	; 0x9ae <uart_init+0x2e>
 98e:	36 c0       	rjmp	.+108    	; 0x9fc <uart_init+0x7c>
 990:	83 30       	cpi	r24, 0x03	; 3
 992:	09 f1       	breq	.+66     	; 0x9d6 <uart_init+0x56>
 994:	84 30       	cpi	r24, 0x04	; 4
 996:	49 f1       	breq	.+82     	; 0x9ea <uart_init+0x6a>
 998:	31 c0       	rjmp	.+98     	; 0x9fc <uart_init+0x7c>
 99a:	80 b5       	in	r24, 0x20	; 32
 99c:	8d 7f       	andi	r24, 0xFD	; 253
 99e:	80 bd       	out	0x20, r24	; 32
 9a0:	80 b5       	in	r24, 0x20	; 32
 9a2:	8b 7f       	andi	r24, 0xFB	; 251
 9a4:	80 bd       	out	0x20, r24	; 32
 9a6:	8a b1       	in	r24, 0x0a	; 10
 9a8:	8b 7f       	andi	r24, 0xFB	; 251
 9aa:	8a b9       	out	0x0a, r24	; 10
 9ac:	27 c0       	rjmp	.+78     	; 0x9fc <uart_init+0x7c>
 9ae:	80 b5       	in	r24, 0x20	; 32
 9b0:	82 60       	ori	r24, 0x02	; 2
 9b2:	80 bd       	out	0x20, r24	; 32
 9b4:	80 b5       	in	r24, 0x20	; 32
 9b6:	8b 7f       	andi	r24, 0xFB	; 251
 9b8:	80 bd       	out	0x20, r24	; 32
 9ba:	8a b1       	in	r24, 0x0a	; 10
 9bc:	8b 7f       	andi	r24, 0xFB	; 251
 9be:	8a b9       	out	0x0a, r24	; 10
 9c0:	1d c0       	rjmp	.+58     	; 0x9fc <uart_init+0x7c>
 9c2:	80 b5       	in	r24, 0x20	; 32
 9c4:	8d 7f       	andi	r24, 0xFD	; 253
 9c6:	80 bd       	out	0x20, r24	; 32
 9c8:	80 b5       	in	r24, 0x20	; 32
 9ca:	84 60       	ori	r24, 0x04	; 4
 9cc:	80 bd       	out	0x20, r24	; 32
 9ce:	8a b1       	in	r24, 0x0a	; 10
 9d0:	8b 7f       	andi	r24, 0xFB	; 251
 9d2:	8a b9       	out	0x0a, r24	; 10
 9d4:	13 c0       	rjmp	.+38     	; 0x9fc <uart_init+0x7c>
 9d6:	80 b5       	in	r24, 0x20	; 32
 9d8:	82 60       	ori	r24, 0x02	; 2
 9da:	80 bd       	out	0x20, r24	; 32
 9dc:	80 b5       	in	r24, 0x20	; 32
 9de:	84 60       	ori	r24, 0x04	; 4
 9e0:	80 bd       	out	0x20, r24	; 32
 9e2:	8a b1       	in	r24, 0x0a	; 10
 9e4:	8b 7f       	andi	r24, 0xFB	; 251
 9e6:	8a b9       	out	0x0a, r24	; 10
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <uart_init+0x7c>
 9ea:	80 b5       	in	r24, 0x20	; 32
 9ec:	82 60       	ori	r24, 0x02	; 2
 9ee:	80 bd       	out	0x20, r24	; 32
 9f0:	80 b5       	in	r24, 0x20	; 32
 9f2:	84 60       	ori	r24, 0x04	; 4
 9f4:	80 bd       	out	0x20, r24	; 32
 9f6:	8a b1       	in	r24, 0x0a	; 10
 9f8:	84 60       	ori	r24, 0x04	; 4
 9fa:	8a b9       	out	0x0a, r24	; 10
 9fc:	66 23       	and	r22, r22
 9fe:	19 f0       	breq	.+6      	; 0xa06 <uart_init+0x86>
 a00:	61 30       	cpi	r22, 0x01	; 1
 a02:	29 f0       	breq	.+10     	; 0xa0e <uart_init+0x8e>
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <uart_init+0x94>
 a06:	80 b5       	in	r24, 0x20	; 32
 a08:	87 7f       	andi	r24, 0xF7	; 247
 a0a:	80 bd       	out	0x20, r24	; 32
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <uart_init+0x94>
 a0e:	80 b5       	in	r24, 0x20	; 32
 a10:	88 60       	ori	r24, 0x08	; 8
 a12:	80 bd       	out	0x20, r24	; 32
 a14:	41 30       	cpi	r20, 0x01	; 1
 a16:	59 f0       	breq	.+22     	; 0xa2e <uart_init+0xae>
 a18:	18 f0       	brcs	.+6      	; 0xa20 <uart_init+0xa0>
 a1a:	42 30       	cpi	r20, 0x02	; 2
 a1c:	79 f0       	breq	.+30     	; 0xa3c <uart_init+0xbc>
 a1e:	14 c0       	rjmp	.+40     	; 0xa48 <uart_init+0xc8>
 a20:	80 b5       	in	r24, 0x20	; 32
 a22:	8f 7e       	andi	r24, 0xEF	; 239
 a24:	80 bd       	out	0x20, r24	; 32
 a26:	80 b5       	in	r24, 0x20	; 32
 a28:	8f 7d       	andi	r24, 0xDF	; 223
 a2a:	80 bd       	out	0x20, r24	; 32
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <uart_init+0xc8>
 a2e:	80 b5       	in	r24, 0x20	; 32
 a30:	8f 7e       	andi	r24, 0xEF	; 239
 a32:	80 bd       	out	0x20, r24	; 32
 a34:	80 b5       	in	r24, 0x20	; 32
 a36:	80 62       	ori	r24, 0x20	; 32
 a38:	80 bd       	out	0x20, r24	; 32
 a3a:	06 c0       	rjmp	.+12     	; 0xa48 <uart_init+0xc8>
 a3c:	80 b5       	in	r24, 0x20	; 32
 a3e:	80 61       	ori	r24, 0x10	; 16
 a40:	80 bd       	out	0x20, r24	; 32
 a42:	80 b5       	in	r24, 0x20	; 32
 a44:	80 62       	ori	r24, 0x20	; 32
 a46:	80 bd       	out	0x20, r24	; 32
 a48:	22 23       	and	r18, r18
 a4a:	19 f0       	breq	.+6      	; 0xa52 <uart_init+0xd2>
 a4c:	21 30       	cpi	r18, 0x01	; 1
 a4e:	41 f0       	breq	.+16     	; 0xa60 <uart_init+0xe0>
 a50:	0a c0       	rjmp	.+20     	; 0xa66 <uart_init+0xe6>
 a52:	80 b5       	in	r24, 0x20	; 32
 a54:	8f 7b       	andi	r24, 0xBF	; 191
 a56:	80 bd       	out	0x20, r24	; 32
 a58:	8b b1       	in	r24, 0x0b	; 11
 a5a:	8d 7f       	andi	r24, 0xFD	; 253
 a5c:	8b b9       	out	0x0b, r24	; 11
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <uart_init+0xe6>
 a60:	80 b5       	in	r24, 0x20	; 32
 a62:	80 64       	ori	r24, 0x40	; 64
 a64:	80 bd       	out	0x20, r24	; 32
 a66:	83 e3       	ldi	r24, 0x33	; 51
 a68:	89 b9       	out	0x09, r24	; 9
 a6a:	8a b1       	in	r24, 0x0a	; 10
 a6c:	80 61       	ori	r24, 0x10	; 16
 a6e:	8a b9       	out	0x0a, r24	; 10
 a70:	8a b1       	in	r24, 0x0a	; 10
 a72:	88 60       	ori	r24, 0x08	; 8
 a74:	8a b9       	out	0x0a, r24	; 10
 a76:	08 95       	ret

00000a78 <uart_send_noblock>:
 a78:	8c b9       	out	0x0c, r24	; 12
 a7a:	08 95       	ret

00000a7c <TX_Complete_Interrupt_Enable>:
}

void TX_Complete_Interrupt_Enable()
{
	SET_BIT(UCSRB,TXCIE);
 a7c:	8a b1       	in	r24, 0x0a	; 10
 a7e:	80 64       	ori	r24, 0x40	; 64
 a80:	8a b9       	out	0x0a, r24	; 10
 a82:	08 95       	ret

00000a84 <uart_send_Asynch>:
	TX_Complete_Interrupt_Enable();
	uart_send_noblock(str[0]);
}

void uart_recieve_Asynch(uint8_t *str)
{
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	ec 01       	movw	r28, r24
 a8a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <pdata+0x1>
 a8e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <pdata>
 a92:	0e 94 3e 05 	call	0xa7c	; 0xa7c <TX_Complete_Interrupt_Enable>
 a96:	88 81       	ld	r24, Y
 a98:	0e 94 3c 05 	call	0xa78	; 0xa78 <uart_send_noblock>
 a9c:	df 91       	pop	r29
 a9e:	cf 91       	pop	r28
 aa0:	08 95       	ret

00000aa2 <__vector_15>:
	
}

ISR(USART_TXC_vect)
{
 aa2:	1f 92       	push	r1
 aa4:	0f 92       	push	r0
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	0f 92       	push	r0
 aaa:	11 24       	eor	r1, r1
 aac:	2f 93       	push	r18
 aae:	3f 93       	push	r19
 ab0:	4f 93       	push	r20
 ab2:	5f 93       	push	r21
 ab4:	6f 93       	push	r22
 ab6:	7f 93       	push	r23
 ab8:	8f 93       	push	r24
 aba:	9f 93       	push	r25
 abc:	af 93       	push	r26
 abe:	bf 93       	push	r27
 ac0:	ef 93       	push	r30
 ac2:	ff 93       	push	r31
	static uint8_t i=1;
	if (pdata[i]!=0)
 ac4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 ac8:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <pdata>
 acc:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <pdata+0x1>
 ad0:	e8 0f       	add	r30, r24
 ad2:	f1 1d       	adc	r31, r1
 ad4:	80 81       	ld	r24, Z
 ad6:	88 23       	and	r24, r24
 ad8:	41 f0       	breq	.+16     	; 0xaea <__vector_15+0x48>
	{
		uart_send_noblock(pdata[i]);
 ada:	0e 94 3c 05 	call	0xa78	; 0xa78 <uart_send_noblock>
		i++;
 ade:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 ae2:	8f 5f       	subi	r24, 0xFF	; 255
 ae4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <__vector_15+0x4e>
	}
	else
	{
		i=1;	
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 af0:	ff 91       	pop	r31
 af2:	ef 91       	pop	r30
 af4:	bf 91       	pop	r27
 af6:	af 91       	pop	r26
 af8:	9f 91       	pop	r25
 afa:	8f 91       	pop	r24
 afc:	7f 91       	pop	r23
 afe:	6f 91       	pop	r22
 b00:	5f 91       	pop	r21
 b02:	4f 91       	pop	r20
 b04:	3f 91       	pop	r19
 b06:	2f 91       	pop	r18
 b08:	0f 90       	pop	r0
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	0f 90       	pop	r0
 b0e:	1f 90       	pop	r1
 b10:	18 95       	reti

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
