
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001016  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001016  000010aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800080  00800080  000010ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a1e  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea2  00000000  00000000  00003ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bff  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d0  00000000  00000000  00006960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000107e  00000000  00000000  00007330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023ed  00000000  00000000  000083ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000a79b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__vector_1>
       8:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_2>
       c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__vector_3>
      10:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_4>
      14:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_5>
      18:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_6>
      1c:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_7>
      20:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_8>
      24:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__vector_9>
      28:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_10>
      2c:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	76 02       	muls	r23, r22
      56:	80 02       	muls	r24, r16
      58:	8a 02       	muls	r24, r26
      5a:	94 02       	muls	r25, r20
      5c:	9e 02       	muls	r25, r30
      5e:	a8 02       	muls	r26, r24
      60:	b2 02       	muls	r27, r18

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e1       	ldi	r30, 0x16	; 22
      76:	f0 e1       	ldi	r31, 0x10	; 16
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a0 38       	cpi	r26, 0x80	; 128
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a0 e8       	ldi	r26, 0x80	; 128
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a6 39       	cpi	r26, 0x96	; 150
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
      98:	0c 94 09 08 	jmp	0x1012	; 0x1012 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <LCD_WriteCmd>:
	for(uint8_t i =0; i < n ; i++)
	{
		LCD_WriteData(' ');
		_delay_ms(1);
	}
}
      a0:	cf 93       	push	r28
      a2:	c8 2f       	mov	r28, r24
      a4:	84 fb       	bst	r24, 4
      a6:	66 27       	eor	r22, r22
      a8:	60 f9       	bld	r22, 0
      aa:	84 e0       	ldi	r24, 0x04	; 4
      ac:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
      b0:	c5 fb       	bst	r28, 5
      b2:	66 27       	eor	r22, r22
      b4:	60 f9       	bld	r22, 0
      b6:	85 e0       	ldi	r24, 0x05	; 5
      b8:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
      bc:	c6 fb       	bst	r28, 6
      be:	66 27       	eor	r22, r22
      c0:	60 f9       	bld	r22, 0
      c2:	86 e0       	ldi	r24, 0x06	; 6
      c4:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
      c8:	6c 2f       	mov	r22, r28
      ca:	66 1f       	adc	r22, r22
      cc:	66 27       	eor	r22, r22
      ce:	66 1f       	adc	r22, r22
      d0:	87 e0       	ldi	r24, 0x07	; 7
      d2:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	88 e0       	ldi	r24, 0x08	; 8
      da:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	89 e0       	ldi	r24, 0x09	; 9
      e2:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	8b e0       	ldi	r24, 0x0B	; 11
      ea:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
      ee:	8f ec       	ldi	r24, 0xCF	; 207
      f0:	97 e0       	ldi	r25, 0x07	; 7
      f2:	01 97       	sbiw	r24, 0x01	; 1
      f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_WriteCmd+0x52>
      f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_WriteCmd+0x58>
      f8:	00 00       	nop
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	8b e0       	ldi	r24, 0x0B	; 11
      fe:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     102:	6c 2f       	mov	r22, r28
     104:	61 70       	andi	r22, 0x01	; 1
     106:	84 e0       	ldi	r24, 0x04	; 4
     108:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     10c:	c1 fb       	bst	r28, 1
     10e:	66 27       	eor	r22, r22
     110:	60 f9       	bld	r22, 0
     112:	85 e0       	ldi	r24, 0x05	; 5
     114:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     118:	c2 fb       	bst	r28, 2
     11a:	66 27       	eor	r22, r22
     11c:	60 f9       	bld	r22, 0
     11e:	86 e0       	ldi	r24, 0x06	; 6
     120:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     124:	c3 fb       	bst	r28, 3
     126:	66 27       	eor	r22, r22
     128:	60 f9       	bld	r22, 0
     12a:	87 e0       	ldi	r24, 0x07	; 7
     12c:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	88 e0       	ldi	r24, 0x08	; 8
     134:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	89 e0       	ldi	r24, 0x09	; 9
     13c:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     140:	61 e0       	ldi	r22, 0x01	; 1
     142:	8b e0       	ldi	r24, 0x0B	; 11
     144:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     148:	8f ec       	ldi	r24, 0xCF	; 207
     14a:	97 e0       	ldi	r25, 0x07	; 7
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_WriteCmd+0xac>
     150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_WriteCmd+0xb2>
     152:	00 00       	nop
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	8b e0       	ldi	r24, 0x0B	; 11
     158:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     15c:	8f e0       	ldi	r24, 0x0F	; 15
     15e:	97 e2       	ldi	r25, 0x27	; 39
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <LCD_WriteCmd+0xc0>
     164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_WriteCmd+0xc6>
     166:	00 00       	nop
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <LCD_Init>:
     16c:	8f e3       	ldi	r24, 0x3F	; 63
     16e:	9c e9       	ldi	r25, 0x9C	; 156
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <LCD_Init+0x4>
     174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_Init+0xa>
     176:	00 00       	nop
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCmd>
     17e:	8f ec       	ldi	r24, 0xCF	; 207
     180:	97 e0       	ldi	r25, 0x07	; 7
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Init+0x16>
     186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Init+0x1c>
     188:	00 00       	nop
     18a:	88 e2       	ldi	r24, 0x28	; 40
     18c:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCmd>
     190:	8f ec       	ldi	r24, 0xCF	; 207
     192:	97 e0       	ldi	r25, 0x07	; 7
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Init+0x28>
     198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_Init+0x2e>
     19a:	00 00       	nop
     19c:	8c e0       	ldi	r24, 0x0C	; 12
     19e:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCmd>
     1a2:	8f ec       	ldi	r24, 0xCF	; 207
     1a4:	97 e0       	ldi	r25, 0x07	; 7
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Init+0x3a>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Init+0x40>
     1ac:	00 00       	nop
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCmd>
     1b4:	8f e9       	ldi	r24, 0x9F	; 159
     1b6:	9f e0       	ldi	r25, 0x0F	; 15
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Init+0x4c>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Init+0x52>
     1be:	00 00       	nop
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCmd>
     1c6:	8f ec       	ldi	r24, 0xCF	; 207
     1c8:	97 e0       	ldi	r25, 0x07	; 7
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_Init+0x5e>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_Init+0x64>
     1d0:	00 00       	nop
     1d2:	80 e8       	ldi	r24, 0x80	; 128
     1d4:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCmd>
     1d8:	08 95       	ret

000001da <LCD_WriteData>:
     1da:	cf 93       	push	r28
     1dc:	c8 2f       	mov	r28, r24
     1de:	84 fb       	bst	r24, 4
     1e0:	66 27       	eor	r22, r22
     1e2:	60 f9       	bld	r22, 0
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     1ea:	c5 fb       	bst	r28, 5
     1ec:	66 27       	eor	r22, r22
     1ee:	60 f9       	bld	r22, 0
     1f0:	85 e0       	ldi	r24, 0x05	; 5
     1f2:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     1f6:	c6 fb       	bst	r28, 6
     1f8:	66 27       	eor	r22, r22
     1fa:	60 f9       	bld	r22, 0
     1fc:	86 e0       	ldi	r24, 0x06	; 6
     1fe:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     202:	6c 2f       	mov	r22, r28
     204:	66 1f       	adc	r22, r22
     206:	66 27       	eor	r22, r22
     208:	66 1f       	adc	r22, r22
     20a:	87 e0       	ldi	r24, 0x07	; 7
     20c:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     210:	61 e0       	ldi	r22, 0x01	; 1
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	89 e0       	ldi	r24, 0x09	; 9
     21c:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	8b e0       	ldi	r24, 0x0B	; 11
     224:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     228:	8f ec       	ldi	r24, 0xCF	; 207
     22a:	97 e0       	ldi	r25, 0x07	; 7
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_WriteData+0x52>
     230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_WriteData+0x58>
     232:	00 00       	nop
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	8b e0       	ldi	r24, 0x0B	; 11
     238:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     23c:	6c 2f       	mov	r22, r28
     23e:	61 70       	andi	r22, 0x01	; 1
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     246:	c1 fb       	bst	r28, 1
     248:	66 27       	eor	r22, r22
     24a:	60 f9       	bld	r22, 0
     24c:	85 e0       	ldi	r24, 0x05	; 5
     24e:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     252:	c2 fb       	bst	r28, 2
     254:	66 27       	eor	r22, r22
     256:	60 f9       	bld	r22, 0
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     25e:	c3 fb       	bst	r28, 3
     260:	66 27       	eor	r22, r22
     262:	60 f9       	bld	r22, 0
     264:	87 e0       	ldi	r24, 0x07	; 7
     266:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	88 e0       	ldi	r24, 0x08	; 8
     26e:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	89 e0       	ldi	r24, 0x09	; 9
     276:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	8b e0       	ldi	r24, 0x0B	; 11
     27e:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     282:	8f ec       	ldi	r24, 0xCF	; 207
     284:	97 e0       	ldi	r25, 0x07	; 7
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_WriteData+0xac>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_WriteData+0xb2>
     28c:	00 00       	nop
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	8b e0       	ldi	r24, 0x0B	; 11
     292:	0e 94 c9 03 	call	0x792	; 0x792 <DIO_Writepin>
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <LCD_GOTO>:
     29a:	88 23       	and	r24, r24
     29c:	29 f0       	breq	.+10     	; 0x2a8 <LCD_GOTO+0xe>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	31 f0       	breq	.+12     	; 0x2ae <LCD_GOTO+0x14>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <LCD_GOTO+0x18>
     2a8:	80 e8       	ldi	r24, 0x80	; 128
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <LCD_GOTO+0x18>
     2ae:	80 ec       	ldi	r24, 0xC0	; 192
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	60 31       	cpi	r22, 0x10	; 16
     2b4:	10 f4       	brcc	.+4      	; 0x2ba <LCD_GOTO+0x20>
     2b6:	86 0f       	add	r24, r22
     2b8:	91 1d       	adc	r25, r1
     2ba:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCmd>
     2be:	08 95       	ret

000002c0 <LCD_WriteNumber>:

/*----------------  Function used to Write Real Number  --------------------*/

void LCD_WriteNumber(float Number)
{
     2c0:	8f 92       	push	r8
     2c2:	9f 92       	push	r9
     2c4:	af 92       	push	r10
     2c6:	bf 92       	push	r11
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	60 97       	sbiw	r28, 0x10	; 16
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	4b 01       	movw	r8, r22
     2e4:	5c 01       	movw	r10, r24
	uint8_t i=0,arr[16];
	if(Number==0)
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	a9 01       	movw	r20, r18
     2ec:	0e 94 72 06 	call	0xce4	; 0xce4 <__cmpsf2>
     2f0:	81 11       	cpse	r24, r1
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_WriteNumber+0x3a>
	LCD_WriteData('0');
     2f4:	80 e3       	ldi	r24, 0x30	; 48
     2f6:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_WriteData>
	
	if (Number<0)
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	a9 01       	movw	r20, r18
     300:	c5 01       	movw	r24, r10
     302:	b4 01       	movw	r22, r8
     304:	0e 94 72 06 	call	0xce4	; 0xce4 <__cmpsf2>
     308:	88 23       	and	r24, r24
     30a:	3c f4       	brge	.+14     	; 0x31a <LCD_WriteNumber+0x5a>
	{
		Number=Number*-1;
     30c:	b7 fa       	bst	r11, 7
     30e:	b0 94       	com	r11
     310:	b7 f8       	bld	r11, 7
     312:	b0 94       	com	r11
		LCD_WriteData('-');
     314:	8d e2       	ldi	r24, 0x2D	; 45
     316:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_WriteData>
	}
	int int_num=Number;	// integer part
     31a:	c5 01       	movw	r24, r10
     31c:	b4 01       	movw	r22, r8
     31e:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     322:	7b 01       	movw	r14, r22
	float fra_num=Number-int_num; // fraction part
     324:	07 2e       	mov	r0, r23
     326:	00 0c       	add	r0, r0
     328:	88 0b       	sbc	r24, r24
     32a:	99 0b       	sbc	r25, r25
     32c:	0e 94 af 06 	call	0xd5e	; 0xd5e <__floatsisf>
     330:	9b 01       	movw	r18, r22
     332:	ac 01       	movw	r20, r24
     334:	c5 01       	movw	r24, r10
     336:	b4 01       	movw	r22, r8
     338:	0e 94 05 06 	call	0xc0a	; 0xc0a <__subsf3>
     33c:	4b 01       	movw	r8, r22
     33e:	5c 01       	movw	r10, r24

/*----------------  Function used to Write Real Number  --------------------*/

void LCD_WriteNumber(float Number)
{
	uint8_t i=0,arr[16];
     340:	10 e0       	ldi	r17, 0x00	; 0
		LCD_WriteData('-');
	}
	int int_num=Number;	// integer part
	float fra_num=Number-int_num; // fraction part
	
		while(int_num)
     342:	10 c0       	rjmp	.+32     	; 0x364 <LCD_WriteNumber+0xa4>
		{
			arr[i]=int_num%10 +'0';
     344:	c7 01       	movw	r24, r14
     346:	6a e0       	ldi	r22, 0x0A	; 10
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divmodhi4>
     34e:	e1 e0       	ldi	r30, 0x01	; 1
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	ec 0f       	add	r30, r28
     354:	fd 1f       	adc	r31, r29
     356:	e1 0f       	add	r30, r17
     358:	f1 1d       	adc	r31, r1
     35a:	80 5d       	subi	r24, 0xD0	; 208
     35c:	80 83       	st	Z, r24
			int_num/=10;
     35e:	e6 2e       	mov	r14, r22
     360:	f7 2e       	mov	r15, r23
			i++;
     362:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_WriteData('-');
	}
	int int_num=Number;	// integer part
	float fra_num=Number-int_num; // fraction part
	
		while(int_num)
     364:	e1 14       	cp	r14, r1
     366:	f1 04       	cpc	r15, r1
     368:	69 f7       	brne	.-38     	; 0x344 <LCD_WriteNumber+0x84>
     36a:	0d c0       	rjmp	.+26     	; 0x386 <LCD_WriteNumber+0xc6>
			i++;
		}
		// write array content (Number ) --> start writing from the biggest digit
		for(;i>0;i--)
		{
			LCD_WriteData(arr[i-1]);
     36c:	e1 2f       	mov	r30, r17
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	21 e0       	ldi	r18, 0x01	; 1
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	2c 0f       	add	r18, r28
     378:	3d 1f       	adc	r19, r29
     37a:	e2 0f       	add	r30, r18
     37c:	f3 1f       	adc	r31, r19
     37e:	80 81       	ld	r24, Z
     380:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_WriteData>
			arr[i]=int_num%10 +'0';
			int_num/=10;
			i++;
		}
		// write array content (Number ) --> start writing from the biggest digit
		for(;i>0;i--)
     384:	11 50       	subi	r17, 0x01	; 1
     386:	11 11       	cpse	r17, r1
     388:	f1 cf       	rjmp	.-30     	; 0x36c <LCD_WriteNumber+0xac>
		{
			LCD_WriteData(arr[i-1]);
		}
		if (fra_num!=0)
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	a9 01       	movw	r20, r18
     390:	c5 01       	movw	r24, r10
     392:	b4 01       	movw	r22, r8
     394:	0e 94 72 06 	call	0xce4	; 0xce4 <__cmpsf2>
     398:	88 23       	and	r24, r24
     39a:	09 f4       	brne	.+2      	; 0x39e <LCD_WriteNumber+0xde>
     39c:	4f c0       	rjmp	.+158    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		{
			LCD_WriteData('.');
     39e:	8e e2       	ldi	r24, 0x2E	; 46
     3a0:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_WriteData>
			i=0;
			uint16_t int_num1;
			int_num1=fra_num*1000;
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	4a e7       	ldi	r20, 0x7A	; 122
     3aa:	54 e4       	ldi	r21, 0x44	; 68
     3ac:	c5 01       	movw	r24, r10
     3ae:	b4 01       	movw	r22, r8
     3b0:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
     3b4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fixunssfsi>
     3b8:	ab 01       	movw	r20, r22
			while(int_num1)
     3ba:	2d c0       	rjmp	.+90     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				arr[i]=int_num1%10 +'0';
     3bc:	9a 01       	movw	r18, r20
     3be:	ad ec       	ldi	r26, 0xCD	; 205
     3c0:	bc ec       	ldi	r27, 0xCC	; 204
     3c2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__umulhisi3>
     3c6:	96 95       	lsr	r25
     3c8:	87 95       	ror	r24
     3ca:	96 95       	lsr	r25
     3cc:	87 95       	ror	r24
     3ce:	96 95       	lsr	r25
     3d0:	87 95       	ror	r24
     3d2:	9c 01       	movw	r18, r24
     3d4:	22 0f       	add	r18, r18
     3d6:	33 1f       	adc	r19, r19
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	82 0f       	add	r24, r18
     3e6:	93 1f       	adc	r25, r19
     3e8:	9a 01       	movw	r18, r20
     3ea:	28 1b       	sub	r18, r24
     3ec:	39 0b       	sbc	r19, r25
     3ee:	c9 01       	movw	r24, r18
     3f0:	e1 e0       	ldi	r30, 0x01	; 1
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ec 0f       	add	r30, r28
     3f6:	fd 1f       	adc	r31, r29
     3f8:	e1 0f       	add	r30, r17
     3fa:	f1 1d       	adc	r31, r1
     3fc:	80 5d       	subi	r24, 0xD0	; 208
     3fe:	80 83       	st	Z, r24
				int_num1/=10;
     400:	9a 01       	movw	r18, r20
     402:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__umulhisi3>
     406:	ac 01       	movw	r20, r24
     408:	56 95       	lsr	r21
     40a:	47 95       	ror	r20
     40c:	56 95       	lsr	r21
     40e:	47 95       	ror	r20
     410:	56 95       	lsr	r21
     412:	47 95       	ror	r20
				i++;
     414:	1f 5f       	subi	r17, 0xFF	; 255
		{
			LCD_WriteData('.');
			i=0;
			uint16_t int_num1;
			int_num1=fra_num*1000;
			while(int_num1)
     416:	41 15       	cp	r20, r1
     418:	51 05       	cpc	r21, r1
     41a:	81 f6       	brne	.-96     	; 0x3bc <LCD_WriteNumber+0xfc>
     41c:	0d c0       	rjmp	.+26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				i++;
			}
			// write array content (Number ) --> start writing from the biggest digit
			for(;i>0;i--)
			{
				LCD_WriteData(arr[i-1]);
     41e:	e1 2f       	mov	r30, r17
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	31 97       	sbiw	r30, 0x01	; 1
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	8c 0f       	add	r24, r28
     42a:	9d 1f       	adc	r25, r29
     42c:	e8 0f       	add	r30, r24
     42e:	f9 1f       	adc	r31, r25
     430:	80 81       	ld	r24, Z
     432:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_WriteData>
				arr[i]=int_num1%10 +'0';
				int_num1/=10;
				i++;
			}
			// write array content (Number ) --> start writing from the biggest digit
			for(;i>0;i--)
     436:	11 50       	subi	r17, 0x01	; 1
     438:	11 11       	cpse	r17, r1
     43a:	f1 cf       	rjmp	.-30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			{
				LCD_WriteData(arr[i-1]);
			}
		}	
}
     43c:	60 96       	adiw	r28, 0x10	; 16
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	bf 90       	pop	r11
     454:	af 90       	pop	r10
     456:	9f 90       	pop	r9
     458:	8f 90       	pop	r8
     45a:	08 95       	ret

0000045c <main>:
#include "Sensors/LM35.h"		
			/*-------------------------- The Main Function ----------------------------*/
			
int main(void)
{
	sei();
     45c:	78 94       	sei
	Init_Pins();
     45e:	0e 94 b9 03 	call	0x772	; 0x772 <Init_Pins>
	LCD_Init();
     462:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Init>
	ADC_Init(ADC_AVCC,ADC_SCALER_64_);
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	0e 94 4e 02 	call	0x49c	; 0x49c <ADC_Init>
	LCD_GOTO(0,0);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_GOTO>
	uint16_t x;
	while(1)
	{
		LCD_GOTO(1,0);
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_GOTO>
		x=ADC_ReadChannel(ADC0);
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 c2 02 	call	0x584	; 0x584 <ADC_ReadChannel>
		LCD_WriteNumber(x);
     484:	bc 01       	movw	r22, r24
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     48e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteNumber>
		LCD_GOTO(0,0);
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_GOTO>
     49a:	ed cf       	rjmp	.-38     	; 0x476 <main+0x1a>

0000049c <ADC_Init>:

/*------------------------- Function Definitions -----------------------------*/

void ADC_Init(ADC_VoltageReference reference , ADC_Scaler_Type scaler)
{
	switch(reference)
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	59 f0       	breq	.+22     	; 0x4b6 <ADC_Init+0x1a>
     4a0:	18 f0       	brcs	.+6      	; 0x4a8 <ADC_Init+0xc>
     4a2:	82 30       	cpi	r24, 0x02	; 2
     4a4:	79 f0       	breq	.+30     	; 0x4c4 <ADC_Init+0x28>
     4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <ADC_Init+0x34>
	{
		case ADC_AREF:
		CLEAR_BIT(ADMUX , REFS0);
     4a8:	87 b1       	in	r24, 0x07	; 7
     4aa:	8f 7b       	andi	r24, 0xBF	; 191
     4ac:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX , REFS1);
     4ae:	87 b1       	in	r24, 0x07	; 7
     4b0:	8f 77       	andi	r24, 0x7F	; 127
     4b2:	87 b9       	out	0x07, r24	; 7
		break;
     4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <ADC_Init+0x34>
		case ADC_AVCC:
		SET_BIT(ADMUX , REFS0);
     4b6:	87 b1       	in	r24, 0x07	; 7
     4b8:	80 64       	ori	r24, 0x40	; 64
     4ba:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX , REFS1);
     4bc:	87 b1       	in	r24, 0x07	; 7
     4be:	8f 77       	andi	r24, 0x7F	; 127
     4c0:	87 b9       	out	0x07, r24	; 7
		break;
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <ADC_Init+0x34>
		case ADC_2_56V:
		SET_BIT(ADMUX , REFS0);
     4c4:	87 b1       	in	r24, 0x07	; 7
     4c6:	80 64       	ori	r24, 0x40	; 64
     4c8:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX , REFS1);
     4ca:	87 b1       	in	r24, 0x07	; 7
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// prescaler selection
	
	ADCSRA &= 0xF8; // 0B11111000
     4d0:	86 b1       	in	r24, 0x06	; 6
     4d2:	88 7f       	andi	r24, 0xF8	; 248
     4d4:	86 b9       	out	0x06, r24	; 6
	switch(scaler)
     4d6:	86 2f       	mov	r24, r22
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	87 30       	cpi	r24, 0x07	; 7
     4dc:	91 05       	cpc	r25, r1
     4de:	08 f0       	brcs	.+2      	; 0x4e2 <ADC_Init+0x46>
     4e0:	4a c0       	rjmp	.+148    	; 0x576 <ADC_Init+0xda>
     4e2:	fc 01       	movw	r30, r24
     4e4:	e6 5d       	subi	r30, 0xD6	; 214
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__tablejump2__>
	{
		case ADC_SCALER_2:
		CLEAR_BIT(ADCSRA,ADPS0);
     4ec:	86 b1       	in	r24, 0x06	; 6
     4ee:	8e 7f       	andi	r24, 0xFE	; 254
     4f0:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
     4f2:	86 b1       	in	r24, 0x06	; 6
     4f4:	8d 7f       	andi	r24, 0xFD	; 253
     4f6:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS2);
     4f8:	86 b1       	in	r24, 0x06	; 6
     4fa:	8b 7f       	andi	r24, 0xFB	; 251
     4fc:	86 b9       	out	0x06, r24	; 6
		break;
     4fe:	3b c0       	rjmp	.+118    	; 0x576 <ADC_Init+0xda>
		case ADC_SCALER_4:
		CLEAR_BIT(ADCSRA,ADPS0);
     500:	86 b1       	in	r24, 0x06	; 6
     502:	8e 7f       	andi	r24, 0xFE	; 254
     504:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     506:	86 b1       	in	r24, 0x06	; 6
     508:	82 60       	ori	r24, 0x02	; 2
     50a:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS2);
     50c:	86 b1       	in	r24, 0x06	; 6
     50e:	8b 7f       	andi	r24, 0xFB	; 251
     510:	86 b9       	out	0x06, r24	; 6
		break;
     512:	31 c0       	rjmp	.+98     	; 0x576 <ADC_Init+0xda>
		case ADC_SCALER_8_:
		SET_BIT(ADCSRA,ADPS0);
     514:	86 b1       	in	r24, 0x06	; 6
     516:	81 60       	ori	r24, 0x01	; 1
     518:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     51a:	86 b1       	in	r24, 0x06	; 6
     51c:	82 60       	ori	r24, 0x02	; 2
     51e:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS2);
     520:	86 b1       	in	r24, 0x06	; 6
     522:	8b 7f       	andi	r24, 0xFB	; 251
     524:	86 b9       	out	0x06, r24	; 6
		break;
     526:	27 c0       	rjmp	.+78     	; 0x576 <ADC_Init+0xda>
		case ADC_SCALER_16:
		CLEAR_BIT(ADCSRA,ADPS0);
     528:	86 b1       	in	r24, 0x06	; 6
     52a:	8e 7f       	andi	r24, 0xFE	; 254
     52c:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
     52e:	86 b1       	in	r24, 0x06	; 6
     530:	8d 7f       	andi	r24, 0xFD	; 253
     532:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     534:	86 b1       	in	r24, 0x06	; 6
     536:	84 60       	ori	r24, 0x04	; 4
     538:	86 b9       	out	0x06, r24	; 6
		break;
     53a:	1d c0       	rjmp	.+58     	; 0x576 <ADC_Init+0xda>
		case ADC_SCALER_32:
		SET_BIT(ADCSRA,ADPS0);
     53c:	86 b1       	in	r24, 0x06	; 6
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	86 b9       	out	0x06, r24	; 6
		CLEAR_BIT(ADCSRA,ADPS1);
     542:	86 b1       	in	r24, 0x06	; 6
     544:	8d 7f       	andi	r24, 0xFD	; 253
     546:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     548:	86 b1       	in	r24, 0x06	; 6
     54a:	84 60       	ori	r24, 0x04	; 4
     54c:	86 b9       	out	0x06, r24	; 6
		break;
     54e:	13 c0       	rjmp	.+38     	; 0x576 <ADC_Init+0xda>
		case ADC_SCALER_64_:
		CLEAR_BIT(ADCSRA,ADPS0);
     550:	86 b1       	in	r24, 0x06	; 6
     552:	8e 7f       	andi	r24, 0xFE	; 254
     554:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     556:	86 b1       	in	r24, 0x06	; 6
     558:	82 60       	ori	r24, 0x02	; 2
     55a:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     55c:	86 b1       	in	r24, 0x06	; 6
     55e:	84 60       	ori	r24, 0x04	; 4
     560:	86 b9       	out	0x06, r24	; 6
		break;
     562:	09 c0       	rjmp	.+18     	; 0x576 <ADC_Init+0xda>
		case ADC_SCALER_128:
		SET_BIT(ADCSRA,ADPS0);
     564:	86 b1       	in	r24, 0x06	; 6
     566:	81 60       	ori	r24, 0x01	; 1
     568:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS1);
     56a:	86 b1       	in	r24, 0x06	; 6
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA,ADPS2);
     570:	86 b1       	in	r24, 0x06	; 6
     572:	84 60       	ori	r24, 0x04	; 4
     574:	86 b9       	out	0x06, r24	; 6
		break;
	}
	// read adjust right
	CLEAR_BIT(ADMUX , ADLAR);
     576:	87 b1       	in	r24, 0x07	; 7
     578:	8f 7d       	andi	r24, 0xDF	; 223
     57a:	87 b9       	out	0x07, r24	; 7
	
	// Enable
	SET_BIT(ADCSRA , ADEN);
     57c:	86 b1       	in	r24, 0x06	; 6
     57e:	80 68       	ori	r24, 0x80	; 128
     580:	86 b9       	out	0x06, r24	; 6
     582:	08 95       	ret

00000584 <ADC_ReadChannel>:
}

uint16_t ADC_ReadChannel(ADC_Channel channel)
{
	// channel selection
	ADMUX &= 0xE0; // 0B11100000
     584:	97 b1       	in	r25, 0x07	; 7
     586:	90 7e       	andi	r25, 0xE0	; 224
     588:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
     58a:	97 b1       	in	r25, 0x07	; 7
     58c:	89 2b       	or	r24, r25
     58e:	87 b9       	out	0x07, r24	; 7
	//  ADC Start Conversion
	SET_BIT(ADCSRA,ADSC);
     590:	86 b1       	in	r24, 0x06	; 6
     592:	80 64       	ori	r24, 0x40	; 64
     594:	86 b9       	out	0x06, r24	; 6
	// polling while conversion
	while(READ_BIT(ADCSRA,ADSC));
     596:	36 99       	sbic	0x06, 6	; 6
     598:	fe cf       	rjmp	.-4      	; 0x596 <ADC_ReadChannel+0x12>
	return ADC;
     59a:	84 b1       	in	r24, 0x04	; 4
     59c:	95 b1       	in	r25, 0x05	; 5
}
     59e:	08 95       	ret

000005a0 <DIO_Initpin>:
		{
			DIO_Initpin(i,status);
		}
		break;
	}
}
     5a0:	98 2f       	mov	r25, r24
     5a2:	96 95       	lsr	r25
     5a4:	96 95       	lsr	r25
     5a6:	96 95       	lsr	r25
     5a8:	87 70       	andi	r24, 0x07	; 7
     5aa:	61 30       	cpi	r22, 0x01	; 1
     5ac:	31 f0       	breq	.+12     	; 0x5ba <DIO_Initpin+0x1a>
     5ae:	08 f4       	brcc	.+2      	; 0x5b2 <DIO_Initpin+0x12>
     5b0:	54 c0       	rjmp	.+168    	; 0x65a <DIO_Initpin+0xba>
     5b2:	62 30       	cpi	r22, 0x02	; 2
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <DIO_Initpin+0x18>
     5b6:	a1 c0       	rjmp	.+322    	; 0x6fa <DIO_Initpin+0x15a>
     5b8:	08 95       	ret
     5ba:	91 30       	cpi	r25, 0x01	; 1
     5bc:	c1 f0       	breq	.+48     	; 0x5ee <DIO_Initpin+0x4e>
     5be:	28 f0       	brcs	.+10     	; 0x5ca <DIO_Initpin+0x2a>
     5c0:	92 30       	cpi	r25, 0x02	; 2
     5c2:	39 f1       	breq	.+78     	; 0x612 <DIO_Initpin+0x72>
     5c4:	93 30       	cpi	r25, 0x03	; 3
     5c6:	b9 f1       	breq	.+110    	; 0x636 <DIO_Initpin+0x96>
     5c8:	08 95       	ret
     5ca:	4a b3       	in	r20, 0x1a	; 26
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	b9 01       	movw	r22, r18
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_Initpin+0x38>
     5d4:	66 0f       	add	r22, r22
     5d6:	77 1f       	adc	r23, r23
     5d8:	8a 95       	dec	r24
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_Initpin+0x34>
     5dc:	cb 01       	movw	r24, r22
     5de:	96 2f       	mov	r25, r22
     5e0:	90 95       	com	r25
     5e2:	94 23       	and	r25, r20
     5e4:	9a bb       	out	0x1a, r25	; 26
     5e6:	9b b3       	in	r25, 0x1b	; 27
     5e8:	89 2b       	or	r24, r25
     5ea:	8b bb       	out	0x1b, r24	; 27
     5ec:	08 95       	ret
     5ee:	47 b3       	in	r20, 0x17	; 23
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	b9 01       	movw	r22, r18
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_Initpin+0x5c>
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	8a 95       	dec	r24
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_Initpin+0x58>
     600:	cb 01       	movw	r24, r22
     602:	96 2f       	mov	r25, r22
     604:	90 95       	com	r25
     606:	94 23       	and	r25, r20
     608:	97 bb       	out	0x17, r25	; 23
     60a:	98 b3       	in	r25, 0x18	; 24
     60c:	89 2b       	or	r24, r25
     60e:	88 bb       	out	0x18, r24	; 24
     610:	08 95       	ret
     612:	44 b3       	in	r20, 0x14	; 20
     614:	21 e0       	ldi	r18, 0x01	; 1
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	b9 01       	movw	r22, r18
     61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_Initpin+0x80>
     61c:	66 0f       	add	r22, r22
     61e:	77 1f       	adc	r23, r23
     620:	8a 95       	dec	r24
     622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_Initpin+0x7c>
     624:	cb 01       	movw	r24, r22
     626:	96 2f       	mov	r25, r22
     628:	90 95       	com	r25
     62a:	94 23       	and	r25, r20
     62c:	94 bb       	out	0x14, r25	; 20
     62e:	95 b3       	in	r25, 0x15	; 21
     630:	89 2b       	or	r24, r25
     632:	85 bb       	out	0x15, r24	; 21
     634:	08 95       	ret
     636:	41 b3       	in	r20, 0x11	; 17
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	b9 01       	movw	r22, r18
     63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_Initpin+0xa4>
     640:	66 0f       	add	r22, r22
     642:	77 1f       	adc	r23, r23
     644:	8a 95       	dec	r24
     646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_Initpin+0xa0>
     648:	cb 01       	movw	r24, r22
     64a:	96 2f       	mov	r25, r22
     64c:	90 95       	com	r25
     64e:	94 23       	and	r25, r20
     650:	91 bb       	out	0x11, r25	; 17
     652:	92 b3       	in	r25, 0x12	; 18
     654:	89 2b       	or	r24, r25
     656:	82 bb       	out	0x12, r24	; 18
     658:	08 95       	ret
     65a:	91 30       	cpi	r25, 0x01	; 1
     65c:	c1 f0       	breq	.+48     	; 0x68e <DIO_Initpin+0xee>
     65e:	28 f0       	brcs	.+10     	; 0x66a <DIO_Initpin+0xca>
     660:	92 30       	cpi	r25, 0x02	; 2
     662:	39 f1       	breq	.+78     	; 0x6b2 <DIO_Initpin+0x112>
     664:	93 30       	cpi	r25, 0x03	; 3
     666:	b9 f1       	breq	.+110    	; 0x6d6 <DIO_Initpin+0x136>
     668:	08 95       	ret
     66a:	4a b3       	in	r20, 0x1a	; 26
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	b9 01       	movw	r22, r18
     672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_Initpin+0xd8>
     674:	66 0f       	add	r22, r22
     676:	77 1f       	adc	r23, r23
     678:	8a 95       	dec	r24
     67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_Initpin+0xd4>
     67c:	cb 01       	movw	r24, r22
     67e:	80 95       	com	r24
     680:	94 2f       	mov	r25, r20
     682:	98 23       	and	r25, r24
     684:	9a bb       	out	0x1a, r25	; 26
     686:	9b b3       	in	r25, 0x1b	; 27
     688:	89 23       	and	r24, r25
     68a:	8b bb       	out	0x1b, r24	; 27
     68c:	08 95       	ret
     68e:	47 b3       	in	r20, 0x17	; 23
     690:	21 e0       	ldi	r18, 0x01	; 1
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	b9 01       	movw	r22, r18
     696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_Initpin+0xfc>
     698:	66 0f       	add	r22, r22
     69a:	77 1f       	adc	r23, r23
     69c:	8a 95       	dec	r24
     69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_Initpin+0xf8>
     6a0:	cb 01       	movw	r24, r22
     6a2:	80 95       	com	r24
     6a4:	94 2f       	mov	r25, r20
     6a6:	98 23       	and	r25, r24
     6a8:	97 bb       	out	0x17, r25	; 23
     6aa:	98 b3       	in	r25, 0x18	; 24
     6ac:	89 23       	and	r24, r25
     6ae:	88 bb       	out	0x18, r24	; 24
     6b0:	08 95       	ret
     6b2:	44 b3       	in	r20, 0x14	; 20
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	b9 01       	movw	r22, r18
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_Initpin+0x120>
     6bc:	66 0f       	add	r22, r22
     6be:	77 1f       	adc	r23, r23
     6c0:	8a 95       	dec	r24
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_Initpin+0x11c>
     6c4:	cb 01       	movw	r24, r22
     6c6:	80 95       	com	r24
     6c8:	94 2f       	mov	r25, r20
     6ca:	98 23       	and	r25, r24
     6cc:	94 bb       	out	0x14, r25	; 20
     6ce:	95 b3       	in	r25, 0x15	; 21
     6d0:	89 23       	and	r24, r25
     6d2:	85 bb       	out	0x15, r24	; 21
     6d4:	08 95       	ret
     6d6:	41 b3       	in	r20, 0x11	; 17
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	b9 01       	movw	r22, r18
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_Initpin+0x144>
     6e0:	66 0f       	add	r22, r22
     6e2:	77 1f       	adc	r23, r23
     6e4:	8a 95       	dec	r24
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_Initpin+0x140>
     6e8:	cb 01       	movw	r24, r22
     6ea:	80 95       	com	r24
     6ec:	94 2f       	mov	r25, r20
     6ee:	98 23       	and	r25, r24
     6f0:	91 bb       	out	0x11, r25	; 17
     6f2:	92 b3       	in	r25, 0x12	; 18
     6f4:	89 23       	and	r24, r25
     6f6:	82 bb       	out	0x12, r24	; 18
     6f8:	08 95       	ret
     6fa:	91 30       	cpi	r25, 0x01	; 1
     6fc:	99 f0       	breq	.+38     	; 0x724 <DIO_Initpin+0x184>
     6fe:	28 f0       	brcs	.+10     	; 0x70a <DIO_Initpin+0x16a>
     700:	92 30       	cpi	r25, 0x02	; 2
     702:	e9 f0       	breq	.+58     	; 0x73e <DIO_Initpin+0x19e>
     704:	93 30       	cpi	r25, 0x03	; 3
     706:	41 f1       	breq	.+80     	; 0x758 <DIO_Initpin+0x1b8>
     708:	08 95       	ret
     70a:	4a b3       	in	r20, 0x1a	; 26
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	b9 01       	movw	r22, r18
     712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_Initpin+0x178>
     714:	66 0f       	add	r22, r22
     716:	77 1f       	adc	r23, r23
     718:	8a 95       	dec	r24
     71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_Initpin+0x174>
     71c:	cb 01       	movw	r24, r22
     71e:	84 2b       	or	r24, r20
     720:	8a bb       	out	0x1a, r24	; 26
     722:	08 95       	ret
     724:	47 b3       	in	r20, 0x17	; 23
     726:	21 e0       	ldi	r18, 0x01	; 1
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	b9 01       	movw	r22, r18
     72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_Initpin+0x192>
     72e:	66 0f       	add	r22, r22
     730:	77 1f       	adc	r23, r23
     732:	8a 95       	dec	r24
     734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_Initpin+0x18e>
     736:	cb 01       	movw	r24, r22
     738:	84 2b       	or	r24, r20
     73a:	87 bb       	out	0x17, r24	; 23
     73c:	08 95       	ret
     73e:	44 b3       	in	r20, 0x14	; 20
     740:	21 e0       	ldi	r18, 0x01	; 1
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	b9 01       	movw	r22, r18
     746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_Initpin+0x1ac>
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	8a 95       	dec	r24
     74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_Initpin+0x1a8>
     750:	cb 01       	movw	r24, r22
     752:	84 2b       	or	r24, r20
     754:	84 bb       	out	0x14, r24	; 20
     756:	08 95       	ret
     758:	41 b3       	in	r20, 0x11	; 17
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	b9 01       	movw	r22, r18
     760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_Initpin+0x1c6>
     762:	66 0f       	add	r22, r22
     764:	77 1f       	adc	r23, r23
     766:	8a 95       	dec	r24
     768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_Initpin+0x1c2>
     76a:	cb 01       	movw	r24, r22
     76c:	84 2b       	or	r24, r20
     76e:	81 bb       	out	0x11, r24	; 17
     770:	08 95       	ret

00000772 <Init_Pins>:
     772:	cf 93       	push	r28
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	09 c0       	rjmp	.+18     	; 0x78a <Init_Pins+0x18>
     778:	ec 2f       	mov	r30, r28
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	e0 5a       	subi	r30, 0xA0	; 160
     77e:	ff 4f       	sbci	r31, 0xFF	; 255
     780:	60 81       	ld	r22, Z
     782:	8c 2f       	mov	r24, r28
     784:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <DIO_Initpin>
     788:	cf 5f       	subi	r28, 0xFF	; 255
     78a:	c0 32       	cpi	r28, 0x20	; 32
     78c:	a8 f3       	brcs	.-22     	; 0x778 <Init_Pins+0x6>
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
     792:	98 2f       	mov	r25, r24
     794:	96 95       	lsr	r25
     796:	96 95       	lsr	r25
     798:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
     79a:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
     79c:	61 30       	cpi	r22, 0x01	; 1
     79e:	e1 f5       	brne	.+120    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		
		switch(port){
     7a0:	91 30       	cpi	r25, 0x01	; 1
     7a2:	99 f0       	breq	.+38     	; 0x7ca <DIO_Writepin+0x38>
     7a4:	28 f0       	brcs	.+10     	; 0x7b0 <DIO_Writepin+0x1e>
     7a6:	92 30       	cpi	r25, 0x02	; 2
     7a8:	e9 f0       	breq	.+58     	; 0x7e4 <DIO_Writepin+0x52>
     7aa:	93 30       	cpi	r25, 0x03	; 3
     7ac:	41 f1       	breq	.+80     	; 0x7fe <DIO_Writepin+0x6c>
     7ae:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
     7b0:	4b b3       	in	r20, 0x1b	; 27
     7b2:	21 e0       	ldi	r18, 0x01	; 1
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	b9 01       	movw	r22, r18
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_Writepin+0x2c>
     7ba:	66 0f       	add	r22, r22
     7bc:	77 1f       	adc	r23, r23
     7be:	8a 95       	dec	r24
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_Writepin+0x28>
     7c2:	cb 01       	movw	r24, r22
     7c4:	84 2b       	or	r24, r20
     7c6:	8b bb       	out	0x1b, r24	; 27
			break;
     7c8:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     7ca:	48 b3       	in	r20, 0x18	; 24
     7cc:	21 e0       	ldi	r18, 0x01	; 1
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	b9 01       	movw	r22, r18
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_Writepin+0x46>
     7d4:	66 0f       	add	r22, r22
     7d6:	77 1f       	adc	r23, r23
     7d8:	8a 95       	dec	r24
     7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_Writepin+0x42>
     7dc:	cb 01       	movw	r24, r22
     7de:	84 2b       	or	r24, r20
     7e0:	88 bb       	out	0x18, r24	; 24
			break;
     7e2:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     7e4:	45 b3       	in	r20, 0x15	; 21
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	b9 01       	movw	r22, r18
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_Writepin+0x60>
     7ee:	66 0f       	add	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	8a 95       	dec	r24
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_Writepin+0x5c>
     7f6:	cb 01       	movw	r24, r22
     7f8:	84 2b       	or	r24, r20
     7fa:	85 bb       	out	0x15, r24	; 21
			break;
     7fc:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     7fe:	42 b3       	in	r20, 0x12	; 18
     800:	21 e0       	ldi	r18, 0x01	; 1
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	b9 01       	movw	r22, r18
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	66 0f       	add	r22, r22
     80a:	77 1f       	adc	r23, r23
     80c:	8a 95       	dec	r24
     80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     810:	cb 01       	movw	r24, r22
     812:	84 2b       	or	r24, r20
     814:	82 bb       	out	0x12, r24	; 18
			break;
     816:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
     818:	61 11       	cpse	r22, r1
     81a:	3f c0       	rjmp	.+126    	; 0x89a <__stack+0x3b>
		switch(port){
     81c:	91 30       	cpi	r25, 0x01	; 1
     81e:	a1 f0       	breq	.+40     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     820:	28 f0       	brcs	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     822:	92 30       	cpi	r25, 0x02	; 2
     824:	f9 f0       	breq	.+62     	; 0x864 <__stack+0x5>
     826:	93 30       	cpi	r25, 0x03	; 3
     828:	59 f1       	breq	.+86     	; 0x880 <__stack+0x21>
     82a:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
     82c:	4b b3       	in	r20, 0x1b	; 27
     82e:	21 e0       	ldi	r18, 0x01	; 1
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	b9 01       	movw	r22, r18
     834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     836:	66 0f       	add	r22, r22
     838:	77 1f       	adc	r23, r23
     83a:	8a 95       	dec	r24
     83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83e:	cb 01       	movw	r24, r22
     840:	80 95       	com	r24
     842:	84 23       	and	r24, r20
     844:	8b bb       	out	0x1b, r24	; 27
			break;
     846:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
     848:	48 b3       	in	r20, 0x18	; 24
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	b9 01       	movw	r22, r18
     850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     852:	66 0f       	add	r22, r22
     854:	77 1f       	adc	r23, r23
     856:	8a 95       	dec	r24
     858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     85a:	cb 01       	movw	r24, r22
     85c:	80 95       	com	r24
     85e:	84 23       	and	r24, r20
     860:	88 bb       	out	0x18, r24	; 24
			break;
     862:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
     864:	45 b3       	in	r20, 0x15	; 21
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	b9 01       	movw	r22, r18
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	66 0f       	add	r22, r22
     870:	77 1f       	adc	r23, r23
     872:	8a 95       	dec	r24
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	cb 01       	movw	r24, r22
     878:	80 95       	com	r24
     87a:	84 23       	and	r24, r20
     87c:	85 bb       	out	0x15, r24	; 21
			break;
     87e:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
     880:	42 b3       	in	r20, 0x12	; 18
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	b9 01       	movw	r22, r18
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
     88a:	66 0f       	add	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
     892:	cb 01       	movw	r24, r22
     894:	80 95       	com	r24
     896:	84 23       	and	r24, r20
     898:	82 bb       	out	0x12, r24	; 18
     89a:	08 95       	ret

0000089c <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
     89c:	1f 92       	push	r1
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
     8be:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Fptr_EXI0>
     8c2:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Fptr_EXI0+0x1>
     8c6:	30 97       	sbiw	r30, 0x00	; 0
     8c8:	09 f0       	breq	.+2      	; 0x8cc <__vector_1+0x30>
		Fptr_EXI0();
     8ca:	09 95       	icall
	}
}
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	7f 91       	pop	r23
     8da:	6f 91       	pop	r22
     8dc:	5f 91       	pop	r21
     8de:	4f 91       	pop	r20
     8e0:	3f 91       	pop	r19
     8e2:	2f 91       	pop	r18
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_2>:

/*-------------  (ISR of EXI1) ----------------*/

ISR(INT1_vect){
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
     910:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <Fptr_EXI1>
     914:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <Fptr_EXI1+0x1>
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_2+0x30>
		Fptr_EXI1();
     91c:	09 95       	icall
	}
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	1f 90       	pop	r1
     93e:	18 95       	reti

00000940 <__vector_3>:

/*-------------  (ISR of EXI2) ----------------*/

ISR(INT2_vect){
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	2f 93       	push	r18
     94c:	3f 93       	push	r19
     94e:	4f 93       	push	r20
     950:	5f 93       	push	r21
     952:	6f 93       	push	r22
     954:	7f 93       	push	r23
     956:	8f 93       	push	r24
     958:	9f 93       	push	r25
     95a:	af 93       	push	r26
     95c:	bf 93       	push	r27
     95e:	ef 93       	push	r30
     960:	ff 93       	push	r31
	
	if(Fptr_EXI2!=NULL_ptr){
     962:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
     966:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
     96a:	30 97       	sbiw	r30, 0x00	; 0
     96c:	09 f0       	breq	.+2      	; 0x970 <__vector_3+0x30>
		Fptr_EXI2();
     96e:	09 95       	icall
	}
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <__vector_11>:
}
			/********************************* Timer 0 ISR functions ******************************/


	ISR(TIMER0_OVF_vect)
	{
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
		if(Timer0_OVF_Fptr!=NULLptr)
     9b4:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Timer0_OVF_Fptr>
     9b8:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Timer0_OVF_Fptr+0x1>
     9bc:	30 97       	sbiw	r30, 0x00	; 0
     9be:	09 f0       	breq	.+2      	; 0x9c2 <__vector_11+0x30>
		{
			Timer0_OVF_Fptr();
     9c0:	09 95       	icall
		}
	}
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <__vector_10>:

	ISR(TIMER0_COMP_vect){
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
		Timer0_OC0_Fptr();
     a06:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Timer0_OC0_Fptr>
     a0a:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Timer0_OC0_Fptr+0x1>
     a0e:	09 95       	icall
	}
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER1_OVF_vect)
{
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
	Timer1_OVF_Fptr();
     a54:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <Timer1_OVF_Fptr>
     a58:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <Timer1_OVF_Fptr+0x1>
     a5c:	09 95       	icall
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
	Timer1_OCA_Fptr();
     aa2:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Timer1_OCA_Fptr>
     aa6:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Timer1_OCA_Fptr+0x1>
     aaa:	09 95       	icall
}
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
	Timer1_OCB_Fptr();
     af0:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Timer1_OCB_Fptr>
     af4:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Timer1_OCB_Fptr+0x1>
     af8:	09 95       	icall
}
     afa:	ff 91       	pop	r31
     afc:	ef 91       	pop	r30
     afe:	bf 91       	pop	r27
     b00:	af 91       	pop	r26
     b02:	9f 91       	pop	r25
     b04:	8f 91       	pop	r24
     b06:	7f 91       	pop	r23
     b08:	6f 91       	pop	r22
     b0a:	5f 91       	pop	r21
     b0c:	4f 91       	pop	r20
     b0e:	3f 91       	pop	r19
     b10:	2f 91       	pop	r18
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	2f 93       	push	r18
     b28:	3f 93       	push	r19
     b2a:	4f 93       	push	r20
     b2c:	5f 93       	push	r21
     b2e:	6f 93       	push	r22
     b30:	7f 93       	push	r23
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
     b36:	af 93       	push	r26
     b38:	bf 93       	push	r27
     b3a:	ef 93       	push	r30
     b3c:	ff 93       	push	r31
	Timer1_ICU_Fptr();
     b3e:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Timer1_ICU_Fptr>
     b42:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <Timer1_ICU_Fptr+0x1>
     b46:	09 95       	icall
}
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <__vector_5>:
	}

	/********************************* Timer 2 ISR functions ******************************/

	ISR(TIMER2_OVF_vect)
	{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
		if(Timer2_OVF_Fptr!=NULLptr)
     b8c:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <Timer2_OVF_Fptr>
     b90:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <Timer2_OVF_Fptr+0x1>
     b94:	30 97       	sbiw	r30, 0x00	; 0
     b96:	09 f0       	breq	.+2      	; 0xb9a <__vector_5+0x30>
		{
			Timer2_OVF_Fptr();
     b98:	09 95       	icall
		}
	}
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	bf 91       	pop	r27
     ba0:	af 91       	pop	r26
     ba2:	9f 91       	pop	r25
     ba4:	8f 91       	pop	r24
     ba6:	7f 91       	pop	r23
     ba8:	6f 91       	pop	r22
     baa:	5f 91       	pop	r21
     bac:	4f 91       	pop	r20
     bae:	3f 91       	pop	r19
     bb0:	2f 91       	pop	r18
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_4>:

	ISR(TIMER2_COMP_vect){
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
		Timer2_OC2_Fptr();
     bde:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <Timer2_OC2_Fptr>
     be2:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <Timer2_OC2_Fptr+0x1>
     be6:	09 95       	icall
	}
     be8:	ff 91       	pop	r31
     bea:	ef 91       	pop	r30
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
     bf2:	8f 91       	pop	r24
     bf4:	7f 91       	pop	r23
     bf6:	6f 91       	pop	r22
     bf8:	5f 91       	pop	r21
     bfa:	4f 91       	pop	r20
     bfc:	3f 91       	pop	r19
     bfe:	2f 91       	pop	r18
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <__subsf3>:
     c0a:	50 58       	subi	r21, 0x80	; 128

00000c0c <__addsf3>:
     c0c:	bb 27       	eor	r27, r27
     c0e:	aa 27       	eor	r26, r26
     c10:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__addsf3x>
     c14:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>
     c18:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscA>
     c1c:	38 f0       	brcs	.+14     	; 0xc2c <__addsf3+0x20>
     c1e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_pscB>
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__addsf3+0x20>
     c24:	39 f4       	brne	.+14     	; 0xc34 <__addsf3+0x28>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	19 f4       	brne	.+6      	; 0xc30 <__addsf3+0x24>
     c2a:	26 f4       	brtc	.+8      	; 0xc34 <__addsf3+0x28>
     c2c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_nan>
     c30:	0e f4       	brtc	.+2      	; 0xc34 <__addsf3+0x28>
     c32:	e0 95       	com	r30
     c34:	e7 fb       	bst	r30, 7
     c36:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>

00000c3a <__addsf3x>:
     c3a:	e9 2f       	mov	r30, r25
     c3c:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_split3>
     c40:	58 f3       	brcs	.-42     	; 0xc18 <__addsf3+0xc>
     c42:	ba 17       	cp	r27, r26
     c44:	62 07       	cpc	r22, r18
     c46:	73 07       	cpc	r23, r19
     c48:	84 07       	cpc	r24, r20
     c4a:	95 07       	cpc	r25, r21
     c4c:	20 f0       	brcs	.+8      	; 0xc56 <__addsf3x+0x1c>
     c4e:	79 f4       	brne	.+30     	; 0xc6e <__addsf3x+0x34>
     c50:	a6 f5       	brtc	.+104    	; 0xcba <__addsf3x+0x80>
     c52:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_zero>
     c56:	0e f4       	brtc	.+2      	; 0xc5a <__addsf3x+0x20>
     c58:	e0 95       	com	r30
     c5a:	0b 2e       	mov	r0, r27
     c5c:	ba 2f       	mov	r27, r26
     c5e:	a0 2d       	mov	r26, r0
     c60:	0b 01       	movw	r0, r22
     c62:	b9 01       	movw	r22, r18
     c64:	90 01       	movw	r18, r0
     c66:	0c 01       	movw	r0, r24
     c68:	ca 01       	movw	r24, r20
     c6a:	a0 01       	movw	r20, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	ff 27       	eor	r31, r31
     c70:	59 1b       	sub	r21, r25
     c72:	99 f0       	breq	.+38     	; 0xc9a <__addsf3x+0x60>
     c74:	59 3f       	cpi	r21, 0xF9	; 249
     c76:	50 f4       	brcc	.+20     	; 0xc8c <__addsf3x+0x52>
     c78:	50 3e       	cpi	r21, 0xE0	; 224
     c7a:	68 f1       	brcs	.+90     	; 0xcd6 <__addsf3x+0x9c>
     c7c:	1a 16       	cp	r1, r26
     c7e:	f0 40       	sbci	r31, 0x00	; 0
     c80:	a2 2f       	mov	r26, r18
     c82:	23 2f       	mov	r18, r19
     c84:	34 2f       	mov	r19, r20
     c86:	44 27       	eor	r20, r20
     c88:	58 5f       	subi	r21, 0xF8	; 248
     c8a:	f3 cf       	rjmp	.-26     	; 0xc72 <__addsf3x+0x38>
     c8c:	46 95       	lsr	r20
     c8e:	37 95       	ror	r19
     c90:	27 95       	ror	r18
     c92:	a7 95       	ror	r26
     c94:	f0 40       	sbci	r31, 0x00	; 0
     c96:	53 95       	inc	r21
     c98:	c9 f7       	brne	.-14     	; 0xc8c <__addsf3x+0x52>
     c9a:	7e f4       	brtc	.+30     	; 0xcba <__addsf3x+0x80>
     c9c:	1f 16       	cp	r1, r31
     c9e:	ba 0b       	sbc	r27, r26
     ca0:	62 0b       	sbc	r22, r18
     ca2:	73 0b       	sbc	r23, r19
     ca4:	84 0b       	sbc	r24, r20
     ca6:	ba f0       	brmi	.+46     	; 0xcd6 <__addsf3x+0x9c>
     ca8:	91 50       	subi	r25, 0x01	; 1
     caa:	a1 f0       	breq	.+40     	; 0xcd4 <__addsf3x+0x9a>
     cac:	ff 0f       	add	r31, r31
     cae:	bb 1f       	adc	r27, r27
     cb0:	66 1f       	adc	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	c2 f7       	brpl	.-16     	; 0xca8 <__addsf3x+0x6e>
     cb8:	0e c0       	rjmp	.+28     	; 0xcd6 <__addsf3x+0x9c>
     cba:	ba 0f       	add	r27, r26
     cbc:	62 1f       	adc	r22, r18
     cbe:	73 1f       	adc	r23, r19
     cc0:	84 1f       	adc	r24, r20
     cc2:	48 f4       	brcc	.+18     	; 0xcd6 <__addsf3x+0x9c>
     cc4:	87 95       	ror	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	b7 95       	ror	r27
     ccc:	f7 95       	ror	r31
     cce:	9e 3f       	cpi	r25, 0xFE	; 254
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__addsf3x+0x9a>
     cd2:	b0 cf       	rjmp	.-160    	; 0xc34 <__addsf3+0x28>
     cd4:	93 95       	inc	r25
     cd6:	88 0f       	add	r24, r24
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <__addsf3x+0xa2>
     cda:	99 27       	eor	r25, r25
     cdc:	ee 0f       	add	r30, r30
     cde:	97 95       	ror	r25
     ce0:	87 95       	ror	r24
     ce2:	08 95       	ret

00000ce4 <__cmpsf2>:
     ce4:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_cmp>
     ce8:	08 f4       	brcc	.+2      	; 0xcec <__cmpsf2+0x8>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	08 95       	ret

00000cee <__fixsfsi>:
     cee:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fixunssfsi>
     cf2:	68 94       	set
     cf4:	b1 11       	cpse	r27, r1
     cf6:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>
     cfa:	08 95       	ret

00000cfc <__fixunssfsi>:
     cfc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_splitA>
     d00:	88 f0       	brcs	.+34     	; 0xd24 <__fixunssfsi+0x28>
     d02:	9f 57       	subi	r25, 0x7F	; 127
     d04:	98 f0       	brcs	.+38     	; 0xd2c <__fixunssfsi+0x30>
     d06:	b9 2f       	mov	r27, r25
     d08:	99 27       	eor	r25, r25
     d0a:	b7 51       	subi	r27, 0x17	; 23
     d0c:	b0 f0       	brcs	.+44     	; 0xd3a <__fixunssfsi+0x3e>
     d0e:	e1 f0       	breq	.+56     	; 0xd48 <__fixunssfsi+0x4c>
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	1a f0       	brmi	.+6      	; 0xd20 <__fixunssfsi+0x24>
     d1a:	ba 95       	dec	r27
     d1c:	c9 f7       	brne	.-14     	; 0xd10 <__fixunssfsi+0x14>
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <__fixunssfsi+0x4c>
     d20:	b1 30       	cpi	r27, 0x01	; 1
     d22:	91 f0       	breq	.+36     	; 0xd48 <__fixunssfsi+0x4c>
     d24:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fp_zero>
     d28:	b1 e0       	ldi	r27, 0x01	; 1
     d2a:	08 95       	ret
     d2c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_zero>
     d30:	67 2f       	mov	r22, r23
     d32:	78 2f       	mov	r23, r24
     d34:	88 27       	eor	r24, r24
     d36:	b8 5f       	subi	r27, 0xF8	; 248
     d38:	39 f0       	breq	.+14     	; 0xd48 <__fixunssfsi+0x4c>
     d3a:	b9 3f       	cpi	r27, 0xF9	; 249
     d3c:	cc f3       	brlt	.-14     	; 0xd30 <__fixunssfsi+0x34>
     d3e:	86 95       	lsr	r24
     d40:	77 95       	ror	r23
     d42:	67 95       	ror	r22
     d44:	b3 95       	inc	r27
     d46:	d9 f7       	brne	.-10     	; 0xd3e <__fixunssfsi+0x42>
     d48:	3e f4       	brtc	.+14     	; 0xd58 <__fixunssfsi+0x5c>
     d4a:	90 95       	com	r25
     d4c:	80 95       	com	r24
     d4e:	70 95       	com	r23
     d50:	61 95       	neg	r22
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	08 95       	ret

00000d5a <__floatunsisf>:
     d5a:	e8 94       	clt
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <__floatsisf+0x12>

00000d5e <__floatsisf>:
     d5e:	97 fb       	bst	r25, 7
     d60:	3e f4       	brtc	.+14     	; 0xd70 <__floatsisf+0x12>
     d62:	90 95       	com	r25
     d64:	80 95       	com	r24
     d66:	70 95       	com	r23
     d68:	61 95       	neg	r22
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	99 23       	and	r25, r25
     d72:	a9 f0       	breq	.+42     	; 0xd9e <__floatsisf+0x40>
     d74:	f9 2f       	mov	r31, r25
     d76:	96 e9       	ldi	r25, 0x96	; 150
     d78:	bb 27       	eor	r27, r27
     d7a:	93 95       	inc	r25
     d7c:	f6 95       	lsr	r31
     d7e:	87 95       	ror	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f1 11       	cpse	r31, r1
     d88:	f8 cf       	rjmp	.-16     	; 0xd7a <__floatsisf+0x1c>
     d8a:	fa f4       	brpl	.+62     	; 0xdca <__floatsisf+0x6c>
     d8c:	bb 0f       	add	r27, r27
     d8e:	11 f4       	brne	.+4      	; 0xd94 <__floatsisf+0x36>
     d90:	60 ff       	sbrs	r22, 0
     d92:	1b c0       	rjmp	.+54     	; 0xdca <__floatsisf+0x6c>
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <__floatsisf+0x6c>
     d9e:	88 23       	and	r24, r24
     da0:	11 f0       	breq	.+4      	; 0xda6 <__floatsisf+0x48>
     da2:	96 e9       	ldi	r25, 0x96	; 150
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <__floatsisf+0x6a>
     da6:	77 23       	and	r23, r23
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__floatsisf+0x54>
     daa:	9e e8       	ldi	r25, 0x8E	; 142
     dac:	87 2f       	mov	r24, r23
     dae:	76 2f       	mov	r23, r22
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <__floatsisf+0x5e>
     db2:	66 23       	and	r22, r22
     db4:	71 f0       	breq	.+28     	; 0xdd2 <__floatsisf+0x74>
     db6:	96 e8       	ldi	r25, 0x86	; 134
     db8:	86 2f       	mov	r24, r22
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	2a f0       	brmi	.+10     	; 0xdca <__floatsisf+0x6c>
     dc0:	9a 95       	dec	r25
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	da f7       	brpl	.-10     	; 0xdc0 <__floatsisf+0x62>
     dca:	88 0f       	add	r24, r24
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	97 f9       	bld	r25, 7
     dd2:	08 95       	ret

00000dd4 <__fp_cmp>:
     dd4:	99 0f       	add	r25, r25
     dd6:	00 08       	sbc	r0, r0
     dd8:	55 0f       	add	r21, r21
     dda:	aa 0b       	sbc	r26, r26
     ddc:	e0 e8       	ldi	r30, 0x80	; 128
     dde:	fe ef       	ldi	r31, 0xFE	; 254
     de0:	16 16       	cp	r1, r22
     de2:	17 06       	cpc	r1, r23
     de4:	e8 07       	cpc	r30, r24
     de6:	f9 07       	cpc	r31, r25
     de8:	c0 f0       	brcs	.+48     	; 0xe1a <__fp_cmp+0x46>
     dea:	12 16       	cp	r1, r18
     dec:	13 06       	cpc	r1, r19
     dee:	e4 07       	cpc	r30, r20
     df0:	f5 07       	cpc	r31, r21
     df2:	98 f0       	brcs	.+38     	; 0xe1a <__fp_cmp+0x46>
     df4:	62 1b       	sub	r22, r18
     df6:	73 0b       	sbc	r23, r19
     df8:	84 0b       	sbc	r24, r20
     dfa:	95 0b       	sbc	r25, r21
     dfc:	39 f4       	brne	.+14     	; 0xe0c <__fp_cmp+0x38>
     dfe:	0a 26       	eor	r0, r26
     e00:	61 f0       	breq	.+24     	; 0xe1a <__fp_cmp+0x46>
     e02:	23 2b       	or	r18, r19
     e04:	24 2b       	or	r18, r20
     e06:	25 2b       	or	r18, r21
     e08:	21 f4       	brne	.+8      	; 0xe12 <__fp_cmp+0x3e>
     e0a:	08 95       	ret
     e0c:	0a 26       	eor	r0, r26
     e0e:	09 f4       	brne	.+2      	; 0xe12 <__fp_cmp+0x3e>
     e10:	a1 40       	sbci	r26, 0x01	; 1
     e12:	a6 95       	lsr	r26
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	81 1d       	adc	r24, r1
     e18:	81 1d       	adc	r24, r1
     e1a:	08 95       	ret

00000e1c <__fp_inf>:
     e1c:	97 f9       	bld	r25, 7
     e1e:	9f 67       	ori	r25, 0x7F	; 127
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	08 95       	ret

00000e28 <__fp_nan>:
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	80 ec       	ldi	r24, 0xC0	; 192
     e2c:	08 95       	ret

00000e2e <__fp_pscA>:
     e2e:	00 24       	eor	r0, r0
     e30:	0a 94       	dec	r0
     e32:	16 16       	cp	r1, r22
     e34:	17 06       	cpc	r1, r23
     e36:	18 06       	cpc	r1, r24
     e38:	09 06       	cpc	r0, r25
     e3a:	08 95       	ret

00000e3c <__fp_pscB>:
     e3c:	00 24       	eor	r0, r0
     e3e:	0a 94       	dec	r0
     e40:	12 16       	cp	r1, r18
     e42:	13 06       	cpc	r1, r19
     e44:	14 06       	cpc	r1, r20
     e46:	05 06       	cpc	r0, r21
     e48:	08 95       	ret

00000e4a <__fp_round>:
     e4a:	09 2e       	mov	r0, r25
     e4c:	03 94       	inc	r0
     e4e:	00 0c       	add	r0, r0
     e50:	11 f4       	brne	.+4      	; 0xe56 <__fp_round+0xc>
     e52:	88 23       	and	r24, r24
     e54:	52 f0       	brmi	.+20     	; 0xe6a <__fp_round+0x20>
     e56:	bb 0f       	add	r27, r27
     e58:	40 f4       	brcc	.+16     	; 0xe6a <__fp_round+0x20>
     e5a:	bf 2b       	or	r27, r31
     e5c:	11 f4       	brne	.+4      	; 0xe62 <__fp_round+0x18>
     e5e:	60 ff       	sbrs	r22, 0
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <__fp_round+0x20>
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	8f 4f       	sbci	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	08 95       	ret

00000e6c <__fp_split3>:
     e6c:	57 fd       	sbrc	r21, 7
     e6e:	90 58       	subi	r25, 0x80	; 128
     e70:	44 0f       	add	r20, r20
     e72:	55 1f       	adc	r21, r21
     e74:	59 f0       	breq	.+22     	; 0xe8c <__fp_splitA+0x10>
     e76:	5f 3f       	cpi	r21, 0xFF	; 255
     e78:	71 f0       	breq	.+28     	; 0xe96 <__fp_splitA+0x1a>
     e7a:	47 95       	ror	r20

00000e7c <__fp_splitA>:
     e7c:	88 0f       	add	r24, r24
     e7e:	97 fb       	bst	r25, 7
     e80:	99 1f       	adc	r25, r25
     e82:	61 f0       	breq	.+24     	; 0xe9c <__fp_splitA+0x20>
     e84:	9f 3f       	cpi	r25, 0xFF	; 255
     e86:	79 f0       	breq	.+30     	; 0xea6 <__fp_splitA+0x2a>
     e88:	87 95       	ror	r24
     e8a:	08 95       	ret
     e8c:	12 16       	cp	r1, r18
     e8e:	13 06       	cpc	r1, r19
     e90:	14 06       	cpc	r1, r20
     e92:	55 1f       	adc	r21, r21
     e94:	f2 cf       	rjmp	.-28     	; 0xe7a <__fp_split3+0xe>
     e96:	46 95       	lsr	r20
     e98:	f1 df       	rcall	.-30     	; 0xe7c <__fp_splitA>
     e9a:	08 c0       	rjmp	.+16     	; 0xeac <__fp_splitA+0x30>
     e9c:	16 16       	cp	r1, r22
     e9e:	17 06       	cpc	r1, r23
     ea0:	18 06       	cpc	r1, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	f1 cf       	rjmp	.-30     	; 0xe88 <__fp_splitA+0xc>
     ea6:	86 95       	lsr	r24
     ea8:	71 05       	cpc	r23, r1
     eaa:	61 05       	cpc	r22, r1
     eac:	08 94       	sec
     eae:	08 95       	ret

00000eb0 <__fp_zero>:
     eb0:	e8 94       	clt

00000eb2 <__fp_szero>:
     eb2:	bb 27       	eor	r27, r27
     eb4:	66 27       	eor	r22, r22
     eb6:	77 27       	eor	r23, r23
     eb8:	cb 01       	movw	r24, r22
     eba:	97 f9       	bld	r25, 7
     ebc:	08 95       	ret

00000ebe <__mulsf3>:
     ebe:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3x>
     ec2:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>
     ec6:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscA>
     eca:	38 f0       	brcs	.+14     	; 0xeda <__mulsf3+0x1c>
     ecc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_pscB>
     ed0:	20 f0       	brcs	.+8      	; 0xeda <__mulsf3+0x1c>
     ed2:	95 23       	and	r25, r21
     ed4:	11 f0       	breq	.+4      	; 0xeda <__mulsf3+0x1c>
     ed6:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
     eda:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_nan>
     ede:	11 24       	eor	r1, r1
     ee0:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>

00000ee4 <__mulsf3x>:
     ee4:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_split3>
     ee8:	70 f3       	brcs	.-36     	; 0xec6 <__mulsf3+0x8>

00000eea <__mulsf3_pse>:
     eea:	95 9f       	mul	r25, r21
     eec:	c1 f3       	breq	.-16     	; 0xede <__mulsf3+0x20>
     eee:	95 0f       	add	r25, r21
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	55 1f       	adc	r21, r21
     ef4:	62 9f       	mul	r22, r18
     ef6:	f0 01       	movw	r30, r0
     ef8:	72 9f       	mul	r23, r18
     efa:	bb 27       	eor	r27, r27
     efc:	f0 0d       	add	r31, r0
     efe:	b1 1d       	adc	r27, r1
     f00:	63 9f       	mul	r22, r19
     f02:	aa 27       	eor	r26, r26
     f04:	f0 0d       	add	r31, r0
     f06:	b1 1d       	adc	r27, r1
     f08:	aa 1f       	adc	r26, r26
     f0a:	64 9f       	mul	r22, r20
     f0c:	66 27       	eor	r22, r22
     f0e:	b0 0d       	add	r27, r0
     f10:	a1 1d       	adc	r26, r1
     f12:	66 1f       	adc	r22, r22
     f14:	82 9f       	mul	r24, r18
     f16:	22 27       	eor	r18, r18
     f18:	b0 0d       	add	r27, r0
     f1a:	a1 1d       	adc	r26, r1
     f1c:	62 1f       	adc	r22, r18
     f1e:	73 9f       	mul	r23, r19
     f20:	b0 0d       	add	r27, r0
     f22:	a1 1d       	adc	r26, r1
     f24:	62 1f       	adc	r22, r18
     f26:	83 9f       	mul	r24, r19
     f28:	a0 0d       	add	r26, r0
     f2a:	61 1d       	adc	r22, r1
     f2c:	22 1f       	adc	r18, r18
     f2e:	74 9f       	mul	r23, r20
     f30:	33 27       	eor	r19, r19
     f32:	a0 0d       	add	r26, r0
     f34:	61 1d       	adc	r22, r1
     f36:	23 1f       	adc	r18, r19
     f38:	84 9f       	mul	r24, r20
     f3a:	60 0d       	add	r22, r0
     f3c:	21 1d       	adc	r18, r1
     f3e:	82 2f       	mov	r24, r18
     f40:	76 2f       	mov	r23, r22
     f42:	6a 2f       	mov	r22, r26
     f44:	11 24       	eor	r1, r1
     f46:	9f 57       	subi	r25, 0x7F	; 127
     f48:	50 40       	sbci	r21, 0x00	; 0
     f4a:	9a f0       	brmi	.+38     	; 0xf72 <__mulsf3_pse+0x88>
     f4c:	f1 f0       	breq	.+60     	; 0xf8a <__mulsf3_pse+0xa0>
     f4e:	88 23       	and	r24, r24
     f50:	4a f0       	brmi	.+18     	; 0xf64 <__mulsf3_pse+0x7a>
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	bb 1f       	adc	r27, r27
     f58:	66 1f       	adc	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	91 50       	subi	r25, 0x01	; 1
     f60:	50 40       	sbci	r21, 0x00	; 0
     f62:	a9 f7       	brne	.-22     	; 0xf4e <__mulsf3_pse+0x64>
     f64:	9e 3f       	cpi	r25, 0xFE	; 254
     f66:	51 05       	cpc	r21, r1
     f68:	80 f0       	brcs	.+32     	; 0xf8a <__mulsf3_pse+0xa0>
     f6a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
     f6e:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	e4 f3       	brlt	.-8      	; 0xf6e <__mulsf3_pse+0x84>
     f76:	98 3e       	cpi	r25, 0xE8	; 232
     f78:	d4 f3       	brlt	.-12     	; 0xf6e <__mulsf3_pse+0x84>
     f7a:	86 95       	lsr	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b7 95       	ror	r27
     f82:	f7 95       	ror	r31
     f84:	e7 95       	ror	r30
     f86:	9f 5f       	subi	r25, 0xFF	; 255
     f88:	c1 f7       	brne	.-16     	; 0xf7a <__mulsf3_pse+0x90>
     f8a:	fe 2b       	or	r31, r30
     f8c:	88 0f       	add	r24, r24
     f8e:	91 1d       	adc	r25, r1
     f90:	96 95       	lsr	r25
     f92:	87 95       	ror	r24
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret

00000f98 <__divmodhi4>:
     f98:	97 fb       	bst	r25, 7
     f9a:	07 2e       	mov	r0, r23
     f9c:	16 f4       	brtc	.+4      	; 0xfa2 <__divmodhi4+0xa>
     f9e:	00 94       	com	r0
     fa0:	07 d0       	rcall	.+14     	; 0xfb0 <__divmodhi4_neg1>
     fa2:	77 fd       	sbrc	r23, 7
     fa4:	09 d0       	rcall	.+18     	; 0xfb8 <__divmodhi4_neg2>
     fa6:	0e 94 f5 07 	call	0xfea	; 0xfea <__udivmodhi4>
     faa:	07 fc       	sbrc	r0, 7
     fac:	05 d0       	rcall	.+10     	; 0xfb8 <__divmodhi4_neg2>
     fae:	3e f4       	brtc	.+14     	; 0xfbe <__divmodhi4_exit>

00000fb0 <__divmodhi4_neg1>:
     fb0:	90 95       	com	r25
     fb2:	81 95       	neg	r24
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	08 95       	ret

00000fb8 <__divmodhi4_neg2>:
     fb8:	70 95       	com	r23
     fba:	61 95       	neg	r22
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255

00000fbe <__divmodhi4_exit>:
     fbe:	08 95       	ret

00000fc0 <__tablejump2__>:
     fc0:	ee 0f       	add	r30, r30
     fc2:	ff 1f       	adc	r31, r31
     fc4:	05 90       	lpm	r0, Z+
     fc6:	f4 91       	lpm	r31, Z
     fc8:	e0 2d       	mov	r30, r0
     fca:	09 94       	ijmp

00000fcc <__umulhisi3>:
     fcc:	a2 9f       	mul	r26, r18
     fce:	b0 01       	movw	r22, r0
     fd0:	b3 9f       	mul	r27, r19
     fd2:	c0 01       	movw	r24, r0
     fd4:	a3 9f       	mul	r26, r19
     fd6:	70 0d       	add	r23, r0
     fd8:	81 1d       	adc	r24, r1
     fda:	11 24       	eor	r1, r1
     fdc:	91 1d       	adc	r25, r1
     fde:	b2 9f       	mul	r27, r18
     fe0:	70 0d       	add	r23, r0
     fe2:	81 1d       	adc	r24, r1
     fe4:	11 24       	eor	r1, r1
     fe6:	91 1d       	adc	r25, r1
     fe8:	08 95       	ret

00000fea <__udivmodhi4>:
     fea:	aa 1b       	sub	r26, r26
     fec:	bb 1b       	sub	r27, r27
     fee:	51 e1       	ldi	r21, 0x11	; 17
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <__udivmodhi4_ep>

00000ff2 <__udivmodhi4_loop>:
     ff2:	aa 1f       	adc	r26, r26
     ff4:	bb 1f       	adc	r27, r27
     ff6:	a6 17       	cp	r26, r22
     ff8:	b7 07       	cpc	r27, r23
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <__udivmodhi4_ep>
     ffc:	a6 1b       	sub	r26, r22
     ffe:	b7 0b       	sbc	r27, r23

00001000 <__udivmodhi4_ep>:
    1000:	88 1f       	adc	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	5a 95       	dec	r21
    1006:	a9 f7       	brne	.-22     	; 0xff2 <__udivmodhi4_loop>
    1008:	80 95       	com	r24
    100a:	90 95       	com	r25
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	08 95       	ret

00001012 <_exit>:
    1012:	f8 94       	cli

00001014 <__stop_program>:
    1014:	ff cf       	rjmp	.-2      	; 0x1014 <__stop_program>
